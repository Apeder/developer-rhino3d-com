[{"ModuleName":"application","functions":[{"ModuleName":"application","Name":"AddAlias","Arguments":["alias","macro"],"Signature":"AddAlias (alias, macro)","Description":"Add new command alias to Rhino. Command aliases can be added manually by\r\n        using Rhino's Options command and modifying the contents of the Aliases tab.\r\n        ","ArgumentDesc":"\r\nalias = name of new command alias. Cannot match command names or existing\r\n        aliases.\r\nmacro = The macro to run when the alias is executed.\r\n        ","Returns":"\r\nTrue or False indicating success or failure.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddAlias in module rhinoscript.application:\r\n\r\nAddAlias(alias, macro) |      Add new command alias to Rhino. Command aliases can be added manually by\r\n        using Rhino's Options command and modifying the contents of the Aliases tab.\r\n        Parameters:\r\n          alias = name of new command alias. Cannot match command names or existing\r\n                  aliases.\r\n          macro = The macro to run when the alias is executed.\r\n        Returns:\r\n          True or False indicating success or failure.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"AddSearchPath","Arguments":["folder","index=-1"],"Signature":"AddSearchPath (folder, index=-1)","Description":"Add new path to Rhino's search path list. Search paths can be added by\r\n        using Rhino's Options command and modifying the contents of the files tab.\r\n        ","ArgumentDesc":"\r\nfolder = A valid folder, or path, to add.\r\nindex [opt] = Zero-based position in the search path list to insert.\r\n              If omitted, path will be appended to the end of the\r\n              search path list.\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSearchPath in module rhinoscript.application:\r\n\r\nAddSearchPath(folder, index=-1) |      Add new path to Rhino's search path list. Search paths can be added by\r\n        using Rhino's Options command and modifying the contents of the files tab.\r\n        Parameters:\r\n          folder = A valid folder, or path, to add.\r\n          index [opt] = Zero-based position in the search path list to insert.\r\n                        If omitted, path will be appended to the end of the\r\n                        search path list.","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"AliasMacro","Arguments":["alias","macro=None"],"Signature":"AliasMacro (alias, macro=None)","Description":"Returns or modifies the macro of a command alias.\r\n        ","ArgumentDesc":"\r\nalias = The name of an existing command alias.\r\nmacro [opt] = The new macro to run when the alias is executed.\r\n        ","Returns":"\r\nIf a new macro is not specified, the existing macro if successful.\r\nIf a new macro is specified, the previous macro if successful.\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AliasMacro in module rhinoscript.application:\r\n\r\nAliasMacro(alias, macro=None) |      Returns or modifies the macro of a command alias.\r\n        Parameters:\r\n          alias = The name of an existing command alias.\r\n          macro [opt] = The new macro to run when the alias is executed.\r\n        Returns:\r\n          If a new macro is not specified, the existing macro if successful.\r\n          If a new macro is specified, the previous macro if successful.\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"AppearanceColor","Arguments":["item","color=None"],"Signature":"AppearanceColor (item, color=None)","Description":"Returns or modifies an application interface item's color.\r\n        ","ArgumentDesc":"\r\nitem = Item number to either query or modify\r\n       0  = View background\r\n       1  = Major grid line\r\n       2  = Minor grid line\r\n       3  = X-Axis line\r\n       4  = Y-Axis line\r\n       5  = Selected Objects\r\n       6  = Locked Objects\r\n       7  = New layers\r\n       8  = Feedback\r\n       9  = Tracking\r\n       10 = Crosshair\r\n       11 = Text\r\n       12 = Text Background\r\n       13 = Text hover\r\ncolor[opt] = The new color value\r\n        ","Returns":"\r\nif color is not specified, the current item color\r\nif color is specified, the previous item color\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AppearanceColor in module rhinoscript.application:\r\n\r\nAppearanceColor(item, color=None) |      Returns or modifies an application interface item's color.\r\n        Parameters:\r\n          item = Item number to either query or modify\r\n                 0  = View background\r\n                 1  = Major grid line\r\n                 2  = Minor grid line\r\n                 3  = X-Axis line\r\n                 4  = Y-Axis line\r\n                 5  = Selected Objects\r\n                 6  = Locked Objects\r\n                 7  = New layers\r\n                 8  = Feedback\r\n                 9  = Tracking\r\n                 10 = Crosshair\r\n                 11 = Text\r\n                 12 = Text Background\r\n                 13 = Text hover\r\n          color[opt] = The new color value\r\n        Returns:\r\n          if color is not specified, the current item color\r\n          if color is specified, the previous item color","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"AutosaveFile","Arguments":["filename=None"],"Signature":"AutosaveFile (filename=None)","Description":"Returns or changes the file name used by Rhino's automatic file saving\r\n        ","ArgumentDesc":"\r\nfilename [opt] = name of the new autosave file\r\n        ","Returns":"\r\nif filename is not specified, the name of the current autosave file\r\nif filename is specified, the name of the previous autosave file\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AutosaveFile in module rhinoscript.application:\r\n\r\nAutosaveFile(filename=None) |      Returns or changes the file name used by Rhino's automatic file saving\r\n        Parameters:\r\n          filename [opt] = name of the new autosave file\r\n        Returns:\r\n          if filename is not specified, the name of the current autosave file\r\n          if filename is specified, the name of the previous autosave file","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"AutosaveInterval","Arguments":["minutes=None"],"Signature":"AutosaveInterval (minutes=None)","Description":"Returns or changes how often the document will be saved when Rhino's\r\n        automatic file saving mechanism is enabled\r\n        ","ArgumentDesc":"\r\nminutes [opt] = the number of minutes between saves\r\n        ","Returns":"\r\nif minutes is not specified, the current interval in minutes\r\nif minutes is specified, the previous interval in minutes\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AutosaveInterval in module rhinoscript.application:\r\n\r\nAutosaveInterval(minutes=None) |      Returns or changes how often the document will be saved when Rhino's\r\n        automatic file saving mechanism is enabled\r\n        Parameters:\r\n          minutes [opt] = the number of minutes between saves\r\n        Returns:\r\n          if minutes is not specified, the current interval in minutes\r\n          if minutes is specified, the previous interval in minutes","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"Command","Arguments":["commandString","echo=True"],"Signature":"Command (commandString, echo=True)","Description":"Runs a Rhino command script. All Rhino commands can be used in command\r\n        scripts. The command can be a built-in Rhino command or one provided by a\r\n        3rd party plug-in.\r\n        ","ArgumentDesc":"\r\ncommandString = a Rhino command including any arguments\r\necho[opt] = the command echo mode\r\n        ","Returns":"\r\n  True or False indicating success or failure\r\n        \r\nWrite command scripts just as you would type the command sequence at the\r\ncommand line. A space or a new line acts like pressing <Enter> at the\r\ncommand line. For more information, see \"Scripting\" in Rhino help.\r\n    \r\nNote, this function is designed to run one command and one command only.\r\nDo not combine multiple Rhino commands into a single call to this method.\r\n  WRONG:\r\n    rs.Command(\"_Line _SelLast _Invert\")\r\n  CORRECT:\r\n    rs.Command(\"_Line\")\r\n    rs.Command(\"_SelLast\")\r\n    rs.Command(\"_Invert\")\r\n    \r\nAlso, the exclamation point and space character ( ! ) combination used by\r\nbutton macros and batch-driven scripts to cancel the previous command is\r\nnot valid.\r\n  WRONG:\r\n    rs.Command(\"! _Line _Pause _Pause\")\r\n  CORRECT:\r\n    rs.Command(\"_Line _Pause _Pause\")\r\nAfter the command script has run, you can obtain the identifiers of most\r\nrecently created or changed object by calling LastCreatedObjects.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Command in module rhinoscript.application:\r\n\r\nCommand(commandString, echo=True) |      Runs a Rhino command script. All Rhino commands can be used in command\r\n        scripts. The command can be a built-in Rhino command or one provided by a\r\n        3rd party plug-in.\r\n        Parameters:\r\n          commandString = a Rhino command including any arguments\r\n          echo[opt] = the command echo mode\r\n        Returns:\r\n          True or False indicating success or failure\r\n        \r\n        Write command scripts just as you would type the command sequence at the\r\n        command line. A space or a new line acts like pressing <Enter> at the\r\n        command line. For more information, see \"Scripting\" in Rhino help.\r\n    \r\n        Note, this function is designed to run one command and one command only.\r\n        Do not combine multiple Rhino commands into a single call to this method.\r\n          WRONG:\r\n            rs.Command(\"_Line _SelLast _Invert\")\r\n          CORRECT:\r\n            rs.Command(\"_Line\")\r\n            rs.Command(\"_SelLast\")\r\n            rs.Command(\"_Invert\")\r\n    \r\n        Also, the exclamation point and space character ( ! ) combination used by\r\n        button macros and batch-driven scripts to cancel the previous command is\r\n        not valid.\r\n          WRONG:\r\n            rs.Command(\"! _Line _Pause _Pause\")\r\n          CORRECT:\r\n            rs.Command(\"_Line _Pause _Pause\")\r\n        After the command script has run, you can obtain the identifiers of most\r\n        recently created or changed object by calling LastCreatedObjects.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"DefaultRenderer","Arguments":["renderer=None"],"Signature":"DefaultRenderer (renderer=None)","Description":"Returns or changes the default render plug-in\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DefaultRenderer in module rhinoscript.application:\r\n\r\nDefaultRenderer(renderer=None) |      Returns or changes the default render plug-in","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"DeleteAlias","Arguments":["alias"],"Signature":"DeleteAlias (alias)","Description":"Delete an existing alias from Rhino.\r\n        ","ArgumentDesc":"\r\nalias = the name of an existing alias\r\n        ","Returns":"\r\nTrue or False indicating success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteAlias in module rhinoscript.application:\r\n\r\nDeleteAlias(alias) |      Delete an existing alias from Rhino.\r\n        Parameters:\r\n          alias = the name of an existing alias\r\n        Returns:\r\n          True or False indicating success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"DeleteSearchPath","Arguments":["folder"],"Signature":"DeleteSearchPath (folder)","Description":"Removes existing path from Rhino's search path list. Search path items\r\n        can be removed manually by using Rhino's options command and modifying the\r\n        contents of the files tab\r\n        ","ArgumentDesc":"\r\nfolder = a folder to remove\r\n        ","Returns":"\r\nTrue or False indicating success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteSearchPath in module rhinoscript.application:\r\n\r\nDeleteSearchPath(folder) |      Removes existing path from Rhino's search path list. Search path items\r\n        can be removed manually by using Rhino's options command and modifying the\r\n        contents of the files tab\r\n        Parameters:\r\n          folder = a folder to remove\r\n        Returns:\r\n          True or False indicating success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"DisplayOleAlerts","Arguments":["enable"],"Signature":"DisplayOleAlerts (enable)","Description":"Enables/disables OLE Server Busy/Not Responding dialog boxes\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DisplayOleAlerts in module rhinoscript.application:\r\n\r\nDisplayOleAlerts(enable) |      Enables/disables OLE Server Busy/Not Responding dialog boxes","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"EdgeAnalysisColor","Arguments":["color=None"],"Signature":"EdgeAnalysisColor (color=None)","Description":"Returns or modifies edge analysis color displayed by the ShowEdges command\r\n        ","ArgumentDesc":"\r\ncolor [opt] = the new color\r\n        ","Returns":"\r\nif color is not specified, the current edge analysis color\r\nif color is specified, the previous edge analysis color\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EdgeAnalysisColor in module rhinoscript.application:\r\n\r\nEdgeAnalysisColor(color=None) |      Returns or modifies edge analysis color displayed by the ShowEdges command\r\n        Parameters:\r\n          color [opt] = the new color\r\n        Returns:\r\n          if color is not specified, the current edge analysis color\r\n          if color is specified, the previous edge analysis color","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"EdgeAnalysisMode","Arguments":["mode=None"],"Signature":"EdgeAnalysisMode (mode=None)","Description":"Returns or modifies edge analysis mode displayed by the ShowEdges command\r\n        ","ArgumentDesc":"\r\nmode [opt] = the new display mode. The available modes are\r\n             0 - display all edges\r\n             1 - display naked edges\r\n        ","Returns":"\r\nif mode is not specified, the current edge analysis mode\r\nif mode is specified, the previous edge analysis mode\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EdgeAnalysisMode in module rhinoscript.application:\r\n\r\nEdgeAnalysisMode(mode=None) |      Returns or modifies edge analysis mode displayed by the ShowEdges command\r\n        Parameters:\r\n          mode [opt] = the new display mode. The available modes are\r\n                       0 - display all edges\r\n                       1 - display naked edges\r\n        Returns:\r\n          if mode is not specified, the current edge analysis mode\r\n          if mode is specified, the previous edge analysis mode","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"EnableAutosave","Arguments":["enable=True"],"Signature":"EnableAutosave (enable=True)","Description":"Enables or disables Rhino's automatic file saving mechanism\r\n        ","ArgumentDesc":"\r\nenable = the autosave state\r\n        ","Returns":"\r\nthe previous autosave state\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EnableAutosave in module rhinoscript.application:\r\n\r\nEnableAutosave(enable=True) |      Enables or disables Rhino's automatic file saving mechanism\r\n        Parameters:\r\n          enable = the autosave state\r\n        Returns:\r\n          the previous autosave state","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"EnablePlugIn","Arguments":["plugin","enable=None"],"Signature":"EnablePlugIn (plugin, enable=None)","Description":"Enables or disables a Rhino plug-in\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EnablePlugIn in module rhinoscript.application:\r\n\r\nEnablePlugIn(plugin, enable=None) |      Enables or disables a Rhino plug-in","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"FindFile","Arguments":["filename"],"Signature":"FindFile (filename)","Description":"Searches for a file using Rhino's search path. Rhino will look for a\r\n        file in the following locations:\r\n          1. The current document's folder.\r\n          2. Folder's specified in Options dialog, File tab.\r\n          3. Rhino's System folders\r\n        ","ArgumentDesc":"\r\nfilename = short file name to search for\r\n        ","Returns":"\r\nfull path on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function FindFile in module rhinoscript.application:\r\n\r\nFindFile(filename) |      Searches for a file using Rhino's search path. Rhino will look for a\r\n        file in the following locations:\r\n          1. The current document's folder.\r\n          2. Folder's specified in Options dialog, File tab.\r\n          3. Rhino's System folders\r\n        Parameters:\r\n          filename = short file name to search for\r\n        Returns:\r\n          full path on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"GetPlugInObject","Arguments":["plug_in"],"Signature":"GetPlugInObject (plug_in)","Description":"Returns a scriptable object from a specified plug-in. Not all plug-ins\r\n        contain scriptable objects. Check with the manufacturer of your plug-in\r\n        to see if they support this capability.\r\n        ","ArgumentDesc":"\r\nplug_in = name or Id of a registered plug-in that supports scripting.\r\n          If the plug-in is registered but not loaded, it will be loaded\r\n        ","Returns":"\r\nscriptable object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetPlugInObject in module rhinoscript.application:\r\n\r\nGetPlugInObject(plug_in) |      Returns a scriptable object from a specified plug-in. Not all plug-ins\r\n        contain scriptable objects. Check with the manufacturer of your plug-in\r\n        to see if they support this capability.\r\n        Parameters:\r\n          plug_in = name or Id of a registered plug-in that supports scripting.\r\n                    If the plug-in is registered but not loaded, it will be loaded\r\n        Returns:\r\n          scriptable object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"InCommand","Arguments":["ignore_runners=True"],"Signature":"InCommand (ignore_runners=True)","Description":"Determines if Rhino is currently running a command. Because Rhino allows\r\n        for transparent commands (commands run from inside of other commands), this\r\n        method returns the total number of active commands.\r\n        ","ArgumentDesc":"\r\nignore_runners [opt] = If true, script running commands, such as\r\n    LoadScript, RunScript, and ReadCommandFile will not counted.\r\n        ","Returns":"\r\nthe number of active commands\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function InCommand in module rhinoscript.application:\r\n\r\nInCommand(ignore_runners=True) |      Determines if Rhino is currently running a command. Because Rhino allows\r\n        for transparent commands (commands run from inside of other commands), this\r\n        method returns the total number of active commands.\r\n        Parameters:\r\n          ignore_runners [opt] = If true, script running commands, such as\r\n              LoadScript, RunScript, and ReadCommandFile will not counted.\r\n        Returns:\r\n          the number of active commands","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"IsAlias","Arguments":["alias"],"Signature":"IsAlias (alias)","Description":"Verifies that a command alias exists in Rhino\r\n        ","ArgumentDesc":"\r\nthe name of an existing command alias\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsAlias in module rhinoscript.application:\r\n\r\nIsAlias(alias) |      Verifies that a command alias exists in Rhino\r\n        Parameters:\r\n          the name of an existing command alias","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"IsCommand","Arguments":["command_name"],"Signature":"IsCommand (command_name)","Description":"Verifies that a command exists in Rhino. Useful when scripting commands\r\n        found in 3rd party plug-ins.\r\n        ","ArgumentDesc":"\r\ncommand_name = the command name to test\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCommand in module rhinoscript.application:\r\n\r\nIsCommand(command_name) |      Verifies that a command exists in Rhino. Useful when scripting commands\r\n        found in 3rd party plug-ins.\r\n        Parameters:\r\n          command_name = the command name to test","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"IsPlugIn","Arguments":["plugin"],"Signature":"IsPlugIn (plugin)","Description":"Verifies that a plug-in is registered\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPlugIn in module rhinoscript.application:\r\n\r\nIsPlugIn(plugin) |      Verifies that a plug-in is registered","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"Ortho","Arguments":["enable=None"],"Signature":"Ortho (enable=None)","Description":"Enables or disables Rhino's ortho modeling aid.\r\n        ","ArgumentDesc":"\r\nenable [opt] = the new enabled status (True or False)\r\n        ","Returns":"\r\nif enable is not specified, then the current ortho status\r\nif enable is secified, then the previous ortho status\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Ortho in module rhinoscript.application:\r\n\r\nOrtho(enable=None) |      Enables or disables Rhino's ortho modeling aid.\r\n        Parameters:\r\n          enable [opt] = the new enabled status (True or False)\r\n        Returns:\r\n          if enable is not specified, then the current ortho status\r\n          if enable is secified, then the previous ortho status","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"Osnap","Arguments":["enable=None"],"Signature":"Osnap (enable=None)","Description":"Enables or disables Rhino's object snap modeling aid.\r\n        Object snaps are tools for specifying points on existing objects.\r\n        ","ArgumentDesc":"\r\nenable [opt] = the new enabled status (True or False)\r\n        ","Returns":"\r\nif enable is not specified, then the current osnap status\r\nif enable is secified, then the previous osnap status\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Osnap in module rhinoscript.application:\r\n\r\nOsnap(enable=None) |      Enables or disables Rhino's object snap modeling aid.\r\n        Object snaps are tools for specifying points on existing objects.\r\n        Parameters:\r\n          enable [opt] = the new enabled status (True or False)\r\n        Returns:\r\n          if enable is not specified, then the current osnap status\r\n          if enable is secified, then the previous osnap status","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"OsnapDialog","Arguments":["visible=None"],"Signature":"OsnapDialog (visible=None)","Description":"Shows or hides Rhino's dockable object snap bar\r\n        ","ArgumentDesc":"\r\nvisible [opt] = the new visibility state (True or False)\r\n        ","Returns":"\r\nif visible is not specified, then the current visible state\r\nif visible is secified, then the previous visible state\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OsnapDialog in module rhinoscript.application:\r\n\r\nOsnapDialog(visible=None) |      Shows or hides Rhino's dockable object snap bar\r\n        Parameters:\r\n          visible [opt] = the new visibility state (True or False)\r\n        Returns:\r\n          if visible is not specified, then the current visible state\r\n          if visible is secified, then the previous visible state","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"OsnapMode","Arguments":["mode=None"],"Signature":"OsnapMode (mode=None)","Description":"Returns or sets the object snap mode. Object snaps are tools for\r\n        specifying points on existing objects\r\n        ","ArgumentDesc":"\r\nmode [opt] = The object snap mode or modes to set. Object snap modes\r\n             can be added together to set multiple modes\r\n             0     None\r\n             2     Near\r\n             8     Focus\r\n             32    Center\r\n             64    Vertex\r\n             128   Knot\r\n             512   Quadrant\r\n             2048  Midpoint\r\n             8192  Intersection\r\n             0x20000   End\r\n             0x80000   Perpendicular\r\n             0x200000   Tangent\r\n             0x8000000  Point\r\n        ","Returns":"\r\nif mode is not specified, then the current object snap mode(s)\r\nif mode is specified, then the previous object snap mode(s) \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OsnapMode in module rhinoscript.application:\r\n\r\nOsnapMode(mode=None) |      Returns or sets the object snap mode. Object snaps are tools for\r\n        specifying points on existing objects\r\n        Parameters:\r\n          mode [opt] = The object snap mode or modes to set. Object snap modes\r\n                       can be added together to set multiple modes\r\n                       0     None\r\n                       2     Near\r\n                       8     Focus\r\n                       32    Center\r\n                       64    Vertex\r\n                       128   Knot\r\n                       512   Quadrant\r\n                       2048  Midpoint\r\n                       8192  Intersection\r\n                       0x20000   End\r\n                       0x80000   Perpendicular\r\n                       0x200000   Tangent\r\n                       0x8000000  Point\r\n        Returns:\r\n          if mode is not specified, then the current object snap mode(s)\r\n          if mode is specified, then the previous object snap mode(s)","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"Planar","Arguments":["enable=None"],"Signature":"Planar (enable=None)","Description":"Enables or disables Rhino's planar modeling aid\r\n        ","ArgumentDesc":"\r\nenable = the new enable status (True or False)\r\n        ","Returns":"\r\nif enable is not specified, then the current planar status\r\nif enable is secified, then the previous planar status\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Planar in module rhinoscript.application:\r\n\r\nPlanar(enable=None) |      Enables or disables Rhino's planar modeling aid\r\n        Parameters:\r\n          enable = the new enable status (True or False)\r\n        Returns:\r\n          if enable is not specified, then the current planar status\r\n          if enable is secified, then the previous planar status","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"PlugInId","Arguments":["plugin"],"Signature":"PlugInId (plugin)","Description":"Returns the identifier of a plug-in given the plug-in name\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlugInId in module rhinoscript.application:\r\n\r\nPlugInId(plugin) |      Returns the identifier of a plug-in given the plug-in name","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"PlugIns","Arguments":["types=0","status=0"],"Signature":"PlugIns (types=0, status=0)","Description":"Returns a list of registered Rhino plug-ins\r\n        ","ArgumentDesc":"\r\ntypes[opt] = type of plug-ins to return. 0=all, 1=render, 2=file export,\r\n  4=file import, 8=digitizer, 16=utility\r\nstatus[opt] = 0=both loaded and unloaded, 1=loaded, 2=unloaded\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlugIns in module rhinoscript.application:\r\n\r\nPlugIns(types=0, status=0) |      Returns a list of registered Rhino plug-ins\r\n        Parameters:\r\n          types[opt] = type of plug-ins to return. 0=all, 1=render, 2=file export,\r\n            4=file import, 8=digitizer, 16=utility\r\n          status[opt] = 0=both loaded and unloaded, 1=loaded, 2=unloaded","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"ProjectOsnaps","Arguments":["enable=None"],"Signature":"ProjectOsnaps (enable=None)","Description":"Enables or disables object snap projection\r\n        ","ArgumentDesc":"\r\nenable [opt] = the new enabled status (True or False)\r\n        ","Returns":"\r\nif enable is not specified, the current object snap projection status\r\nif enable is specified, the previous object snap projection status\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ProjectOsnaps in module rhinoscript.application:\r\n\r\nProjectOsnaps(enable=None) |      Enables or disables object snap projection\r\n        Parameters:\r\n          enable [opt] = the new enabled status (True or False)\r\n        Returns:\r\n          if enable is not specified, the current object snap projection status\r\n          if enable is specified, the previous object snap projection status","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"Prompt","Arguments":["message=None"],"Signature":"Prompt (message=None)","Description":"Change Rhino's command window prompt\r\n        ","ArgumentDesc":"\r\nmessage [opt] = the new prompt\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Prompt in module rhinoscript.application:\r\n\r\nPrompt(message=None) |      Change Rhino's command window prompt\r\n        Parameters:\r\n          message [opt] = the new prompt","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"SendKeystrokes","Arguments":["keys=None","add_return=True"],"Signature":"SendKeystrokes (keys=None, add_return=True)","Description":"Sends a string of printable characters to Rhino's command line\r\n        ","ArgumentDesc":"\r\nkeys [opt] = A string of characters to send to the command line.\r\nadd_returns [opt] = Append a return character to the end of the string.\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SendKeystrokes in module rhinoscript.application:\r\n\r\nSendKeystrokes(keys=None, add_return=True) |      Sends a string of printable characters to Rhino's command line\r\n        Parameters:\r\n          keys [opt] = A string of characters to send to the command line.\r\n          add_returns [opt] = Append a return character to the end of the string.","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"Snap","Arguments":["enable=None"],"Signature":"Snap (enable=None)","Description":"Enables or disables Rhino's grid snap modeling aid\r\n        ","ArgumentDesc":"\r\nenable [opt] = the new enabled status (True or False)\r\n        ","Returns":"\r\nif enable is not specified, the current grid snap status\r\nif enable is specified, the previous grid snap status  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Snap in module rhinoscript.application:\r\n\r\nSnap(enable=None) |      Enables or disables Rhino's grid snap modeling aid\r\n        Parameters:\r\n          enable [opt] = the new enabled status (True or False)\r\n        Returns:\r\n          if enable is not specified, the current grid snap status\r\n          if enable is specified, the previous grid snap status","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"StatusBarDistance","Arguments":["distance=0"],"Signature":"StatusBarDistance (distance=0)","Description":"Sets Rhino's status bar distance pane\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function StatusBarDistance in module rhinoscript.application:\r\n\r\nStatusBarDistance(distance=0) |      Sets Rhino's status bar distance pane","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"StatusBarMessage","Arguments":["message=None"],"Signature":"StatusBarMessage (message=None)","Description":"Sets Rhino's status bar message pane\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function StatusBarMessage in module rhinoscript.application:\r\n\r\nStatusBarMessage(message=None) |      Sets Rhino's status bar message pane","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"StatusBarPoint","Arguments":["point=None"],"Signature":"StatusBarPoint (point=None)","Description":"Sets Rhino's status bar point coordinate pane\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function StatusBarPoint in module rhinoscript.application:\r\n\r\nStatusBarPoint(point=None) |      Sets Rhino's status bar point coordinate pane","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"StatusBarProgressMeterShow","Arguments":["label","lower","upper","embed_label=True","show_percent=True"],"Signature":"StatusBarProgressMeterShow (label, lower, upper, embed_label=True, show_percent=True)","Description":"Start the Rhino status bar progress meter\r\n        ","ArgumentDesc":"\r\nlabel = short description of the progesss\r\nlower = lower limit of the progress meter's range\r\nupper = upper limit of the progress meter's range\r\nembed_label[opt] = if True, the label will show inside the meter.\r\n  If false, the label will show to the left of the meter\r\nshow_percent[opt] = show the percent complete\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function StatusBarProgressMeterShow in module rhinoscript.application:\r\n\r\nStatusBarProgressMeterShow(label, lower, upper, embed_label=True, show_percent=True) |      Start the Rhino status bar progress meter\r\n        Parameters:\r\n          label = short description of the progesss\r\n          lower = lower limit of the progress meter's range\r\n          upper = upper limit of the progress meter's range\r\n          embed_label[opt] = if True, the label will show inside the meter.\r\n            If false, the label will show to the left of the meter\r\n          show_percent[opt] = show the percent complete\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"StatusBarProgressMeterUpdate","Arguments":["position","absolute=True"],"Signature":"StatusBarProgressMeterUpdate (position, absolute=True)","Description":"Set the current position of the progress meter\r\n        ","ArgumentDesc":"\r\nposition = new position in the progress meter\r\nabsolute[opt] = position is an absolute or relative\r\n        ","Returns":"\r\nprevious position setting\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function StatusBarProgressMeterUpdate in module rhinoscript.application:\r\n\r\nStatusBarProgressMeterUpdate(position, absolute=True) |      Set the current position of the progress meter\r\n        Parameters:\r\n          position = new position in the progress meter\r\n          absolute[opt] = position is an absolute or relative\r\n        Returns:\r\n          previous position setting","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"TemplateFile","Arguments":["filename=None"],"Signature":"TemplateFile (filename=None)","Description":"Returns or sets Rhino's default template file. This is the file used\r\n        when Rhino starts.\r\n        ","ArgumentDesc":"\r\nfilename[opt] = The name of the new default template file (must exist)\r\n        ","Returns":"\r\nif filename is not specified, then the current default template file\r\nif filename is specified, then the previous default template file\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TemplateFile in module rhinoscript.application:\r\n\r\nTemplateFile(filename=None) |      Returns or sets Rhino's default template file. This is the file used\r\n        when Rhino starts.\r\n        Parameters:\r\n          filename[opt] = The name of the new default template file (must exist)\r\n        Returns:\r\n          if filename is not specified, then the current default template file\r\n          if filename is specified, then the previous default template file","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"TemplateFolder","Arguments":["folder=None"],"Signature":"TemplateFolder (folder=None)","Description":"Returns or sets the location of Rhino's template folder\r\n        ","ArgumentDesc":"\r\nThe location of Rhino's template files. Note, the location must exist\r\n        ","Returns":"\r\nif folder is not specified, then the current template file folder\r\nif folder is specified, then the previous template file folder\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TemplateFolder in module rhinoscript.application:\r\n\r\nTemplateFolder(folder=None) |      Returns or sets the location of Rhino's template folder\r\n        Parameters:\r\n          The location of Rhino's template files. Note, the location must exist\r\n        Returns:\r\n          if folder is not specified, then the current template file folder\r\n          if folder is specified, then the previous template file folder","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"application","Name":"WorkingFolder","Arguments":["folder=None"],"Signature":"WorkingFolder (folder=None)","Description":"Returns or sets Rhino's working folder (directory).\r\n        The working folder is the default folder for all file operations.\r\n        ","ArgumentDesc":"\r\nfolder[opt] = the new working folder\r\n        ","Returns":"\r\nif folder is not specified, then the current working folder\r\nif folder is specified, then the previous working folder\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function WorkingFolder in module rhinoscript.application:\r\n\r\nWorkingFolder(folder=None) |      Returns or sets Rhino's working folder (directory).\r\n        The working folder is the default folder for all file operations.\r\n        Parameters:\r\n          folder[opt] = the new working folder\r\n        Returns:\r\n          if folder is not specified, then the current working folder\r\n          if folder is specified, then the previous working folder","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"block","functions":[{"ModuleName":"block","Name":"AddBlock","Arguments":["object_ids","base_point","name=None","delete_input=False"],"Signature":"AddBlock (object_ids, base_point, name=None, delete_input=False)","Description":"Adds a new block definition to the document\r\n        ","ArgumentDesc":"\r\nobject_ids = objects that will be included in the block\r\nbase_point = 3D base point for the block definition\r\nname(opt) = name of the block definition. If omitted a name will be\r\n  automatically generated\r\ndelete_input(opt) = if True, the object_ids will be deleted\r\n        ","Returns":"\r\nname of new block definition on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddBlock in module rhinoscript.block:\r\n\r\nAddBlock(object_ids, base_point, name=None, delete_input=False) |      Adds a new block definition to the document\r\n        Parameters:\r\n          object_ids = objects that will be included in the block\r\n          base_point = 3D base point for the block definition\r\n          name(opt) = name of the block definition. If omitted a name will be\r\n            automatically generated\r\n          delete_input(opt) = if True, the object_ids will be deleted\r\n        Returns:\r\n          name of new block definition on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockContainerCount","Arguments":["block_name"],"Signature":"BlockContainerCount (block_name)","Description":"Returns number of block definitions that contain a specified\r\n        block definition\r\n        ","ArgumentDesc":"\r\nblock_name = the name of an existing block definition\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockContainerCount in module rhinoscript.block:\r\n\r\nBlockContainerCount(block_name) |      Returns number of block definitions that contain a specified\r\n        block definition\r\n        Parameters:\r\n          block_name = the name of an existing block definition","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockContainers","Arguments":["block_name"],"Signature":"BlockContainers (block_name)","Description":"Returns names of the block definitions that contain a specified block\r\n        definition.\r\n        ","ArgumentDesc":"\r\nblock_name = the name of an existing block definition\r\n        ","Returns":"\r\nA list of block definition names\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockContainers in module rhinoscript.block:\r\n\r\nBlockContainers(block_name) |      Returns names of the block definitions that contain a specified block\r\n        definition.\r\n        Parameters:\r\n          block_name = the name of an existing block definition\r\n        Returns:\r\n          A list of block definition names","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockDescription","Arguments":["block_name","description=None"],"Signature":"BlockDescription (block_name, description=None)","Description":"Returns or sets the description of a block definition\r\n        ","ArgumentDesc":"\r\nblock_name = the name of an existing block definition\r\ndescription[opt] = The new description.\r\n        ","Returns":"\r\nif description is not specified, the current description\r\nif description is specified, the previous description\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockDescription in module rhinoscript.block:\r\n\r\nBlockDescription(block_name, description=None) |      Returns or sets the description of a block definition\r\n        Parameters:\r\n          block_name = the name of an existing block definition\r\n          description[opt] = The new description.\r\n        Returns:\r\n          if description is not specified, the current description\r\n          if description is specified, the previous description","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockInstanceCount","Arguments":["block_name","where_to_look=0"],"Signature":"BlockInstanceCount (block_name, where_to_look=0)","Description":"Counts number of instances of the block in the document.\r\n        Nested instances are not included in the count.\r\n        ","ArgumentDesc":"\r\nblock_name = the name of an existing block definition\r\nwhere_to_look [opt] =\r\n  0 = get top level references in active document.\r\n  1 = get top level and nested references in active document.\r\n  2 = check for references from other instance definitions\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockInstanceCount in module rhinoscript.block:\r\n\r\nBlockInstanceCount(block_name, where_to_look=0) |      Counts number of instances of the block in the document.\r\n        Nested instances are not included in the count.\r\n        Parameters:\r\n          block_name = the name of an existing block definition\r\n          where_to_look [opt] =\r\n            0 = get top level references in active document.\r\n            1 = get top level and nested references in active document.\r\n            2 = check for references from other instance definitions","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockInstanceInsertPoint","Arguments":["object_id"],"Signature":"BlockInstanceInsertPoint (object_id)","Description":"Returns the insertion point of a block instance.\r\n        ","ArgumentDesc":"\r\nobject_id = The identifier of an existing block insertion object\r\n        ","Returns":"\r\nlist representing 3D point if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockInstanceInsertPoint in module rhinoscript.block:\r\n\r\nBlockInstanceInsertPoint(object_id) |      Returns the insertion point of a block instance.\r\n        Parameters:\r\n          object_id = The identifier of an existing block insertion object\r\n        Returns:\r\n          list representing 3D point if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockInstanceName","Arguments":["object_id"],"Signature":"BlockInstanceName (object_id)","Description":"Returns the block name of a block instance\r\n        ","ArgumentDesc":"\r\nobject_id = The identifier of an existing block insertion object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockInstanceName in module rhinoscript.block:\r\n\r\nBlockInstanceName(object_id) |      Returns the block name of a block instance\r\n        Parameters:\r\n          object_id = The identifier of an existing block insertion object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockInstanceXform","Arguments":["object_id"],"Signature":"BlockInstanceXform (object_id)","Description":"Returns the location of a block instance relative to the world coordinate\r\n        system origin (0,0,0). The position is returned as a 4x4 transformation\r\n        matrix\r\n        ","ArgumentDesc":"\r\nobject_id = The identifier of an existing block insertion object  \r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockInstanceXform in module rhinoscript.block:\r\n\r\nBlockInstanceXform(object_id) |      Returns the location of a block instance relative to the world coordinate\r\n        system origin (0,0,0). The position is returned as a 4x4 transformation\r\n        matrix\r\n        Parameters:\r\n          object_id = The identifier of an existing block insertion object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockInstances","Arguments":["block_name"],"Signature":"BlockInstances (block_name)","Description":"Returns the identifiers of the inserted instances of a block.\r\n        ","ArgumentDesc":"\r\nblock_name = the name of an existing block definition\r\n        ","Returns":"\r\nlist of guids identifying the instances of a block\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockInstances in module rhinoscript.block:\r\n\r\nBlockInstances(block_name) |      Returns the identifiers of the inserted instances of a block.\r\n        Parameters:\r\n          block_name = the name of an existing block definition\r\n        Returns:\r\n          list of guids identifying the instances of a block","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockNames","Arguments":["sort=False"],"Signature":"BlockNames (sort=False)","Description":"Returns the names of all block definitions in the document\r\n        ","ArgumentDesc":"\r\nsort = return a sorted list\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockNames in module rhinoscript.block:\r\n\r\nBlockNames(sort=False) |      Returns the names of all block definitions in the document\r\n        Parameters:\r\n          sort = return a sorted list","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockObjectCount","Arguments":["block_name"],"Signature":"BlockObjectCount (block_name)","Description":"Returns number of objects that make up a block definition\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockObjectCount in module rhinoscript.block:\r\n\r\nBlockObjectCount(block_name) |      Returns number of objects that make up a block definition\r\n        Parameters:\r\n          block_name = name of an existing block definition","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockObjects","Arguments":["block_name"],"Signature":"BlockObjects (block_name)","Description":"Returns identifiers of the objects that make up a block definition\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\n        ","Returns":"\r\nlist of identifiers on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockObjects in module rhinoscript.block:\r\n\r\nBlockObjects(block_name) |      Returns identifiers of the objects that make up a block definition\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n        Returns:\r\n          list of identifiers on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockPath","Arguments":["block_name"],"Signature":"BlockPath (block_name)","Description":"Returns path to the source of a linked or embedded block definition.\r\n        A linked or embedded block definition is a block definition that was\r\n        inserted from an external file.\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\n        ","Returns":"\r\npath to the linked block on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockPath in module rhinoscript.block:\r\n\r\nBlockPath(block_name) |      Returns path to the source of a linked or embedded block definition.\r\n        A linked or embedded block definition is a block definition that was\r\n        inserted from an external file.\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n        Returns:\r\n          path to the linked block on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"BlockStatus","Arguments":["block_name"],"Signature":"BlockStatus (block_name)","Description":"Returns the status of a linked block. See help for status codes\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BlockStatus in module rhinoscript.block:\r\n\r\nBlockStatus(block_name) |      Returns the status of a linked block. See help for status codes","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"DeleteBlock","Arguments":["block_name"],"Signature":"DeleteBlock (block_name)","Description":"Deletes a block definition and all of it's inserted instances.\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\n        ","Returns":"\r\nTrue or False indicating success or failure  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteBlock in module rhinoscript.block:\r\n\r\nDeleteBlock(block_name) |      Deletes a block definition and all of it's inserted instances.\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"ExplodeBlockInstance","Arguments":["object_id","explode_nested_instances=False"],"Signature":"ExplodeBlockInstance (object_id, explode_nested_instances=False)","Description":"Explodes a block instance into it's geometric components. The\r\n        exploded objects are added to the document\r\n        ","ArgumentDesc":"\r\nobject_id = The identifier of an existing block insertion object  \r\nexplode_nested_instances = By default nested blocks are not exploded.\r\n        ","Returns":"\r\nidentifiers for the newly exploded objects on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExplodeBlockInstance in module rhinoscript.block:\r\n\r\nExplodeBlockInstance(object_id, explode_nested_instances=False) |      Explodes a block instance into it's geometric components. The\r\n        exploded objects are added to the document\r\n        Parameters:\r\n          object_id = The identifier of an existing block insertion object  \r\n          explode_nested_instances = By default nested blocks are not exploded.\r\n        Returns:\r\n          identifiers for the newly exploded objects on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"InsertBlock2","Arguments":["block_name","xform"],"Signature":"InsertBlock2 (block_name, xform)","Description":"Inserts a block whose definition already exists in the document\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\nxform = 4x4 transformation matrix to apply\r\n        ","Returns":"\r\nid for the block that was added to the doc on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function InsertBlock2 in module rhinoscript.block:\r\n\r\nInsertBlock2(block_name, xform) |      Inserts a block whose definition already exists in the document\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n          xform = 4x4 transformation matrix to apply\r\n        Returns:\r\n          id for the block that was added to the doc on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"IsBlock","Arguments":["block_name"],"Signature":"IsBlock (block_name)","Description":"Verifies the existence of a block definition in the document.\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsBlock in module rhinoscript.block:\r\n\r\nIsBlock(block_name) |      Verifies the existence of a block definition in the document.\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"IsBlockEmbedded","Arguments":["block_name"],"Signature":"IsBlockEmbedded (block_name)","Description":"Verifies a block definition is embedded, or linked, from an external file.\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsBlockEmbedded in module rhinoscript.block:\r\n\r\nIsBlockEmbedded(block_name) |      Verifies a block definition is embedded, or linked, from an external file.\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"IsBlockInUse","Arguments":["block_name","where_to_look=0"],"Signature":"IsBlockInUse (block_name, where_to_look=0)","Description":"Verifies that a block definition is being used by an inserted instance\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\nwhere_to_look [opt] = One of the following values\r\n     0 = Check for top level references in active document\r\n     1 = Check for top level and nested references in active document\r\n     2 = Check for references in other instance definitions\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsBlockInUse in module rhinoscript.block:\r\n\r\nIsBlockInUse(block_name, where_to_look=0) |      Verifies that a block definition is being used by an inserted instance\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n          where_to_look [opt] = One of the following values\r\n               0 = Check for top level references in active document\r\n               1 = Check for top level and nested references in active document\r\n               2 = Check for references in other instance definitions\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"IsBlockInstance","Arguments":["object_id"],"Signature":"IsBlockInstance (object_id)","Description":"Verifies an object is a block instance\r\n        ","ArgumentDesc":"\r\nobject_id = The identifier of an existing block insertion object\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsBlockInstance in module rhinoscript.block:\r\n\r\nIsBlockInstance(object_id) |      Verifies an object is a block instance\r\n        Parameters:\r\n          object_id = The identifier of an existing block insertion object\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"IsBlockReference","Arguments":["block_name"],"Signature":"IsBlockReference (block_name)","Description":"Verifies that a block definition is from a reference file.\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsBlockReference in module rhinoscript.block:\r\n\r\nIsBlockReference(block_name) |      Verifies that a block definition is from a reference file.\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"block","Name":"RenameBlock","Arguments":["block_name","new_name"],"Signature":"RenameBlock (block_name, new_name)","Description":"Renames an existing block definition\r\n        ","ArgumentDesc":"\r\nblock_name = name of an existing block definition\r\nnew_name = name to change to\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenameBlock in module rhinoscript.block:\r\n\r\nRenameBlock(block_name, new_name) |      Renames an existing block definition\r\n        Parameters:\r\n          block_name = name of an existing block definition\r\n          new_name = name to change to\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"curve","functions":[{"ModuleName":"curve","Name":"AddArc","Arguments":["plane","radius","angle_degrees"],"Signature":"AddArc (plane, radius, angle_degrees)","Description":"Adds an arc curve to the document\r\n        ","ArgumentDesc":"\r\nplane = plane on which the arc will lie. The origin of the plane will be\r\n  the center point of the arc. x-axis of the plane defines the 0 angle\r\n  direction.\r\nradius = radius of the arc\r\nangle_degrees = interval of arc\r\n        ","Returns":"\r\nid of the new curve object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddArc in module rhinoscript.curve:\r\n\r\nAddArc(plane, radius, angle_degrees) |      Adds an arc curve to the document\r\n        Parameters:\r\n          plane = plane on which the arc will lie. The origin of the plane will be\r\n            the center point of the arc. x-axis of the plane defines the 0 angle\r\n            direction.\r\n          radius = radius of the arc\r\n          angle_degrees = interval of arc\r\n        Returns:\r\n          id of the new curve object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddArc3Pt","Arguments":["start","end","point_on_arc"],"Signature":"AddArc3Pt (start, end, point_on_arc)","Description":"Adds a 3-point arc curve to the document\r\n        ","ArgumentDesc":"\r\nstart, end = endpoints of the arc\r\npoint_on_arc = a point on the arc\r\n        ","Returns":"\r\nid of the new curve object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddArc3Pt in module rhinoscript.curve:\r\n\r\nAddArc3Pt(start, end, point_on_arc) |      Adds a 3-point arc curve to the document\r\n        Parameters:\r\n          start, end = endpoints of the arc\r\n          point_on_arc = a point on the arc\r\n        Returns:\r\n          id of the new curve object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddArcPtTanPt","Arguments":["start","direction","end"],"Signature":"AddArcPtTanPt (start, direction, end)","Description":"Adds an arc curve, created from a start point, a start direction, and an\r\n        end point, to the document\r\n        Returns:\r\n          id of the new curve object\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddArcPtTanPt in module rhinoscript.curve:\r\n\r\nAddArcPtTanPt(start, direction, end) |      Adds an arc curve, created from a start point, a start direction, and an\r\n        end point, to the document\r\n        Returns:\r\n          id of the new curve object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddBlendCurve","Arguments":["curves","parameters","reverses","continuities"],"Signature":"AddBlendCurve (curves, parameters, reverses, continuities)","Description":"Makes a curve blend between two curves\r\n        ","ArgumentDesc":"\r\ncurves = two curves\r\nparameters = two curve parameters defining the blend end points\r\nreverses = two boolean values specifying to use the natural or opposite direction of the curve\r\ncontinuities = two numbers specifying continuity at end points\r\n  0 = position, 1 = tangency, 2 = curvature\r\n        ","Returns":"\r\nidentifier of new curve on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddBlendCurve in module rhinoscript.curve:\r\n\r\nAddBlendCurve(curves, parameters, reverses, continuities) |      Makes a curve blend between two curves\r\n        Parameters:\r\n          curves = two curves\r\n          parameters = two curve parameters defining the blend end points\r\n          reverses = two boolean values specifying to use the natural or opposite direction of the curve\r\n          continuities = two numbers specifying continuity at end points\r\n            0 = position, 1 = tangency, 2 = curvature\r\n        Returns:\r\n          identifier of new curve on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddCircle","Arguments":["plane_or_center","radius"],"Signature":"AddCircle (plane_or_center, radius)","Description":"Adds a circle curve to the document\r\n        ","ArgumentDesc":"\r\nplane_or_center = plane on which the circle will lie. If a point is\r\n  passed, this will be the center of the circle on the active\r\n  construction plane\r\nradius = the radius of the circle\r\n        ","Returns":"\r\nid of the new curve object\r\n        ","Example":["import rhinoscriptsyntax as rs","plane = rs.WorldXYPlane()","rs.AddCircle( plane, 5.0 )","        "],"ExampleString":"\r\nimport rhinoscriptsyntax as rs\r\nplane = rs.WorldXYPlane()\r\nrs.AddCircle( plane, 5.0 )\r\n        ","SeeAlso":["AddCircle3Pt","CircleCenterPoint","CircleCircumference","CircleRadius","IsCircle"],"DocString":"Help on function AddCircle in module rhinoscript.curve:\r\n\r\nAddCircle(plane_or_center, radius) |      Adds a circle curve to the document\r\n        Parameters:\r\n          plane_or_center = plane on which the circle will lie. If a point is\r\n            passed, this will be the center of the circle on the active\r\n            construction plane\r\n          radius = the radius of the circle\r\n        Returns:\r\n          id of the new curve object\r\n        Example:\r\n          import rhinoscriptsyntax as rs\r\n          plane = rs.WorldXYPlane()\r\n          rs.AddCircle( plane, 5.0 )\r\n        SeeAlso:\r\n          AddCircle3Pt\r\n          CircleCenterPoint\r\n          CircleCircumference\r\n          CircleRadius\r\n          IsCircle","SuccessLevel":4,"IsDocStringWellFormed":true},{"ModuleName":"curve","Name":"AddCircle3Pt","Arguments":["first","second","third"],"Signature":"AddCircle3Pt (first, second, third)","Description":"Adds a 3-point circle curve to the document\r\n        ","ArgumentDesc":"\r\nfirst, second, third = points on the circle\r\n        ","Returns":"\r\nid of the new curve object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddCircle3Pt in module rhinoscript.curve:\r\n\r\nAddCircle3Pt(first, second, third) |      Adds a 3-point circle curve to the document\r\n        Parameters:\r\n          first, second, third = points on the circle\r\n        Returns:\r\n          id of the new curve object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddCurve","Arguments":["points","degree=3"],"Signature":"AddCurve (points, degree=3)","Description":"Adds a control points curve object to the document\r\n        ","ArgumentDesc":"\r\npoints = a list of points\r\ndegree[opt] = degree of the curve\r\n        ","Returns":"\r\nid of the new curve object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddCurve in module rhinoscript.curve:\r\n\r\nAddCurve(points, degree=3) |      Adds a control points curve object to the document\r\n        Parameters:\r\n          points = a list of points\r\n          degree[opt] = degree of the curve\r\n        Returns:\r\n          id of the new curve object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddEllipse","Arguments":["plane","radiusX","radiusY"],"Signature":"AddEllipse (plane, radiusX, radiusY)","Description":"Adds an elliptical curve to the document\r\n        ","ArgumentDesc":"\r\nplane = the plane on which the ellipse will lie. The origin of\r\n        the plane will be the center of the ellipse\r\nradiusX, radiusY = radius in the X and Y axis directions\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddEllipse in module rhinoscript.curve:\r\n\r\nAddEllipse(plane, radiusX, radiusY) |      Adds an elliptical curve to the document\r\n        Parameters:\r\n          plane = the plane on which the ellipse will lie. The origin of\r\n                  the plane will be the center of the ellipse\r\n          radiusX, radiusY = radius in the X and Y axis directions\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddEllipse3Pt","Arguments":["center","second","third"],"Signature":"AddEllipse3Pt (center, second, third)","Description":"Adds a 3-point elliptical curve to the document\r\n        ","ArgumentDesc":"\r\ncenter = center point of the ellipse\r\nsecond = end point of the x axis\r\nthird  = end point of the y axis\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddEllipse3Pt in module rhinoscript.curve:\r\n\r\nAddEllipse3Pt(center, second, third) |      Adds a 3-point elliptical curve to the document\r\n        Parameters:\r\n          center = center point of the ellipse\r\n          second = end point of the x axis\r\n          third  = end point of the y axis\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddFilletCurve","Arguments":["curve0id","curve1id","radius=1.0","base_point0=None","base_point1=None"],"Signature":"AddFilletCurve (curve0id, curve1id, radius=1.0, base_point0=None, base_point1=None)","Description":"Adds a fillet curve between two curve objects\r\n        ","ArgumentDesc":"\r\ncurve0id = identifier of the first curve object\r\ncurve1id = identifier of the second curve object\r\nradius [opt] = fillet radius\r\nbase_point0 [opt] = base point of the first curve. If omitted,\r\n                    starting point of the curve is used\r\nbase_point1 [opt] = base point of the second curve. If omitted,\r\n                    starting point of the curve is used\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddFilletCurve in module rhinoscript.curve:\r\n\r\nAddFilletCurve(curve0id, curve1id, radius=1.0, base_point0=None, base_point1=None) |      Adds a fillet curve between two curve objects\r\n        Parameters:\r\n          curve0id = identifier of the first curve object\r\n          curve1id = identifier of the second curve object\r\n          radius [opt] = fillet radius\r\n          base_point0 [opt] = base point of the first curve. If omitted,\r\n                              starting point of the curve is used\r\n          base_point1 [opt] = base point of the second curve. If omitted,\r\n                              starting point of the curve is used\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddInterpCrvOnSrf","Arguments":["surface_id","points"],"Signature":"AddInterpCrvOnSrf (surface_id, points)","Description":"Adds an interpolated curve object that lies on a specified\r\n        surface.  Note, this function will not create periodic curves,\r\n        but it will create closed curves.\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of the surface to create the curve on\r\npoints = list of 3D points that lie on the specified surface.\r\n         The list must contain at least 2 points\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddInterpCrvOnSrf in module rhinoscript.curve:\r\n\r\nAddInterpCrvOnSrf(surface_id, points) |      Adds an interpolated curve object that lies on a specified\r\n        surface.  Note, this function will not create periodic curves,\r\n        but it will create closed curves.\r\n        Parameters:\r\n          surface_id = identifier of the surface to create the curve on\r\n          points = list of 3D points that lie on the specified surface.\r\n                   The list must contain at least 2 points\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddInterpCrvOnSrfUV","Arguments":["surface_id","points"],"Signature":"AddInterpCrvOnSrfUV (surface_id, points)","Description":"Adds an interpolated curve object based on surface parameters,\r\n        that lies on a specified surface. Note, this function will not\r\n        create periodic curves, but it will create closed curves.\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of the surface to create the curve on\r\npoints = list of 2D surface parameters. The list must contain\r\n         at least 2 sets of parameters\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddInterpCrvOnSrfUV in module rhinoscript.curve:\r\n\r\nAddInterpCrvOnSrfUV(surface_id, points) |      Adds an interpolated curve object based on surface parameters,\r\n        that lies on a specified surface. Note, this function will not\r\n        create periodic curves, but it will create closed curves.\r\n        Parameters:\r\n          surface_id = identifier of the surface to create the curve on\r\n          points = list of 2D surface parameters. The list must contain\r\n                   at least 2 sets of parameters\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddInterpCurve","Arguments":["points","degree=3","knotstyle=0","start_tangent=None","end_tangent=None"],"Signature":"AddInterpCurve (points, degree=3, knotstyle=0, start_tangent=None, end_tangent=None)","Description":"Adds an interpolated curve object to the document. Options exist to make\r\n        a periodic curve or to specify the tangent at the endpoints. The resulting\r\n        curve is a non-rational NURBS curve of the specified degree.\r\n        ","ArgumentDesc":"\r\npoints = list containing 3D points to interpolate. For periodic curves,\r\n    if the final point is a duplicate of the initial point, it is\r\n    ignored. The number of control points must be >= (degree+1).\r\ndegree[opt] = The degree of the curve (must be >=1).\r\n    Periodic curves must have a degree >= 2. For knotstyle = 1 or 2,\r\n    the degree must be 3. For knotstyle = 4 or 5, the degree must be odd\r\nknotstyle[opt]\r\n    0 Uniform knots.  Parameter spacing between consecutive knots is 1.0.\r\n    1 Chord length spacing.  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n    2 Sqrt (chord length).  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n    3 Periodic with uniform spacing.\r\n    4 Periodic with chord length spacing.  Requires an odd degree value.\r\n    5 Periodic with sqrt (chord length) spacing.  Requires an odd degree value.\r\nstart_tangent [opt] = 3d vector that specifies a tangency condition at the\r\n    beginning of the curve. If the curve is periodic, this argument must be omitted.\r\nend_tangent [opt] = 3d vector that specifies a tangency condition at the\r\n    end of the curve. If the curve is periodic, this argument must be omitted.\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddInterpCurve in module rhinoscript.curve:\r\n\r\nAddInterpCurve(points, degree=3, knotstyle=0, start_tangent=None, end_tangent=None) |      Adds an interpolated curve object to the document. Options exist to make\r\n        a periodic curve or to specify the tangent at the endpoints. The resulting\r\n        curve is a non-rational NURBS curve of the specified degree.\r\n        Parameters:\r\n          points = list containing 3D points to interpolate. For periodic curves,\r\n              if the final point is a duplicate of the initial point, it is\r\n              ignored. The number of control points must be >= (degree+1).\r\n          degree[opt] = The degree of the curve (must be >=1).\r\n              Periodic curves must have a degree >= 2. For knotstyle = 1 or 2,\r\n              the degree must be 3. For knotstyle = 4 or 5, the degree must be odd\r\n          knotstyle[opt]\r\n              0 Uniform knots.  Parameter spacing between consecutive knots is 1.0.\r\n              1 Chord length spacing.  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n              2 Sqrt (chord length).  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n              3 Periodic with uniform spacing.\r\n              4 Periodic with chord length spacing.  Requires an odd degree value.\r\n              5 Periodic with sqrt (chord length) spacing.  Requires an odd degree value.\r\n          start_tangent [opt] = 3d vector that specifies a tangency condition at the\r\n              beginning of the curve. If the curve is periodic, this argument must be omitted.\r\n          end_tangent [opt] = 3d vector that specifies a tangency condition at the\r\n              end of the curve. If the curve is periodic, this argument must be omitted.\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddLine","Arguments":["start","end"],"Signature":"AddLine (start, end)","Description":"Adds a line curve to the current model.\r\n        ","ArgumentDesc":"\r\nstart, end = end points of the line\r\n        ","Returns":"\r\nid of the new curve object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddLine in module rhinoscript.curve:\r\n\r\nAddLine(start, end) |      Adds a line curve to the current model.\r\n        Parameters:\r\n          start, end = end points of the line\r\n        Returns:\r\n          id of the new curve object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddNurbsCurve","Arguments":["points","knots","degree","weights=None"],"Signature":"AddNurbsCurve (points, knots, degree, weights=None)","Description":"Adds a NURBS curve object to the document\r\n        ","ArgumentDesc":"\r\npoints = list containing 3D control points\r\nknots = Knot values for the curve. The number of elements in knots must\r\n    equal the number of elements in points plus degree minus 1\r\ndegree = degree of the curve. must be greater than of equal to 1\r\nweights[opt] = weight values for the curve. Number of elements should\r\n    equal the number of elements in points. Values must be greater than 0\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddNurbsCurve in module rhinoscript.curve:\r\n\r\nAddNurbsCurve(points, knots, degree, weights=None) |      Adds a NURBS curve object to the document\r\n        Parameters:\r\n          points = list containing 3D control points\r\n          knots = Knot values for the curve. The number of elements in knots must\r\n              equal the number of elements in points plus degree minus 1\r\n          degree = degree of the curve. must be greater than of equal to 1\r\n          weights[opt] = weight values for the curve. Number of elements should\r\n              equal the number of elements in points. Values must be greater than 0","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddPolyline","Arguments":["points","replace_id=None"],"Signature":"AddPolyline (points, replace_id=None)","Description":"Adds a polyline curve to the current model\r\n        ","ArgumentDesc":"\r\npoints = list of 3D points. Duplicate, consecutive points will be\r\n         removed. The list must contain at least two points. If the\r\n         list contains less than four points, then the first point and\r\n         last point must be different.\r\nreplace_id[opt] = If set to the id of an existing object, the object\r\n         will be replaced by this polyline\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPolyline in module rhinoscript.curve:\r\n\r\nAddPolyline(points, replace_id=None) |      Adds a polyline curve to the current model\r\n        Parameters:\r\n          points = list of 3D points. Duplicate, consecutive points will be\r\n                   removed. The list must contain at least two points. If the\r\n                   list contains less than four points, then the first point and\r\n                   last point must be different.\r\n          replace_id[opt] = If set to the id of an existing object, the object\r\n                   will be replaced by this polyline\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddRectangle","Arguments":["plane","width","height"],"Signature":"AddRectangle (plane, width, height)","Description":"Add a rectangular curve to the document\r\n        Paramters:\r\n          plane = plane on which the rectangle will lie\r\n          width, height = width and height of rectangle as measured along the plane's\r\n            x and y axes\r\n        Returns:\r\n          id of new rectangle\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddRectangle in module rhinoscript.curve:\r\n\r\nAddRectangle(plane, width, height) |      Add a rectangular curve to the document\r\n        Paramters:\r\n          plane = plane on which the rectangle will lie\r\n          width, height = width and height of rectangle as measured along the plane's\r\n            x and y axes\r\n        Returns:\r\n          id of new rectangle","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddSpiral","Arguments":["point0","point1","pitch","turns","radius0","radius1=None"],"Signature":"AddSpiral (point0, point1, pitch, turns, radius0, radius1=None)","Description":"Adds a spiral or helical curve to the document\r\n        ","ArgumentDesc":"\r\npoint0 = helix axis start point or center of spiral\r\npoint1 = helix axis end point or point normal on spiral plane\r\npitch = distance between turns. If 0, then a spiral. If > 0 then the\r\n        distance between helix \"threads\"\r\nturns = number of turns\r\nradius0, radius1 = starting and ending radius\r\n        ","Returns":"\r\nid of new curve on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSpiral in module rhinoscript.curve:\r\n\r\nAddSpiral(point0, point1, pitch, turns, radius0, radius1=None) |      Adds a spiral or helical curve to the document\r\n        Parameters:\r\n          point0 = helix axis start point or center of spiral\r\n          point1 = helix axis end point or point normal on spiral plane\r\n          pitch = distance between turns. If 0, then a spiral. If > 0 then the\r\n                  distance between helix \"threads\"\r\n          turns = number of turns\r\n          radius0, radius1 = starting and ending radius\r\n        Returns:\r\n          id of new curve on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"AddSubCrv","Arguments":["curve_id","param0","param1"],"Signature":"AddSubCrv (curve_id, param0, param1)","Description":"Add a curve object based on a portion, or interval of an existing curve\r\n        object. Similar in operation to Rhino's SubCrv command\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a closed planar curve object\r\nparam0, param1 = first and second parameters on the source curve\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSubCrv in module rhinoscript.curve:\r\n\r\nAddSubCrv(curve_id, param0, param1) |      Add a curve object based on a portion, or interval of an existing curve\r\n        object. Similar in operation to Rhino's SubCrv command\r\n        Parameters:\r\n          curve_id = identifier of a closed planar curve object\r\n          param0, param1 = first and second parameters on the source curve\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ArcAngle","Arguments":["curve_id","segment_index=-1"],"Signature":"ArcAngle (curve_id, segment_index=-1)","Description":"Returns the angle of an arc curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nsegment_index [opt] = identifies the curve segment if \r\ncurve_id identifies a polycurve\r\n        ","Returns":"\r\nThe angle in degrees if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ArcAngle in module rhinoscript.curve:\r\n\r\nArcAngle(curve_id, segment_index=-1) |      Returns the angle of an arc curve object.\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          segment_index [opt] = identifies the curve segment if \r\n          curve_id identifies a polycurve\r\n        Returns:\r\n          The angle in degrees if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ArcCenterPoint","Arguments":["curve_id","segment_index=-1"],"Signature":"ArcCenterPoint (curve_id, segment_index=-1)","Description":"Returns the center point of an arc curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nsegment_index [opt] = identifies the curve segment if\r\ncurve_id identifies a polycurve\r\n        ","Returns":"\r\nThe 3D center point of the arc if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ArcCenterPoint in module rhinoscript.curve:\r\n\r\nArcCenterPoint(curve_id, segment_index=-1) |      Returns the center point of an arc curve object\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          segment_index [opt] = identifies the curve segment if\r\n          curve_id identifies a polycurve\r\n        Returns:\r\n          The 3D center point of the arc if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ArcMidPoint","Arguments":["curve_id","segment_index=-1"],"Signature":"ArcMidPoint (curve_id, segment_index=-1)","Description":"Returns the mid point of an arc curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nsegment_index [opt] = identifies the curve segment if\r\ncurve_id identifies a polycurve\r\n        ","Returns":"\r\nThe 3D mid point of the arc if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ArcMidPoint in module rhinoscript.curve:\r\n\r\nArcMidPoint(curve_id, segment_index=-1) |      Returns the mid point of an arc curve object\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          segment_index [opt] = identifies the curve segment if\r\n          curve_id identifies a polycurve\r\n        Returns:\r\n          The 3D mid point of the arc if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ArcRadius","Arguments":["curve_id","segment_index=-1"],"Signature":"ArcRadius (curve_id, segment_index=-1)","Description":"Returns the radius of an arc curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nsegment_index [opt] = identifies the curve segment if \r\ncurve_id identifies a polycurve\r\n        ","Returns":"\r\nThe radius of the arc if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ArcRadius in module rhinoscript.curve:\r\n\r\nArcRadius(curve_id, segment_index=-1) |      Returns the radius of an arc curve object\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          segment_index [opt] = identifies the curve segment if \r\n          curve_id identifies a polycurve\r\n        Returns:\r\n          The radius of the arc if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ChangeCurveDegree","Arguments":["object_id","degree"],"Signature":"ChangeCurveDegree (object_id, degree)","Description":"Changes the degree of a curve object. For more information see the Rhino help file for the ChangeDegree command.\r\n      ","ArgumentDesc":"\r\nobject_id = the object's identifier.\r\ndegree =  the new degree.\r\n      ","Returns":"\r\nBoolean\r\n True of False indicating success or failure.\r\n None on failure\r\n      \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ChangeCurveDegree in module rhinoscript.curve:\r\n\r\nChangeCurveDegree(object_id, degree) |      Changes the degree of a curve object. For more information see the Rhino help file for the ChangeDegree command.\r\n      Parameters:\r\n        object_id = the object's identifier.\r\n        degree =  the new degree.\r\n      Returns:\r\n      Boolean\r\n       True of False indicating success or failure.\r\n       None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CircleCenterPoint","Arguments":["curve_id","segment_index=-1","return_plane=False"],"Signature":"CircleCenterPoint (curve_id, segment_index=-1, return_plane=False)","Description":"Returns the center point of a circle curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nsegment_index [opt] = identifies the curve segment if\r\nreturn_plane [opt] = if True, the circle's plane is returned\r\ncurve_id identifies a polycurve\r\n        ","Returns":"\r\nThe 3D center point of the circle if successful.\r\nThe plane of the circle if return_plane is True\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CircleCenterPoint in module rhinoscript.curve:\r\n\r\nCircleCenterPoint(curve_id, segment_index=-1, return_plane=False) |      Returns the center point of a circle curve object\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          segment_index [opt] = identifies the curve segment if\r\n          return_plane [opt] = if True, the circle's plane is returned\r\n          curve_id identifies a polycurve\r\n        Returns:\r\n          The 3D center point of the circle if successful.\r\n          The plane of the circle if return_plane is True","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CircleCircumference","Arguments":["curve_id","segment_index=-1"],"Signature":"CircleCircumference (curve_id, segment_index=-1)","Description":"Returns the circumference of a circle curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nsegment_index [opt] = identifies the curve segment if\r\ncurve_id identifies a polycurve\r\n        ","Returns":"\r\nThe circumference of the circle if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CircleCircumference in module rhinoscript.curve:\r\n\r\nCircleCircumference(curve_id, segment_index=-1) |      Returns the circumference of a circle curve object\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          segment_index [opt] = identifies the curve segment if\r\n          curve_id identifies a polycurve\r\n        Returns:\r\n          The circumference of the circle if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CircleRadius","Arguments":["curve_id","segment_index=-1"],"Signature":"CircleRadius (curve_id, segment_index=-1)","Description":"Returns the radius of a circle curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nsegment_index [opt] = identifies the curve segment if\r\ncurve_id identifies a polycurve\r\n        ","Returns":"\r\nThe radius of the circle if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CircleRadius in module rhinoscript.curve:\r\n\r\nCircleRadius(curve_id, segment_index=-1) |      Returns the radius of a circle curve object\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          segment_index [opt] = identifies the curve segment if\r\n          curve_id identifies a polycurve\r\n        Returns:\r\n          The radius of the circle if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CloseCurve","Arguments":["curve_id","tolerance=-1.0"],"Signature":"CloseCurve (curve_id, tolerance=-1.0)","Description":"Closes an open curve object by making adjustments to the end points so\r\n        they meet at a point\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\ntolerance[opt] = maximum allowable distance between start and end\r\n    point. If omitted, the current absolute tolerance is used\r\n        ","Returns":"\r\nid of the new curve object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CloseCurve in module rhinoscript.curve:\r\n\r\nCloseCurve(curve_id, tolerance=-1.0) |      Closes an open curve object by making adjustments to the end points so\r\n        they meet at a point\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          tolerance[opt] = maximum allowable distance between start and end\r\n              point. If omitted, the current absolute tolerance is used\r\n        Returns:\r\n          id of the new curve object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ConvertCurveToPolyline","Arguments":["curve_id","angle_tolerance=5.0","tolerance=0.01","delete_input=False","min_edge_length=0","max_edge_length=0"],"Signature":"ConvertCurveToPolyline (curve_id, angle_tolerance=5.0, tolerance=0.01, delete_input=False, min_edge_length=0, max_edge_length=0)","Description":"Convert curve to a polyline curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nangle_tolerance [opt] = The maximum angle between curve tangents at line\r\n  endpoints. If omitted, the angle tolerance is set to 5.0.\r\ntolerance[opt] = The distance tolerance at segment midpoints. If omitted,\r\n  the tolerance is set to 0.01.\r\ndelete_input[opt] = Delete the curve object specified by curve_id. If\r\n  omitted, curve_id will not be deleted.\r\nmin_edge_length[opt] = Minimum segment length\r\nmax_edge_length[opt] = Maximum segment length\r\n        ","Returns":"\r\nThe new curve if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ConvertCurveToPolyline in module rhinoscript.curve:\r\n\r\nConvertCurveToPolyline(curve_id, angle_tolerance=5.0, tolerance=0.01, delete_input=False, min_edge_length=0, max_edge_length=0) |      Convert curve to a polyline curve\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          angle_tolerance [opt] = The maximum angle between curve tangents at line\r\n            endpoints. If omitted, the angle tolerance is set to 5.0.\r\n          tolerance[opt] = The distance tolerance at segment midpoints. If omitted,\r\n            the tolerance is set to 0.01.\r\n          delete_input[opt] = Delete the curve object specified by curve_id. If\r\n            omitted, curve_id will not be deleted.\r\n          min_edge_length[opt] = Minimum segment length\r\n          max_edge_length[opt] = Maximum segment length\r\n        Returns:\r\n          The new curve if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveArcLengthPoint","Arguments":["curve_id","length","from_start=True"],"Signature":"CurveArcLengthPoint (curve_id, length, from_start=True)","Description":"Returns the point on the curve that is a specified arc length\r\n        from the start of the curve.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nlength = The arc length from the start of the curve to evaluate.\r\nfrom_start[opt] = If not specified or True, then the arc length point is\r\n    calculated from the start of the curve. If False, the arc length\r\n    point is calculated from the end of the curve.\r\n        ","Returns":"\r\nPoint3d if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveArcLengthPoint in module rhinoscript.curve:\r\n\r\nCurveArcLengthPoint(curve_id, length, from_start=True) |      Returns the point on the curve that is a specified arc length\r\n        from the start of the curve.\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          length = The arc length from the start of the curve to evaluate.\r\n          from_start[opt] = If not specified or True, then the arc length point is\r\n              calculated from the start of the curve. If False, the arc length\r\n              point is calculated from the end of the curve.\r\n        Returns:\r\n          Point3d if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveArea","Arguments":["curve_id"],"Signature":"CurveArea (curve_id)","Description":"Returns area of closed planar curves. The results are based on the\r\n        current drawing units.\r\n        ","ArgumentDesc":"\r\ncurve_id = The identifier of a closed, planar curve object.\r\n        ","Returns":"\r\nList of area information. The list will contain the following information:\r\n  Element  Description\r\n  0        The area. If more than one curve was specified, the\r\n           value will be the cumulative area.\r\n  1        The absolute (+/-) error bound for the area.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveArea in module rhinoscript.curve:\r\n\r\nCurveArea(curve_id) |      Returns area of closed planar curves. The results are based on the\r\n        current drawing units.\r\n        Parameters:\r\n          curve_id = The identifier of a closed, planar curve object.\r\n        Returns:\r\n          List of area information. The list will contain the following information:\r\n            Element  Description\r\n            0        The area. If more than one curve was specified, the\r\n                     value will be the cumulative area.\r\n            1        The absolute (+/-) error bound for the area.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveAreaCentroid","Arguments":["curve_id"],"Signature":"CurveAreaCentroid (curve_id)","Description":"Returns area centroid of closed, planar curves. The results are based\r\n        on the current drawing units.\r\n        ","ArgumentDesc":"\r\ncurve_id = The identifier of a closed, planar curve object.\r\n        ","Returns":"\r\nTuple of area centroid information containing the following information:\r\n  Element  Description\r\n  0        The 3d centroid point. If more than one curve was specified,\r\n           the value will be the cumulative area.\r\n  1        A 3d vector with the absolute (+/-) error bound for the area\r\n           centroid.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveAreaCentroid in module rhinoscript.curve:\r\n\r\nCurveAreaCentroid(curve_id) |      Returns area centroid of closed, planar curves. The results are based\r\n        on the current drawing units.\r\n        Parameters:\r\n          curve_id = The identifier of a closed, planar curve object.\r\n        Returns:\r\n          Tuple of area centroid information containing the following information:\r\n            Element  Description\r\n            0        The 3d centroid point. If more than one curve was specified,\r\n                     the value will be the cumulative area.\r\n            1        A 3d vector with the absolute (+/-) error bound for the area\r\n                     centroid.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveArrows","Arguments":["curve_id","arrow_style=None"],"Signature":"CurveArrows (curve_id, arrow_style=None)","Description":"Enables or disables a curve object's annotation arrows\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve\r\narrow_style[opt] = the style of annotation arrow to be displayed\r\n  0 = no arrows\r\n  1 = display arrow at start of curve\r\n  2 = display arrow at end of curve\r\n  3 = display arrow at both start and end of curve\r\n          ","Returns":"\r\nif arrow_style is not specified, the current annotation arrow style\r\nif arrow_style is specified, the previos arrow style\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveArrows in module rhinoscript.curve:\r\n\r\nCurveArrows(curve_id, arrow_style=None) |      Enables or disables a curve object's annotation arrows\r\n        Parameters:\r\n          curve_id = identifier of a curve\r\n          arrow_style[opt] = the style of annotation arrow to be displayed\r\n            0 = no arrows\r\n            1 = display arrow at start of curve\r\n            2 = display arrow at end of curve\r\n            3 = display arrow at both start and end of curve\r\n          Returns:\r\n            if arrow_style is not specified, the current annotation arrow style\r\n            if arrow_style is specified, the previos arrow style","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveBooleanDifference","Arguments":["curve_id_0","curve_id_1"],"Signature":"CurveBooleanDifference (curve_id_0, curve_id_1)","Description":"Calculates the difference between two closed, planar curves and\r\n        adds the results to the document. Note, curves must be coplanar.\r\n        ","ArgumentDesc":"\r\ncurve_id_0 = identifier of the first curve object.\r\ncurve_id_1 = identifier of the second curve object.\r\n        ","Returns":"\r\nThe identifiers of the new objects if successful, None on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveBooleanDifference in module rhinoscript.curve:\r\n\r\nCurveBooleanDifference(curve_id_0, curve_id_1) |      Calculates the difference between two closed, planar curves and\r\n        adds the results to the document. Note, curves must be coplanar.\r\n        Parameters:\r\n          curve_id_0 = identifier of the first curve object.\r\n          curve_id_1 = identifier of the second curve object.\r\n        Returns:\r\n          The identifiers of the new objects if successful, None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveBooleanIntersection","Arguments":["curve_id_0","curve_id_1"],"Signature":"CurveBooleanIntersection (curve_id_0, curve_id_1)","Description":"Calculates the intersection of two closed, planar curves and adds\r\n        the results to the document. Note, curves must be coplanar.\r\n        ","ArgumentDesc":"\r\ncurve_id_0 = identifier of the first curve object.\r\ncurve_id_1 = identifier of the second curve object.\r\n        ","Returns":"\r\nThe identifiers of the new objects.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveBooleanIntersection in module rhinoscript.curve:\r\n\r\nCurveBooleanIntersection(curve_id_0, curve_id_1) |      Calculates the intersection of two closed, planar curves and adds\r\n        the results to the document. Note, curves must be coplanar.\r\n        Parameters:\r\n          curve_id_0 = identifier of the first curve object.\r\n          curve_id_1 = identifier of the second curve object.\r\n        Returns:\r\n          The identifiers of the new objects.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveBooleanUnion","Arguments":["curve_id"],"Signature":"CurveBooleanUnion (curve_id)","Description":"Calculate the union of two or more closed, planar curves and\r\n        add the results to the document. Note, curves must be coplanar.\r\n        ","ArgumentDesc":"\r\ncurve_id = list of two or more close planar curves identifiers\r\n        ","Returns":"\r\nThe identifiers of the new objects.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveBooleanUnion in module rhinoscript.curve:\r\n\r\nCurveBooleanUnion(curve_id) |      Calculate the union of two or more closed, planar curves and\r\n        add the results to the document. Note, curves must be coplanar.\r\n        Parameters:\r\n          curve_id = list of two or more close planar curves identifiers\r\n        Returns:\r\n          The identifiers of the new objects.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveBrepIntersect","Arguments":["curve_id","brep_id","tolerance=None"],"Signature":"CurveBrepIntersect (curve_id, brep_id, tolerance=None)","Description":"Intersects a curve object with a brep object. Note, unlike the\r\n        CurveSurfaceIntersection function, this function works on trimmed surfaces.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nbrep_id = identifier of a brep object\r\ntolerance [opt] = distance tolerance at segment midpoints.\r\n                  If omitted, the current absolute tolerance is used.\r\n        ","Returns":"\r\nList of identifiers for the newly created intersection curve and\r\npoint objects if successful. None on error.            \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveBrepIntersect in module rhinoscript.curve:\r\n\r\nCurveBrepIntersect(curve_id, brep_id, tolerance=None) |      Intersects a curve object with a brep object. Note, unlike the\r\n        CurveSurfaceIntersection function, this function works on trimmed surfaces.\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          brep_id = identifier of a brep object\r\n          tolerance [opt] = distance tolerance at segment midpoints.\r\n                            If omitted, the current absolute tolerance is used.\r\n        Returns:\r\n          List of identifiers for the newly created intersection curve and\r\n          point objects if successful. None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveClosestObject","Arguments":["curve_id","object_ids"],"Signature":"CurveClosestObject (curve_id, object_ids)","Description":"Returns the 3D point locations on two objects where they are closest to\r\n        each other. Note, this function provides similar functionality to that of\r\n        Rhino's ClosestPt command.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object to test\r\nobject_ids = list of identifiers of point cloud, curve, surface, or\r\n  polysurface to test against\r\n        ","Returns":"\r\nTuple containing the results of the closest point calculation.\r\nThe elements are as follows:\r\n  0    The identifier of the closest object.\r\n  1    The 3-D point that is closest to the closest object. \r\n  2    The 3-D point that is closest to the test curve.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveClosestObject in module rhinoscript.curve:\r\n\r\nCurveClosestObject(curve_id, object_ids) |      Returns the 3D point locations on two objects where they are closest to\r\n        each other. Note, this function provides similar functionality to that of\r\n        Rhino's ClosestPt command.\r\n        Parameters:\r\n          curve_id = identifier of the curve object to test\r\n          object_ids = list of identifiers of point cloud, curve, surface, or\r\n            polysurface to test against\r\n        Returns:\r\n          Tuple containing the results of the closest point calculation.\r\n          The elements are as follows:\r\n            0    The identifier of the closest object.\r\n            1    The 3-D point that is closest to the closest object. \r\n            2    The 3-D point that is closest to the test curve.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveClosestPoint","Arguments":["curve_id","test_point","segment_index=-1"],"Signature":"CurveClosestPoint (curve_id, test_point, segment_index=-1)","Description":"Returns parameter of the point on a curve that is closest to a test point.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\npoint = sampling point\r\nsegment_index [opt] = curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe parameter of the closest point on the curve\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveClosestPoint in module rhinoscript.curve:\r\n\r\nCurveClosestPoint(curve_id, test_point, segment_index=-1) |      Returns parameter of the point on a curve that is closest to a test point.\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          point = sampling point\r\n          segment_index [opt] = curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The parameter of the closest point on the curve","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveContourPoints","Arguments":["curve_id","start_point","end_point","interval=None"],"Signature":"CurveContourPoints (curve_id, start_point, end_point, interval=None)","Description":"Returns the 3D point locations calculated by contouring a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object.\r\nstart_point = 3D starting point of a center line.\r\nend_point = 3D ending point of a center line.\r\ninterval [opt] = The distance between contour curves. If omitted, \r\nthe interval will be equal to the diagonal distance of the object's\r\nbounding box divided by 50.\r\n        ","Returns":"\r\nA list of 3D points, one for each contour\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveContourPoints in module rhinoscript.curve:\r\n\r\nCurveContourPoints(curve_id, start_point, end_point, interval=None) |      Returns the 3D point locations calculated by contouring a curve object.\r\n        Parameters:\r\n          curve_id = identifier of a curve object.\r\n          start_point = 3D starting point of a center line.\r\n          end_point = 3D ending point of a center line.\r\n          interval [opt] = The distance between contour curves. If omitted, \r\n          the interval will be equal to the diagonal distance of the object's\r\n          bounding box divided by 50.\r\n        Returns:\r\n          A list of 3D points, one for each contour","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveCurvature","Arguments":["curve_id","parameter"],"Signature":"CurveCurvature (curve_id, parameter)","Description":"Returns the curvature of a curve at a parameter. See the Rhino help for\r\n        details on curve curvature\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve\r\nparameter = parameter to evaluate\r\n        ","Returns":"\r\nTuple of curvature information on success\r\n  element 0 = point at specified parameter\r\n  element 1 = tangent vector\r\n  element 2 = center of radius of curvature\r\n  element 3 = radius of curvature\r\n  element 4 = curvature vector\r\nNone on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveCurvature in module rhinoscript.curve:\r\n\r\nCurveCurvature(curve_id, parameter) |      Returns the curvature of a curve at a parameter. See the Rhino help for\r\n        details on curve curvature\r\n        Parameters:\r\n          curve_id = identifier of the curve\r\n          parameter = parameter to evaluate\r\n        Returns:\r\n          Tuple of curvature information on success\r\n            element 0 = point at specified parameter\r\n            element 1 = tangent vector\r\n            element 2 = center of radius of curvature\r\n            element 3 = radius of curvature\r\n            element 4 = curvature vector\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveCurveIntersection","Arguments":["curveA","curveB=None","tolerance=-1"],"Signature":"CurveCurveIntersection (curveA, curveB=None, tolerance=-1)","Description":"Calculates intersection of two curve objects.\r\n        ","ArgumentDesc":"\r\ncurveA = identifier of the first curve object.\r\ncurveB = identifier of the second curve object. If omitted, then a\r\n         self-intersection test will be performed on curveA.\r\ntolerance [opt] = absolute tolerance in drawing units. If omitted,\r\n                  the document's current absolute tolerance is used.\r\n        ","Returns":"\r\nList of tuples of intersection information if successful.\r\nThe list will contain one or more of the following elements:\r\n  Element Type     Description\r\n  [n][0]  Number   The intersection event type, either Point (1) or Overlap (2).\r\n  [n][1]  Point3d  If the event type is Point (1), then the intersection point \r\n                   on the first curve. If the event type is Overlap (2), then\r\n                   intersection start point on the first curve.\r\n  [n][2]  Point3d  If the event type is Point (1), then the intersection point\r\n                   on the first curve. If the event type is Overlap (2), then\r\n                   intersection end point on the first curve.\r\n  [n][3]  Point3d  If the event type is Point (1), then the intersection point \r\n                   on the second curve. If the event type is Overlap (2), then\r\n                   intersection start point on the second curve.\r\n  [n][4]  Point3d  If the event type is Point (1), then the intersection point\r\n                   on the second curve. If the event type is Overlap (2), then\r\n                   intersection end point on the second curve.\r\n  [n][5]  Number   If the event type is Point (1), then the first curve parameter.\r\n                   If the event type is Overlap (2), then the start value of the\r\n                   first curve parameter range.\r\n  [n][6]  Number   If the event type is Point (1), then the first curve parameter.\r\n                   If the event type is Overlap (2), then the end value of the\r\n                   first curve parameter range.\r\n  [n][7]  Number   If the event type is Point (1), then the second curve parameter.\r\n                   If the event type is Overlap (2), then the start value of the\r\n                   second curve parameter range.\r\n  [n][8]  Number   If the event type is Point (1), then the second curve parameter.\r\n                   If the event type is Overlap (2), then the end value of the \r\n                   second curve parameter range.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveCurveIntersection in module rhinoscript.curve:\r\n\r\nCurveCurveIntersection(curveA, curveB=None, tolerance=-1) |      Calculates intersection of two curve objects.\r\n        Parameters:\r\n          curveA = identifier of the first curve object.\r\n          curveB = identifier of the second curve object. If omitted, then a\r\n                   self-intersection test will be performed on curveA.\r\n          tolerance [opt] = absolute tolerance in drawing units. If omitted,\r\n                            the document's current absolute tolerance is used.\r\n        Returns:\r\n          List of tuples of intersection information if successful.\r\n          The list will contain one or more of the following elements:\r\n            Element Type     Description\r\n            [n][0]  Number   The intersection event type, either Point (1) or Overlap (2).\r\n            [n][1]  Point3d  If the event type is Point (1), then the intersection point \r\n                             on the first curve. If the event type is Overlap (2), then\r\n                             intersection start point on the first curve.\r\n            [n][2]  Point3d  If the event type is Point (1), then the intersection point\r\n                             on the first curve. If the event type is Overlap (2), then\r\n                             intersection end point on the first curve.\r\n            [n][3]  Point3d  If the event type is Point (1), then the intersection point \r\n                             on the second curve. If the event type is Overlap (2), then\r\n                             intersection start point on the second curve.\r\n            [n][4]  Point3d  If the event type is Point (1), then the intersection point\r\n                             on the second curve. If the event type is Overlap (2), then\r\n                             intersection end point on the second curve.\r\n            [n][5]  Number   If the event type is Point (1), then the first curve parameter.\r\n                             If the event type is Overlap (2), then the start value of the\r\n                             first curve parameter range.\r\n            [n][6]  Number   If the event type is Point (1), then the first curve parameter.\r\n                             If the event type is Overlap (2), then the end value of the\r\n                             first curve parameter range.\r\n            [n][7]  Number   If the event type is Point (1), then the second curve parameter.\r\n                             If the event type is Overlap (2), then the start value of the\r\n                             second curve parameter range.\r\n            [n][8]  Number   If the event type is Point (1), then the second curve parameter.\r\n                             If the event type is Overlap (2), then the end value of the \r\n                             second curve parameter range.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveDegree","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveDegree (curve_id, segment_index=-1)","Description":"Returns the degree of a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object.\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        ","Returns":"\r\nThe degree of the curve if successful. None on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveDegree in module rhinoscript.curve:\r\n\r\nCurveDegree(curve_id, segment_index=-1) |      Returns the degree of a curve object.\r\n        Parameters:\r\n          curve_id = identifier of a curve object.\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        Returns:\r\n          The degree of the curve if successful. None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveDeviation","Arguments":["curve_a","curve_b"],"Signature":"CurveDeviation (curve_a, curve_b)","Description":"Returns the minimum and maximum deviation between two curve objects\r\n        ","ArgumentDesc":"\r\ncurve_a, curve_b = identifiers of two curves\r\n        ","Returns":"\r\ntuple of deviation information on success\r\n  element 0 = curve_a parameter at maximum overlap distance point\r\n  element 1 = curve_b parameter at maximum overlap distance point\r\n  element 2 = maximum overlap distance\r\n  element 3 = curve_a parameter at minimum overlap distance point\r\n  element 4 = curve_b parameter at minimum overlap distance point\r\n  element 5 = minimum distance between curves\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveDeviation in module rhinoscript.curve:\r\n\r\nCurveDeviation(curve_a, curve_b) |      Returns the minimum and maximum deviation between two curve objects\r\n        Parameters:\r\n          curve_a, curve_b = identifiers of two curves\r\n        Returns:\r\n          tuple of deviation information on success\r\n            element 0 = curve_a parameter at maximum overlap distance point\r\n            element 1 = curve_b parameter at maximum overlap distance point\r\n            element 2 = maximum overlap distance\r\n            element 3 = curve_a parameter at minimum overlap distance point\r\n            element 4 = curve_b parameter at minimum overlap distance point\r\n            element 5 = minimum distance between curves\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveDim","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveDim (curve_id, segment_index=-1)","Description":"Returns the dimension of a curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object.\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        ","Returns":"\r\nThe dimension of the curve if successful. None on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveDim in module rhinoscript.curve:\r\n\r\nCurveDim(curve_id, segment_index=-1) |      Returns the dimension of a curve object\r\n        Parameters:\r\n          curve_id = identifier of a curve object.\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        Returns:\r\n          The dimension of the curve if successful. None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveDirectionsMatch","Arguments":["curve_id_0","curve_id_1"],"Signature":"CurveDirectionsMatch (curve_id_0, curve_id_1)","Description":"Tests if two curve objects are generally in the same direction or if they\r\n        would be more in the same direction if one of them were flipped. When testing\r\n        curve directions, both curves must be either open or closed - you cannot test\r\n        one open curve and one closed curve.\r\n        ","ArgumentDesc":"\r\ncurve_id_0 = identifier of first curve object\r\ncurve_id_1 = identifier of second curve object\r\n        ","Returns":"\r\nTrue if the curve directions match, otherwise False. \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveDirectionsMatch in module rhinoscript.curve:\r\n\r\nCurveDirectionsMatch(curve_id_0, curve_id_1) |      Tests if two curve objects are generally in the same direction or if they\r\n        would be more in the same direction if one of them were flipped. When testing\r\n        curve directions, both curves must be either open or closed - you cannot test\r\n        one open curve and one closed curve.\r\n        Parameters:\r\n          curve_id_0 = identifier of first curve object\r\n          curve_id_1 = identifier of second curve object\r\n        Returns:\r\n          True if the curve directions match, otherwise False.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveDiscontinuity","Arguments":["curve_id","style"],"Signature":"CurveDiscontinuity (curve_id, style)","Description":"Search for a derivatitive, tangent, or curvature discontinuity in\r\n        a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of curve object\r\nstyle = The type of continuity to test for. The types of\r\n    continuity are as follows:\r\n    Value    Description\r\n    1        C0 - Continuous function\r\n    2        C1 - Continuous first derivative\r\n    3        C2 - Continuous first and second derivative\r\n    4        G1 - Continuous unit tangent\r\n    5        G2 - Continuous unit tangent and curvature\r\n        ","Returns":"\r\nList 3D points where the curve is discontinuous\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveDiscontinuity in module rhinoscript.curve:\r\n\r\nCurveDiscontinuity(curve_id, style) |      Search for a derivatitive, tangent, or curvature discontinuity in\r\n        a curve object.\r\n        Parameters:\r\n          curve_id = identifier of curve object\r\n          style = The type of continuity to test for. The types of\r\n              continuity are as follows:\r\n              Value    Description\r\n              1        C0 - Continuous function\r\n              2        C1 - Continuous first derivative\r\n              3        C2 - Continuous first and second derivative\r\n              4        G1 - Continuous unit tangent\r\n              5        G2 - Continuous unit tangent and curvature\r\n        Returns:\r\n          List 3D points where the curve is discontinuous","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveDomain","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveDomain (curve_id, segment_index=-1)","Description":"Returns the domain of a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index[opt] = the curve segment if curve_id identifies a polycurve.\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveDomain in module rhinoscript.curve:\r\n\r\nCurveDomain(curve_id, segment_index=-1) |      Returns the domain of a curve object.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index[opt] = the curve segment if curve_id identifies a polycurve.","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveEditPoints","Arguments":["curve_id","return_parameters=False","segment_index=-1"],"Signature":"CurveEditPoints (curve_id, return_parameters=False, segment_index=-1)","Description":"Returns the edit, or Greville, points of a curve object. \r\n        For each curve control point, there is a corresponding edit point.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nreturn_parameters[opt] = if True, return as a list of curve parameters.\r\n  If False, return as a list of 3d points\r\nsegment_index[opt] = the curve segment is curve_id identifies a polycurve\r\n        ","Returns":"\r\ncurve parameters of 3d points on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveEditPoints in module rhinoscript.curve:\r\n\r\nCurveEditPoints(curve_id, return_parameters=False, segment_index=-1) |      Returns the edit, or Greville, points of a curve object. \r\n        For each curve control point, there is a corresponding edit point.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          return_parameters[opt] = if True, return as a list of curve parameters.\r\n            If False, return as a list of 3d points\r\n          segment_index[opt] = the curve segment is curve_id identifies a polycurve\r\n        Returns:\r\n          curve parameters of 3d points on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveEndPoint","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveEndPoint (curve_id, segment_index=-1)","Description":"Returns the end point of a curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe 3-D end point of the curve if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveEndPoint in module rhinoscript.curve:\r\n\r\nCurveEndPoint(curve_id, segment_index=-1) |      Returns the end point of a curve object\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The 3-D end point of the curve if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveFilletPoints","Arguments":["curve_id_0","curve_id_1","radius=1.0","base_point_0=None","base_point_1=None","return_points=True"],"Signature":"CurveFilletPoints (curve_id_0, curve_id_1, radius=1.0, base_point_0=None, base_point_1=None, return_points=True)","Description":"Find points at which to cut a pair of curves so that a fillet of a\r\n        specified radius fits. A fillet point is a pair of points (point0, point1)\r\n        such that there is a circle of radius tangent to curve curve0 at point0 and\r\n        tangent to curve curve1 at point1. Of all possible fillet points, this\r\n        function returns the one which is the closest to the base point base_point_0,\r\n        base_point_1. Distance from the base point is measured by the sum of arc\r\n        lengths along the two curves. \r\n        ","ArgumentDesc":"\r\ncurve_id_0 = identifier of the first curve object.\r\ncurve_id_1 = identifier of the second curve object.\r\nradius [opt] = The fillet radius. If omitted, a radius\r\n               of 1.0 is specified.\r\nbase_point_0 [opt] = The base point on the first curve.\r\n               If omitted, the starting point of the curve is used.\r\nbase_point_1 [opt] = The base point on the second curve. If omitted,\r\n               the starting point of the curve is used.\r\nreturn_points [opt] = If True (Default), then fillet points are\r\n               returned. Otherwise, a fillet curve is created and\r\n               it's identifier is returned.\r\n        ","Returns":"\r\nIf return_points is True, then a list of point and vector values\r\nif successful. The list elements are as follows:\r\n          \r\n0    A point on the first curve at which to cut (arrPoint0).\r\n1    A point on the second curve at which to cut (arrPoint1).\r\n2    The fillet plane's origin (3-D point). This point is also\r\n     the center point of the fillet\r\n3    The fillet plane's X axis (3-D vector).\r\n4    The fillet plane's Y axis (3-D vector).\r\n5    The fillet plane's Z axis (3-D vector).\r\n          \r\nIf return_points is False, then the identifier of the fillet curve\r\nif successful.\r\nNone if not successful, or on error.                  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveFilletPoints in module rhinoscript.curve:\r\n\r\nCurveFilletPoints(curve_id_0, curve_id_1, radius=1.0, base_point_0=None, base_point_1=None, return_points=True) |      Find points at which to cut a pair of curves so that a fillet of a\r\n        specified radius fits. A fillet point is a pair of points (point0, point1)\r\n        such that there is a circle of radius tangent to curve curve0 at point0 and\r\n        tangent to curve curve1 at point1. Of all possible fillet points, this\r\n        function returns the one which is the closest to the base point base_point_0,\r\n        base_point_1. Distance from the base point is measured by the sum of arc\r\n        lengths along the two curves. \r\n        Parameters:\r\n          curve_id_0 = identifier of the first curve object.\r\n          curve_id_1 = identifier of the second curve object.\r\n          radius [opt] = The fillet radius. If omitted, a radius\r\n                         of 1.0 is specified.\r\n          base_point_0 [opt] = The base point on the first curve.\r\n                         If omitted, the starting point of the curve is used.\r\n          base_point_1 [opt] = The base point on the second curve. If omitted,\r\n                         the starting point of the curve is used.\r\n          return_points [opt] = If True (Default), then fillet points are\r\n                         returned. Otherwise, a fillet curve is created and\r\n                         it's identifier is returned.\r\n        Returns:\r\n          If return_points is True, then a list of point and vector values\r\n          if successful. The list elements are as follows:\r\n          \r\n          0    A point on the first curve at which to cut (arrPoint0).\r\n          1    A point on the second curve at which to cut (arrPoint1).\r\n          2    The fillet plane's origin (3-D point). This point is also\r\n               the center point of the fillet\r\n          3    The fillet plane's X axis (3-D vector).\r\n          4    The fillet plane's Y axis (3-D vector).\r\n          5    The fillet plane's Z axis (3-D vector).\r\n          \r\n          If return_points is False, then the identifier of the fillet curve\r\n          if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveFrame","Arguments":["curve_id","parameter","segment_index=-1"],"Signature":"CurveFrame (curve_id, parameter, segment_index=-1)","Description":"Returns the plane at a parameter of a curve. The plane is based on the\r\n        tangent and curvature vectors at a parameter.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object.\r\nparameter = parameter to evaluate.\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe plane at the specified parameter if successful. \r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveFrame in module rhinoscript.curve:\r\n\r\nCurveFrame(curve_id, parameter, segment_index=-1) |      Returns the plane at a parameter of a curve. The plane is based on the\r\n        tangent and curvature vectors at a parameter.\r\n        Parameters:\r\n          curve_id = identifier of the curve object.\r\n          parameter = parameter to evaluate.\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The plane at the specified parameter if successful. \r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveKnotCount","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveKnotCount (curve_id, segment_index=-1)","Description":"Returns the knot count of a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object.\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        ","Returns":"\r\nThe number of knots if successful.\r\nNone if not successful or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveKnotCount in module rhinoscript.curve:\r\n\r\nCurveKnotCount(curve_id, segment_index=-1) |      Returns the knot count of a curve object.\r\n        Parameters:\r\n          curve_id = identifier of the curve object.\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        Returns:\r\n          The number of knots if successful.\r\n          None if not successful or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveKnots","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveKnots (curve_id, segment_index=-1)","Description":"Returns the knots, or knot vector, of a curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object.\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        ","Returns":"\r\nknot values if successful.\r\nNone if not successful or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveKnots in module rhinoscript.curve:\r\n\r\nCurveKnots(curve_id, segment_index=-1) |      Returns the knots, or knot vector, of a curve object\r\n        Parameters:\r\n          curve_id = identifier of the curve object.\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve.\r\n        Returns:\r\n          knot values if successful.\r\n          None if not successful or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveLength","Arguments":["curve_id","segment_index=-1","sub_domain=None"],"Signature":"CurveLength (curve_id, segment_index=-1, sub_domain=None)","Description":"Returns the length of a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\nsub_domain [opt] = list of two numbers identifing the sub-domain of the\r\n    curve on which the calculation will be performed. The two parameters\r\n    (sub-domain) must be non-decreasing. If omitted, the length of the\r\n    entire curve is returned.\r\n        ","Returns":"\r\nThe length of the curve if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveLength in module rhinoscript.curve:\r\n\r\nCurveLength(curve_id, segment_index=-1, sub_domain=None) |      Returns the length of a curve object.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n          sub_domain [opt] = list of two numbers identifing the sub-domain of the\r\n              curve on which the calculation will be performed. The two parameters\r\n              (sub-domain) must be non-decreasing. If omitted, the length of the\r\n              entire curve is returned.\r\n        Returns:\r\n          The length of the curve if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveMidPoint","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveMidPoint (curve_id, segment_index=-1)","Description":"Returns the mid point of a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe 3D mid point of the curve if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveMidPoint in module rhinoscript.curve:\r\n\r\nCurveMidPoint(curve_id, segment_index=-1) |      Returns the mid point of a curve object.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The 3D mid point of the curve if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveNormal","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveNormal (curve_id, segment_index=-1)","Description":"Returns the normal direction of the plane in which a planar curve object lies.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe 3D normal vector if sucessful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveNormal in module rhinoscript.curve:\r\n\r\nCurveNormal(curve_id, segment_index=-1) |      Returns the normal direction of the plane in which a planar curve object lies.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The 3D normal vector if sucessful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveNormalizedParameter","Arguments":["curve_id","parameter"],"Signature":"CurveNormalizedParameter (curve_id, parameter)","Description":"Converts a curve parameter to a normalized curve parameter;\r\n        one that ranges between 0-1\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nparameter = the curve parameter to convert\r\n        ","Returns":"\r\nnormalized curve parameter\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveNormalizedParameter in module rhinoscript.curve:\r\n\r\nCurveNormalizedParameter(curve_id, parameter) |      Converts a curve parameter to a normalized curve parameter;\r\n        one that ranges between 0-1\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          parameter = the curve parameter to convert\r\n        Returns:\r\n          normalized curve parameter","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveParameter","Arguments":["curve_id","parameter"],"Signature":"CurveParameter (curve_id, parameter)","Description":"Converts a normalized curve parameter to a curve parameter;\r\n        one within the curve's domain\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nparameter = the normalized curve parameter to convert\r\n        ","Returns":"\r\ncurve parameter\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveParameter in module rhinoscript.curve:\r\n\r\nCurveParameter(curve_id, parameter) |      Converts a normalized curve parameter to a curve parameter;\r\n        one within the curve's domain\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          parameter = the normalized curve parameter to convert\r\n        Returns:\r\n          curve parameter","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurvePerpFrame","Arguments":["curve_id","parameter"],"Signature":"CurvePerpFrame (curve_id, parameter)","Description":"Returns the perpendicular plane at a parameter of a curve. The result\r\n        is relatively parallel (zero-twisting) plane\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nparameter = parameter to evaluate\r\n        ","Returns":"\r\nPlane on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurvePerpFrame in module rhinoscript.curve:\r\n\r\nCurvePerpFrame(curve_id, parameter) |      Returns the perpendicular plane at a parameter of a curve. The result\r\n        is relatively parallel (zero-twisting) plane\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          parameter = parameter to evaluate\r\n        Returns:\r\n          Plane on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurvePlane","Arguments":["curve_id","segment_index=-1"],"Signature":"CurvePlane (curve_id, segment_index=-1)","Description":"Returns the plane in which a planar curve lies. Note, this function works\r\n        only on planar curves.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index[opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe plane in which the curve lies if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurvePlane in module rhinoscript.curve:\r\n\r\nCurvePlane(curve_id, segment_index=-1) |      Returns the plane in which a planar curve lies. Note, this function works\r\n        only on planar curves.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index[opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The plane in which the curve lies if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurvePointCount","Arguments":["curve_id","segment_index=-1"],"Signature":"CurvePointCount (curve_id, segment_index=-1)","Description":"Returns the control points count of a curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nNumber of control points if successful.\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurvePointCount in module rhinoscript.curve:\r\n\r\nCurvePointCount(curve_id, segment_index=-1) |      Returns the control points count of a curve object.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          Number of control points if successful.\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurvePoints","Arguments":["curve_id","segment_index=-1"],"Signature":"CurvePoints (curve_id, segment_index=-1)","Description":"Returns the control points, or control vertices, of a curve object.\r\n        If the curve is a rational NURBS curve, the euclidean control vertices\r\n        are returned.\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurvePoints in module rhinoscript.curve:\r\n\r\nCurvePoints(curve_id, segment_index=-1) |      Returns the control points, or control vertices, of a curve object.\r\n        If the curve is a rational NURBS curve, the euclidean control vertices\r\n        are returned.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveRadius","Arguments":["curve_id","test_point","segment_index=-1"],"Signature":"CurveRadius (curve_id, test_point, segment_index=-1)","Description":"Returns the radius of curvature at a point on a curve.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\ntest_point = sampling point\r\nsegment_index[opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe radius of curvature at the point on the curve if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveRadius in module rhinoscript.curve:\r\n\r\nCurveRadius(curve_id, test_point, segment_index=-1) |      Returns the radius of curvature at a point on a curve.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          test_point = sampling point\r\n          segment_index[opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The radius of curvature at the point on the curve if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveSeam","Arguments":["curve_id","parameter"],"Signature":"CurveSeam (curve_id, parameter)","Description":"Adjusts the seam, or start/end, point of a closed curve.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nparameter = The parameter of the new start/end point. \r\n            Note, if successful, the resulting curve's\r\n            domain will start at dblParameter.\r\n        ","Returns":"\r\nTrue or False indicating success or failure.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveSeam in module rhinoscript.curve:\r\n\r\nCurveSeam(curve_id, parameter) |      Adjusts the seam, or start/end, point of a closed curve.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          parameter = The parameter of the new start/end point. \r\n                      Note, if successful, the resulting curve's\r\n                      domain will start at dblParameter.\r\n        Returns:\r\n          True or False indicating success or failure.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveStartPoint","Arguments":["curve_id","segment_index=-1","point=None"],"Signature":"CurveStartPoint (curve_id, segment_index=-1, point=None)","Description":"Returns the start point of a curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\npoint [opt] = new start point\r\n        ","Returns":"\r\nThe 3D starting point of the curve if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveStartPoint in module rhinoscript.curve:\r\n\r\nCurveStartPoint(curve_id, segment_index=-1, point=None) |      Returns the start point of a curve object\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n          point [opt] = new start point\r\n        Returns:\r\n          The 3D starting point of the curve if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveSurfaceIntersection","Arguments":["curve_id","surface_id","tolerance=-1","angle_tolerance=-1"],"Signature":"CurveSurfaceIntersection (curve_id, surface_id, tolerance=-1, angle_tolerance=-1)","Description":"Calculates intersection of a curve object with a surface object.\r\n        Note, this function works on the untrimmed portion of the surface.\r\n        ","ArgumentDesc":"\r\ncurve_id = The identifier of the first curve object.\r\nsurface_id = The identifier of the second curve object. If omitted,\r\n    the a self-intersection test will be performed on curve.\r\ntolerance [opt] = The absolute tolerance in drawing units. If omitted, \r\n    the document's current absolute tolerance is used.\r\nangle_tolerance [opt] = angle tolerance in degrees. The angle\r\n    tolerance is used to determine when the curve is tangent to the\r\n    surface. If omitted, the document's current angle tolerance is used.\r\n        ","Returns":"\r\nTwo-dimensional list of intersection information if successful.\r\nThe list will contain one or more of the following elements:\r\n  Element Type     Description\r\n  (n, 0)  Number   The intersection event type, either Point(1) or Overlap(2).\r\n  (n, 1)  Point3d  If the event type is Point(1), then the intersection point \r\n                   on the first curve. If the event type is Overlap(2), then\r\n                   intersection start point on the first curve.\r\n  (n, 2)  Point3d  If the event type is Point(1), then the intersection point\r\n                   on the first curve. If the event type is Overlap(2), then\r\n                   intersection end point on the first curve.\r\n  (n, 3)  Point3d  If the event type is Point(1), then the intersection point \r\n                   on the second curve. If the event type is Overlap(2), then\r\n                   intersection start point on the surface.\r\n  (n, 4)  Point3d  If the event type is Point(1), then the intersection point\r\n                   on the second curve. If the event type is Overlap(2), then\r\n                   intersection end point on the surface.\r\n  (n, 5)  Number   If the event type is Point(1), then the first curve parameter.\r\n                   If the event type is Overlap(2), then the start value of the\r\n                   first curve parameter range.\r\n  (n, 6)  Number   If the event type is Point(1), then the first curve parameter.\r\n                   If the event type is Overlap(2), then the end value of the\r\n                   curve parameter range.\r\n  (n, 7)  Number   If the event type is Point(1), then the U surface parameter.\r\n                   If the event type is Overlap(2), then the U surface parameter\r\n                   for curve at (n, 5).\r\n  (n, 8)  Number   If the event type is Point(1), then the V surface parameter.\r\n                   If the event type is Overlap(2), then the V surface parameter\r\n                   for curve at (n, 5).\r\n  (n, 9)  Number   If the event type is Point(1), then the U surface parameter.\r\n                   If the event type is Overlap(2), then the U surface parameter\r\n                   for curve at (n, 6).\r\n  (n, 10) Number   If the event type is Point(1), then the V surface parameter.\r\n                   If the event type is Overlap(2), then the V surface parameter\r\n                   for curve at (n, 6).\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveSurfaceIntersection in module rhinoscript.curve:\r\n\r\nCurveSurfaceIntersection(curve_id, surface_id, tolerance=-1, angle_tolerance=-1) |      Calculates intersection of a curve object with a surface object.\r\n        Note, this function works on the untrimmed portion of the surface.\r\n        Parameters:\r\n          curve_id = The identifier of the first curve object.\r\n          surface_id = The identifier of the second curve object. If omitted,\r\n              the a self-intersection test will be performed on curve.\r\n          tolerance [opt] = The absolute tolerance in drawing units. If omitted, \r\n              the document's current absolute tolerance is used.\r\n          angle_tolerance [opt] = angle tolerance in degrees. The angle\r\n              tolerance is used to determine when the curve is tangent to the\r\n              surface. If omitted, the document's current angle tolerance is used.\r\n        Returns:\r\n          Two-dimensional list of intersection information if successful.\r\n          The list will contain one or more of the following elements:\r\n            Element Type     Description\r\n            (n, 0)  Number   The intersection event type, either Point(1) or Overlap(2).\r\n            (n, 1)  Point3d  If the event type is Point(1), then the intersection point \r\n                             on the first curve. If the event type is Overlap(2), then\r\n                             intersection start point on the first curve.\r\n            (n, 2)  Point3d  If the event type is Point(1), then the intersection point\r\n                             on the first curve. If the event type is Overlap(2), then\r\n                             intersection end point on the first curve.\r\n            (n, 3)  Point3d  If the event type is Point(1), then the intersection point \r\n                             on the second curve. If the event type is Overlap(2), then\r\n                             intersection start point on the surface.\r\n            (n, 4)  Point3d  If the event type is Point(1), then the intersection point\r\n                             on the second curve. If the event type is Overlap(2), then\r\n                             intersection end point on the surface.\r\n            (n, 5)  Number   If the event type is Point(1), then the first curve parameter.\r\n                             If the event type is Overlap(2), then the start value of the\r\n                             first curve parameter range.\r\n            (n, 6)  Number   If the event type is Point(1), then the first curve parameter.\r\n                             If the event type is Overlap(2), then the end value of the\r\n                             curve parameter range.\r\n            (n, 7)  Number   If the event type is Point(1), then the U surface parameter.\r\n                             If the event type is Overlap(2), then the U surface parameter\r\n                             for curve at (n, 5).\r\n            (n, 8)  Number   If the event type is Point(1), then the V surface parameter.\r\n                             If the event type is Overlap(2), then the V surface parameter\r\n                             for curve at (n, 5).\r\n            (n, 9)  Number   If the event type is Point(1), then the U surface parameter.\r\n                             If the event type is Overlap(2), then the U surface parameter\r\n                             for curve at (n, 6).\r\n            (n, 10) Number   If the event type is Point(1), then the V surface parameter.\r\n                             If the event type is Overlap(2), then the V surface parameter\r\n                             for curve at (n, 6).","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveTangent","Arguments":["curve_id","parameter","segment_index=-1"],"Signature":"CurveTangent (curve_id, parameter, segment_index=-1)","Description":"Returns a 3D vector that is the tangent to a curve at a parameter.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nparameter = parameter to evaluate\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nA 3D vector if successful.\r\nNone on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveTangent in module rhinoscript.curve:\r\n\r\nCurveTangent(curve_id, parameter, segment_index=-1) |      Returns a 3D vector that is the tangent to a curve at a parameter.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          parameter = parameter to evaluate\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          A 3D vector if successful.\r\n          None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"CurveWeights","Arguments":["curve_id","segment_index=-1"],"Signature":"CurveWeights (curve_id, segment_index=-1)","Description":"Returns list of weights that are assigned to the control points of a curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index[opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nThe weight values of the curve if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveWeights in module rhinoscript.curve:\r\n\r\nCurveWeights(curve_id, segment_index=-1) |      Returns list of weights that are assigned to the control points of a curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index[opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          The weight values of the curve if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"DivideCurve","Arguments":["curve_id","segments","create_points=False","return_points=True"],"Signature":"DivideCurve (curve_id, segments, create_points=False, return_points=True)","Description":"Divides a curve object into a specified number of segments.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegments = The number of segments.\r\ncreate_points [opt] = Create the division points. If omitted or False,\r\n    points are not created.\r\nreturn_points [opt] = If omitted or True, points are returned.\r\n    If False, then a list of curve parameters are returned.\r\n        ","Returns":"\r\nIf return_points is not specified or True, then a list containing 3D\r\ndivision points.\r\nIf return_points is False, then an array containing division curve\r\nparameters.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DivideCurve in module rhinoscript.curve:\r\n\r\nDivideCurve(curve_id, segments, create_points=False, return_points=True) |      Divides a curve object into a specified number of segments.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segments = The number of segments.\r\n          create_points [opt] = Create the division points. If omitted or False,\r\n              points are not created.\r\n          return_points [opt] = If omitted or True, points are returned.\r\n              If False, then a list of curve parameters are returned.\r\n        Returns:\r\n          If return_points is not specified or True, then a list containing 3D\r\n          division points.\r\n          If return_points is False, then an array containing division curve\r\n          parameters.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"DivideCurveEquidistant","Arguments":["curve_id","distance","create_points=False","return_points=True"],"Signature":"DivideCurveEquidistant (curve_id, distance, create_points=False, return_points=True)","Description":"Divides a curve such that the linear distance between the points is equal.\r\n        ","ArgumentDesc":"\r\ncurve_id = the object's identifier\r\ndistance = linear distance between division points\r\ncreate_points[opt] = create the division points\r\nreturn_points[opt] = If True, return a list of points.\r\n    If False, return a list of curve parameters\r\n        ","Returns":"\r\nA list of points or curve parameters based on the value of return_points\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DivideCurveEquidistant in module rhinoscript.curve:\r\n\r\nDivideCurveEquidistant(curve_id, distance, create_points=False, return_points=True) |      Divides a curve such that the linear distance between the points is equal.\r\n        Parameters:\r\n          curve_id = the object's identifier\r\n          distance = linear distance between division points\r\n          create_points[opt] = create the division points\r\n          return_points[opt] = If True, return a list of points.\r\n              If False, return a list of curve parameters\r\n        Returns:\r\n          A list of points or curve parameters based on the value of return_points\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"DivideCurveLength","Arguments":["curve_id","length","create_points=False","return_points=True"],"Signature":"DivideCurveLength (curve_id, length, create_points=False, return_points=True)","Description":"Divides a curve object into segments of a specified length.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nlength = The length of each segment.\r\ncreate_points [opt] = Create the division points. If omitted or False,\r\n    points are not created.\r\nreturn_points [opt] = If omitted or True, points are returned.\r\n    If False, then a list of curve parameters are returned.\r\n        ","Returns":"\r\nIf return_points is not specified or True, then a list containing 3D\r\ndivision points if successful.\r\nIf return_points is False, then an array containing division curve\r\nparameters if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DivideCurveLength in module rhinoscript.curve:\r\n\r\nDivideCurveLength(curve_id, length, create_points=False, return_points=True) |      Divides a curve object into segments of a specified length.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          length = The length of each segment.\r\n          create_points [opt] = Create the division points. If omitted or False,\r\n              points are not created.\r\n          return_points [opt] = If omitted or True, points are returned.\r\n              If False, then a list of curve parameters are returned.\r\n        Returns:\r\n          If return_points is not specified or True, then a list containing 3D\r\n          division points if successful.\r\n          If return_points is False, then an array containing division curve\r\n          parameters if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"EllipseCenterPoint","Arguments":["curve_id"],"Signature":"EllipseCenterPoint (curve_id)","Description":"Returns the center point of an elliptical-shaped curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object.    \r\n        ","Returns":"\r\nThe 3D center point of the ellipse if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EllipseCenterPoint in module rhinoscript.curve:\r\n\r\nEllipseCenterPoint(curve_id) |      Returns the center point of an elliptical-shaped curve object.\r\n        Parameters:\r\n          curve_id = identifier of the curve object.    \r\n        Returns:\r\n          The 3D center point of the ellipse if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"EllipseQuadPoints","Arguments":["curve_id"],"Signature":"EllipseQuadPoints (curve_id)","Description":"Returns the quadrant points of an elliptical-shaped curve object.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object.\r\n        ","Returns":"\r\nFour 3D points identifying the quadrants of the ellipse\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EllipseQuadPoints in module rhinoscript.curve:\r\n\r\nEllipseQuadPoints(curve_id) |      Returns the quadrant points of an elliptical-shaped curve object.\r\n        Parameters:\r\n          curve_id = identifier of the curve object.\r\n        Returns:\r\n          Four 3D points identifying the quadrants of the ellipse","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"EvaluateCurve","Arguments":["curve_id","t","segment_index=-1"],"Signature":"EvaluateCurve (curve_id, t, segment_index=-1)","Description":"Evaluates a curve at a parameter and returns a 3D point\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nt = the parameter to evaluate\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EvaluateCurve in module rhinoscript.curve:\r\n\r\nEvaluateCurve(curve_id, t, segment_index=-1) |      Evaluates a curve at a parameter and returns a 3D point\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          t = the parameter to evaluate\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ExplodeCurves","Arguments":["curve_ids","delete_input=False"],"Signature":"ExplodeCurves (curve_ids, delete_input=False)","Description":"Explodes, or un-joins, one curves. Polycurves will be exploded into curve\r\n        segments. Polylines will be exploded into line segments. ExplodeCurves will\r\n        return the curves in topological order. \r\n        ","ArgumentDesc":"\r\ncurve_ids = the curve object(s) to explode.\r\ndelete_input[opt] = Delete input objects after exploding.\r\n        ","Returns":"\r\nList identifying the newly created curve objects\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExplodeCurves in module rhinoscript.curve:\r\n\r\nExplodeCurves(curve_ids, delete_input=False) |      Explodes, or un-joins, one curves. Polycurves will be exploded into curve\r\n        segments. Polylines will be exploded into line segments. ExplodeCurves will\r\n        return the curves in topological order. \r\n        Parameters:\r\n          curve_ids = the curve object(s) to explode.\r\n          delete_input[opt] = Delete input objects after exploding.\r\n        Returns:\r\n          List identifying the newly created curve objects","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ExtendCurve","Arguments":["curve_id","extension_type","side","boundary_object_ids"],"Signature":"ExtendCurve (curve_id, extension_type, side, boundary_object_ids)","Description":"Extends a non-closed curve object by a line, arc, or smooth extension\r\n        until it intersects a collection of objects.\r\n        ","ArgumentDesc":"\r\ncurve_id: identifier of curve to extend\r\nextension_type: 0 = line, 1 = arc, 2 = smooth\r\nside: 0=extend from the start of the curve, 1=extend from the end of the curve\r\nboundary_object_ids: curve, surface, and polysurface objects to extend to\r\n        ","Returns":"\r\nThe identifier of the new object if successful.\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtendCurve in module rhinoscript.curve:\r\n\r\nExtendCurve(curve_id, extension_type, side, boundary_object_ids) |      Extends a non-closed curve object by a line, arc, or smooth extension\r\n        until it intersects a collection of objects.\r\n        Parameters:\r\n          curve_id: identifier of curve to extend\r\n          extension_type: 0 = line, 1 = arc, 2 = smooth\r\n          side: 0=extend from the start of the curve, 1=extend from the end of the curve\r\n          boundary_object_ids: curve, surface, and polysurface objects to extend to\r\n        Returns:\r\n          The identifier of the new object if successful.\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ExtendCurveLength","Arguments":["curve_id","extension_type","side","length"],"Signature":"ExtendCurveLength (curve_id, extension_type, side, length)","Description":"Extends a non-closed curve by a line, arc, or smooth extension for a\r\n        specified distance\r\n        ","ArgumentDesc":"\r\ncurve_id: curve to extend\r\nextension_type: 0 = line, 1 = arc, 2 = smooth\r\nside: 0=extend from start of the curve, 1=extend from end of the curve\r\nlength: distance to extend\r\n        ","Returns":"\r\nThe identifier of the new object\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtendCurveLength in module rhinoscript.curve:\r\n\r\nExtendCurveLength(curve_id, extension_type, side, length) |      Extends a non-closed curve by a line, arc, or smooth extension for a\r\n        specified distance\r\n        Parameters:\r\n          curve_id: curve to extend\r\n          extension_type: 0 = line, 1 = arc, 2 = smooth\r\n          side: 0=extend from start of the curve, 1=extend from end of the curve\r\n          length: distance to extend\r\n        Returns:\r\n          The identifier of the new object\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ExtendCurvePoint","Arguments":["curve_id","side","point"],"Signature":"ExtendCurvePoint (curve_id, side, point)","Description":"Extends a non-closed curve by smooth extension to a point\r\n        ","ArgumentDesc":"\r\ncurve_id: curve to extend\r\nside: 0=extend from start of the curve, 1=extend from end of the curve\r\npoint: point to extend to\r\n        ","Returns":"\r\nThe identifier of the new object if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtendCurvePoint in module rhinoscript.curve:\r\n\r\nExtendCurvePoint(curve_id, side, point) |      Extends a non-closed curve by smooth extension to a point\r\n        Parameters:\r\n          curve_id: curve to extend\r\n          side: 0=extend from start of the curve, 1=extend from end of the curve\r\n          point: point to extend to\r\n        Returns:\r\n          The identifier of the new object if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"FairCurve","Arguments":["curve_id","tolerance=1.0"],"Signature":"FairCurve (curve_id, tolerance=1.0)","Description":"Fairs a curve. Fair works best on degree 3 (cubic) curves. Fair attempts\r\n        to remove large curvature variations while limiting the geometry changes to\r\n        be no more than the specified tolerance. Sometimes several applications of\r\n        this method are necessary to remove nasty curvature problems.\r\n        ","ArgumentDesc":"\r\ncurve_id = curve to fair\r\ntolerance[opt] = fairing tolerance\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function FairCurve in module rhinoscript.curve:\r\n\r\nFairCurve(curve_id, tolerance=1.0) |      Fairs a curve. Fair works best on degree 3 (cubic) curves. Fair attempts\r\n        to remove large curvature variations while limiting the geometry changes to\r\n        be no more than the specified tolerance. Sometimes several applications of\r\n        this method are necessary to remove nasty curvature problems.\r\n        Parameters:\r\n          curve_id = curve to fair\r\n          tolerance[opt] = fairing tolerance\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"FitCurve","Arguments":["curve_id","degree=3","distance_tolerance=-1","angle_tolerance=-1"],"Signature":"FitCurve (curve_id, degree=3, distance_tolerance=-1, angle_tolerance=-1)","Description":"Reduces number of curve control points while maintaining the curve's same\r\n        general shape. Use this function for replacing curves with many control\r\n        points. For more information, see the Rhino help for the FitCrv command.\r\n        ","ArgumentDesc":"\r\ncurve_id = Identifier of the curve object\r\ndegree [opt] = The curve degree, which must be greater than 1.\r\n               The default is 3.\r\ndistance_tolerance [opt] = The fitting tolerance. If distance_tolerance\r\n    is not specified or <= 0.0, the document absolute tolerance is used.\r\nangle_tolerance [opt] = The kink smoothing tolerance in degrees. If\r\n    angle_tolerance is 0.0, all kinks are smoothed. If angle_tolerance\r\n    is > 0.0, kinks smaller than angle_tolerance are smoothed. If\r\n    angle_tolerance is not specified or < 0.0, the document angle\r\n    tolerance is used for the kink smoothing.\r\n        ","Returns":"\r\nThe identifier of the new object\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function FitCurve in module rhinoscript.curve:\r\n\r\nFitCurve(curve_id, degree=3, distance_tolerance=-1, angle_tolerance=-1) |      Reduces number of curve control points while maintaining the curve's same\r\n        general shape. Use this function for replacing curves with many control\r\n        points. For more information, see the Rhino help for the FitCrv command.\r\n        Parameters:\r\n          curve_id = Identifier of the curve object\r\n          degree [opt] = The curve degree, which must be greater than 1.\r\n                         The default is 3.\r\n          distance_tolerance [opt] = The fitting tolerance. If distance_tolerance\r\n              is not specified or <= 0.0, the document absolute tolerance is used.\r\n          angle_tolerance [opt] = The kink smoothing tolerance in degrees. If\r\n              angle_tolerance is 0.0, all kinks are smoothed. If angle_tolerance\r\n              is > 0.0, kinks smaller than angle_tolerance are smoothed. If\r\n              angle_tolerance is not specified or < 0.0, the document angle\r\n              tolerance is used for the kink smoothing.\r\n        Returns:\r\n          The identifier of the new object\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"InsertCurveKnot","Arguments":["curve_id","parameter","symmetrical=False"],"Signature":"InsertCurveKnot (curve_id, parameter, symmetrical=False)","Description":"Inserts a knot into a curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nparameter = parameter on the curve\r\nsymmetrical[opt] = if True, then knots are added on both sides of\r\n    the center of the curve\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function InsertCurveKnot in module rhinoscript.curve:\r\n\r\nInsertCurveKnot(curve_id, parameter, symmetrical=False) |      Inserts a knot into a curve object\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          parameter = parameter on the curve\r\n          symmetrical[opt] = if True, then knots are added on both sides of\r\n              the center of the curve\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsArc","Arguments":["curve_id","segment_index=-1"],"Signature":"IsArc (curve_id, segment_index=-1)","Description":"Verifies an object is an arc curve\r\n        ","ArgumentDesc":"\r\ncurve_id = Identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsArc in module rhinoscript.curve:\r\n\r\nIsArc(curve_id, segment_index=-1) |      Verifies an object is an arc curve\r\n        Parameters:\r\n          curve_id = Identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCircle","Arguments":["curve_id","tolerance=None"],"Signature":"IsCircle (curve_id, tolerance=None)","Description":"Verifies an object is a circle curve\r\n        ","ArgumentDesc":"\r\ncurve_id = Identifier of the curve object\r\ntolerance [opt] = If the curve is not a circle, then the tolerance used\r\n  to determine whether or not the NURBS form of the curve has the\r\n  properties of a circle. If omitted, Rhino's internal zero tolerance is used\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCircle in module rhinoscript.curve:\r\n\r\nIsCircle(curve_id, tolerance=None) |      Verifies an object is a circle curve\r\n        Parameters:\r\n          curve_id = Identifier of the curve object\r\n          tolerance [opt] = If the curve is not a circle, then the tolerance used\r\n            to determine whether or not the NURBS form of the curve has the\r\n            properties of a circle. If omitted, Rhino's internal zero tolerance is used\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCurve","Arguments":["object_id"],"Signature":"IsCurve (object_id)","Description":"Verifies an object is a curve\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCurve in module rhinoscript.curve:\r\n\r\nIsCurve(object_id) |      Verifies an object is a curve","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCurveClosable","Arguments":["curve_id","tolerance=None"],"Signature":"IsCurveClosable (curve_id, tolerance=None)","Description":"Decide if it makes sense to close off the curve by moving the end point\r\n        to the start point based on start-end gap size and length of curve as\r\n        approximated by chord defined by 6 points\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\ntolerance[opt] = maximum allowable distance between start point and end\r\n  point. If omitted, the document's current absolute tolerance is used\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCurveClosable in module rhinoscript.curve:\r\n\r\nIsCurveClosable(curve_id, tolerance=None) |      Decide if it makes sense to close off the curve by moving the end point\r\n        to the start point based on start-end gap size and length of curve as\r\n        approximated by chord defined by 6 points\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          tolerance[opt] = maximum allowable distance between start point and end\r\n            point. If omitted, the document's current absolute tolerance is used\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCurveInPlane","Arguments":["object_id","plane=None"],"Signature":"IsCurveInPlane (object_id, plane=None)","Description":"Test a curve to see if it lies in a specific plane\r\n        ","ArgumentDesc":"\r\nobject_id = the object's identifier\r\nplane[opt] = plane to test. If omitted, the active construction plane is used\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCurveInPlane in module rhinoscript.curve:\r\n\r\nIsCurveInPlane(object_id, plane=None) |      Test a curve to see if it lies in a specific plane\r\n        Parameters:\r\n          object_id = the object's identifier\r\n          plane[opt] = plane to test. If omitted, the active construction plane is used\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCurveLinear","Arguments":["object_id","segment_index=-1"],"Signature":"IsCurveLinear (object_id, segment_index=-1)","Description":"Verifies an object is a linear curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCurveLinear in module rhinoscript.curve:\r\n\r\nIsCurveLinear(object_id, segment_index=-1) |      Verifies an object is a linear curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCurvePeriodic","Arguments":["curve_id","segment_index=-1"],"Signature":"IsCurvePeriodic (curve_id, segment_index=-1)","Description":"Verifies an object is a periodic curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCurvePeriodic in module rhinoscript.curve:\r\n\r\nIsCurvePeriodic(curve_id, segment_index=-1) |      Verifies an object is a periodic curve object\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCurvePlanar","Arguments":["curve_id","segment_index=-1"],"Signature":"IsCurvePlanar (curve_id, segment_index=-1)","Description":"Verifies an object is a planar curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCurvePlanar in module rhinoscript.curve:\r\n\r\nIsCurvePlanar(curve_id, segment_index=-1) |      Verifies an object is a planar curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsCurveRational","Arguments":["curve_id","segment_index=-1"],"Signature":"IsCurveRational (curve_id, segment_index=-1)","Description":"Verifies an object is a rational NURBS curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCurveRational in module rhinoscript.curve:\r\n\r\nIsCurveRational(curve_id, segment_index=-1) |      Verifies an object is a rational NURBS curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsEllipse","Arguments":["object_id","segment_index=-1"],"Signature":"IsEllipse (object_id, segment_index=-1)","Description":"Verifies an object is an elliptical-shaped curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsEllipse in module rhinoscript.curve:\r\n\r\nIsEllipse(object_id, segment_index=-1) |      Verifies an object is an elliptical-shaped curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsLine","Arguments":["object_id","segment_index=-1"],"Signature":"IsLine (object_id, segment_index=-1)","Description":"Verifies an object is a line curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLine in module rhinoscript.curve:\r\n\r\nIsLine(object_id, segment_index=-1) |      Verifies an object is a line curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsPointOnCurve","Arguments":["object_id","point","segment_index=-1"],"Signature":"IsPointOnCurve (object_id, point, segment_index=-1)","Description":"Verifies that a point is on a curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\npoint = the test point\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPointOnCurve in module rhinoscript.curve:\r\n\r\nIsPointOnCurve(object_id, point, segment_index=-1) |      Verifies that a point is on a curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          point = the test point\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsPolyCurve","Arguments":["object_id","segment_index=-1"],"Signature":"IsPolyCurve (object_id, segment_index=-1)","Description":"Verifies an object is a PolyCurve curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPolyCurve in module rhinoscript.curve:\r\n\r\nIsPolyCurve(object_id, segment_index=-1) |      Verifies an object is a PolyCurve curve\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"IsPolyline","Arguments":["object_id","segment_index=-1"],"Signature":"IsPolyline (object_id, segment_index=-1)","Description":"Verifies an object is a Polyline curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\nsegment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPolyline in module rhinoscript.curve:\r\n\r\nIsPolyline(object_id, segment_index=-1) |      Verifies an object is a Polyline curve object\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          segment_index [opt] = the curve segment if curve_id identifies a polycurve\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"JoinCurves","Arguments":["object_ids","delete_input=False","tolerance=None"],"Signature":"JoinCurves (object_ids, delete_input=False, tolerance=None)","Description":"Joins multiple curves together to form one or more curves or polycurves\r\n        ","ArgumentDesc":"\r\nobject_ids = list of multiple curves\r\ndelete_input[opt] = delete input objects after joining\r\ntolerance[opt] = join tolerance. If omitted, 2.1 * document absolute\r\n    tolerance is used\r\n        ","Returns":"\r\nList of Guids representing the new curves\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function JoinCurves in module rhinoscript.curve:\r\n\r\nJoinCurves(object_ids, delete_input=False, tolerance=None) |      Joins multiple curves together to form one or more curves or polycurves\r\n        Parameters:\r\n          object_ids = list of multiple curves\r\n          delete_input[opt] = delete input objects after joining\r\n          tolerance[opt] = join tolerance. If omitted, 2.1 * document absolute\r\n              tolerance is used\r\n        Returns:\r\n          List of Guids representing the new curves","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"LineFitFromPoints","Arguments":["points"],"Signature":"LineFitFromPoints (points)","Description":"Returns a line that was fit through an array of 3D points\r\n        ","ArgumentDesc":"\r\npoints = a list of at least two 3D points\r\n        ","Returns":"\r\nline on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineFitFromPoints in module rhinoscript.curve:\r\n\r\nLineFitFromPoints(points) |      Returns a line that was fit through an array of 3D points\r\n        Parameters:\r\n          points = a list of at least two 3D points\r\n        Returns:\r\n          line on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"MakeCurveNonPeriodic","Arguments":["curve_id","delete_input=False"],"Signature":"MakeCurveNonPeriodic (curve_id, delete_input=False)","Description":"Makes a periodic curve non-periodic. Non-periodic curves can develop\r\n        kinks when deformed\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\ndelete_input[opt] = delete the input curve\r\n        ","Returns":"\r\nid of the new or modified curve if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MakeCurveNonPeriodic in module rhinoscript.curve:\r\n\r\nMakeCurveNonPeriodic(curve_id, delete_input=False) |      Makes a periodic curve non-periodic. Non-periodic curves can develop\r\n        kinks when deformed\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          delete_input[opt] = delete the input curve\r\n        Returns:\r\n          id of the new or modified curve if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"MeanCurve","Arguments":["curve0","curve1","tolerance=None"],"Signature":"MeanCurve (curve0, curve1, tolerance=None)","Description":"Creates an average curve from two curves\r\n        ","ArgumentDesc":"\r\ncurve0, curve1 = identifiers of two curves\r\ntolerance[opt] = angle tolerance used to match kinks between curves\r\n        ","Returns":"\r\nid of the new or modified curve if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeanCurve in module rhinoscript.curve:\r\n\r\nMeanCurve(curve0, curve1, tolerance=None) |      Creates an average curve from two curves\r\n        Parameters:\r\n          curve0, curve1 = identifiers of two curves\r\n          tolerance[opt] = angle tolerance used to match kinks between curves\r\n        Returns:\r\n          id of the new or modified curve if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"MeshPolyline","Arguments":["polyline_id"],"Signature":"MeshPolyline (polyline_id)","Description":"Creates a polygon mesh object based on a closed polyline curve object.\r\n        The created mesh object is added to the document\r\n        ","ArgumentDesc":"\r\npolyline_id = identifier of the polyline curve object\r\n        ","Returns":"\r\nidentifier of the new mesh object\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshPolyline in module rhinoscript.curve:\r\n\r\nMeshPolyline(polyline_id) |      Creates a polygon mesh object based on a closed polyline curve object.\r\n        The created mesh object is added to the document\r\n        Parameters:\r\n          polyline_id = identifier of the polyline curve object\r\n        Returns:\r\n          identifier of the new mesh object\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"OffsetCurve","Arguments":["object_id","direction","distance","normal=None","style=1"],"Signature":"OffsetCurve (object_id, direction, distance, normal=None, style=1)","Description":"Offsets a curve by a distance. The offset curve will be added to Rhino\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a curve object\r\ndirection = point describing direction of the offset\r\ndistance = distance of the offset\r\nnormal[opt] = normal of the plane in which the offset will occur.\r\n    If omitted, the normal of the active construction plane will be used\r\nstyle[opt] = the corner style\r\n    0 = None, 1 = Sharp, 2 = Round, 3 = Smooth, 4 = Chamfer\r\n        ","Returns":"\r\nList of ids for the new curves on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OffsetCurve in module rhinoscript.curve:\r\n\r\nOffsetCurve(object_id, direction, distance, normal=None, style=1) |      Offsets a curve by a distance. The offset curve will be added to Rhino\r\n        Parameters:\r\n          object_id = identifier of a curve object\r\n          direction = point describing direction of the offset\r\n          distance = distance of the offset\r\n          normal[opt] = normal of the plane in which the offset will occur.\r\n              If omitted, the normal of the active construction plane will be used\r\n          style[opt] = the corner style\r\n              0 = None, 1 = Sharp, 2 = Round, 3 = Smooth, 4 = Chamfer\r\n        Returns:\r\n          List of ids for the new curves on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"OffsetCurveOnSurface","Arguments":["curve_id","surface_id","distance_or_parameter"],"Signature":"OffsetCurveOnSurface (curve_id, surface_id, distance_or_parameter)","Description":"Offset a curve on a surface. The source curve must lie on the surface.\r\n        The offset curve or curves will be added to Rhino\r\n        ","ArgumentDesc":"\r\ncurve_id, surface_id = curve and surface identifiers\r\ndistance_or_parameter = If a single number is passed, then this is the\r\n  distance of the offset. Based on the curve's direction, a positive value\r\n  will offset to the left and a negative value will offset to the right.\r\n  If a tuple of two values is passed, this is interpreted as the surface\r\n  U,V parameter that the curve will be offset through\r\n        ","Returns":"\r\nIdentifiers of the new curves if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OffsetCurveOnSurface in module rhinoscript.curve:\r\n\r\nOffsetCurveOnSurface(curve_id, surface_id, distance_or_parameter) |      Offset a curve on a surface. The source curve must lie on the surface.\r\n        The offset curve or curves will be added to Rhino\r\n        Parameters:\r\n          curve_id, surface_id = curve and surface identifiers\r\n          distance_or_parameter = If a single number is passed, then this is the\r\n            distance of the offset. Based on the curve's direction, a positive value\r\n            will offset to the left and a negative value will offset to the right.\r\n            If a tuple of two values is passed, this is interpreted as the surface\r\n            U,V parameter that the curve will be offset through\r\n        Returns:\r\n          Identifiers of the new curves if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"PlanarClosedCurveContainment","Arguments":["curve_a","curve_b","plane=None","tolerance=None"],"Signature":"PlanarClosedCurveContainment (curve_a, curve_b, plane=None, tolerance=None)","Description":"Determines the relationship between the regions bounded by two coplanar\r\n        simple closed curves\r\n        ","ArgumentDesc":"\r\ncurve_a, curve_b = identifiers of two planar, closed curves\r\nplane[opt] = test plane. If omitted, the currently active construction\r\n  plane is used\r\ntolerance[opt] = if omitted, the document absolute tolerance is used\r\n        ","Returns":"\r\na number identifying the relationship if successful\r\n  0 = the regions bounded by the curves are disjoint\r\n  1 = the two curves intersect\r\n  2 = the region bounded by curve_a is inside of curve_b\r\n  3 = the region bounded by curve_b is inside of curve_a\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlanarClosedCurveContainment in module rhinoscript.curve:\r\n\r\nPlanarClosedCurveContainment(curve_a, curve_b, plane=None, tolerance=None) |      Determines the relationship between the regions bounded by two coplanar\r\n        simple closed curves\r\n        Parameters:\r\n          curve_a, curve_b = identifiers of two planar, closed curves\r\n          plane[opt] = test plane. If omitted, the currently active construction\r\n            plane is used\r\n          tolerance[opt] = if omitted, the document absolute tolerance is used\r\n        Returns:\r\n          a number identifying the relationship if successful\r\n            0 = the regions bounded by the curves are disjoint\r\n            1 = the two curves intersect\r\n            2 = the region bounded by curve_a is inside of curve_b\r\n            3 = the region bounded by curve_b is inside of curve_a\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"PlanarCurveCollision","Arguments":["curve_a","curve_b","plane=None","tolerance=None"],"Signature":"PlanarCurveCollision (curve_a, curve_b, plane=None, tolerance=None)","Description":"Determines if two coplanar curves intersect\r\n        ","ArgumentDesc":"\r\ncurve_a, curve_b = identifiers of two planar curves\r\nplane[opt] = test plane. If omitted, the currently active construction\r\n  plane is used\r\ntolerance[opt] = if omitted, the document absolute tolerance is used\r\n        ","Returns":"\r\nTrue if the curves intersect; otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlanarCurveCollision in module rhinoscript.curve:\r\n\r\nPlanarCurveCollision(curve_a, curve_b, plane=None, tolerance=None) |      Determines if two coplanar curves intersect\r\n        Parameters:\r\n          curve_a, curve_b = identifiers of two planar curves\r\n          plane[opt] = test plane. If omitted, the currently active construction\r\n            plane is used\r\n          tolerance[opt] = if omitted, the document absolute tolerance is used\r\n        Returns:\r\n          True if the curves intersect; otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"PointInPlanarClosedCurve","Arguments":["point","curve","plane=None","tolerance=None"],"Signature":"PointInPlanarClosedCurve (point, curve, plane=None, tolerance=None)","Description":"Determines if a point is inside of a closed curve, on a closed curve, or\r\n        outside of a closed curve\r\n        ","ArgumentDesc":"\r\npoint = text point\r\ncurve = identifier of a curve object\r\nplane[opt] = plane containing the closed curve and point. If omitted,\r\n    the currently active construction plane is used\r\ntolerance[opt] = it omitted, the document abosulte tolerance is used\r\n        ","Returns":"\r\nnumber identifying the result if successful\r\n    0 = point is outside of the curve\r\n    1 = point is inside of the curve\r\n    2 = point in on the curve\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointInPlanarClosedCurve in module rhinoscript.curve:\r\n\r\nPointInPlanarClosedCurve(point, curve, plane=None, tolerance=None) |      Determines if a point is inside of a closed curve, on a closed curve, or\r\n        outside of a closed curve\r\n        Parameters:\r\n          point = text point\r\n          curve = identifier of a curve object\r\n          plane[opt] = plane containing the closed curve and point. If omitted,\r\n              the currently active construction plane is used\r\n          tolerance[opt] = it omitted, the document abosulte tolerance is used\r\n        Returns:\r\n          number identifying the result if successful\r\n              0 = point is outside of the curve\r\n              1 = point is inside of the curve\r\n              2 = point in on the curve","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"PolyCurveCount","Arguments":["curve_id","segment_index=-1"],"Signature":"PolyCurveCount (curve_id, segment_index=-1)","Description":"Returns the number of curve segments that make up a polycurve\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PolyCurveCount in module rhinoscript.curve:\r\n\r\nPolyCurveCount(curve_id, segment_index=-1) |      Returns the number of curve segments that make up a polycurve","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"PolylineVertices","Arguments":["curve_id","segment_index=-1"],"Signature":"PolylineVertices (curve_id, segment_index=-1)","Description":"Returns the vertices of a polyline curve on success\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PolylineVertices in module rhinoscript.curve:\r\n\r\nPolylineVertices(curve_id, segment_index=-1) |      Returns the vertices of a polyline curve on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ProjectCurveToMesh","Arguments":["curve_ids","mesh_ids","direction"],"Signature":"ProjectCurveToMesh (curve_ids, mesh_ids, direction)","Description":"Projects one or more curves onto one or more surfaces or meshes\r\n        ","ArgumentDesc":"\r\ncurve_ids = identifiers of curves to project\r\nmesh_ids = identifiers of meshes to project onto\r\ndirection = projection direction\r\n        ","Returns":"\r\nlist of identifiers\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ProjectCurveToMesh in module rhinoscript.curve:\r\n\r\nProjectCurveToMesh(curve_ids, mesh_ids, direction) |      Projects one or more curves onto one or more surfaces or meshes\r\n        Parameters:\r\n          curve_ids = identifiers of curves to project\r\n          mesh_ids = identifiers of meshes to project onto\r\n          direction = projection direction\r\n        Returns:\r\n          list of identifiers","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ProjectCurveToSurface","Arguments":["curve_ids","surface_ids","direction"],"Signature":"ProjectCurveToSurface (curve_ids, surface_ids, direction)","Description":"Projects one or more curves onto one or more surfaces or polysurfaces\r\n        ","ArgumentDesc":"\r\ncurve_ids = identifiers of curves to project\r\nsurface_ids = identifiers of surfaces to project onto\r\ndirection = projection direction\r\n        ","Returns":"\r\nlist of identifiers\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ProjectCurveToSurface in module rhinoscript.curve:\r\n\r\nProjectCurveToSurface(curve_ids, surface_ids, direction) |      Projects one or more curves onto one or more surfaces or polysurfaces\r\n        Parameters:\r\n          curve_ids = identifiers of curves to project\r\n          surface_ids = identifiers of surfaces to project onto\r\n          direction = projection direction\r\n        Returns:\r\n          list of identifiers","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"RebuildCurve","Arguments":["curve_id","degree=3","point_count=10"],"Signature":"RebuildCurve (curve_id, degree=3, point_count=10)","Description":"Rebuilds a curve to a given degree and control point count. For more\r\n        information, see the Rhino help for the Rebuild command.\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\ndegree[opt] = new degree (must be greater than 0)\r\npoint_count [opt] = new point count, which must be bigger than degree.\r\n        ","Returns":"\r\nTrue of False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RebuildCurve in module rhinoscript.curve:\r\n\r\nRebuildCurve(curve_id, degree=3, point_count=10) |      Rebuilds a curve to a given degree and control point count. For more\r\n        information, see the Rhino help for the Rebuild command.\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n          degree[opt] = new degree (must be greater than 0)\r\n          point_count [opt] = new point count, which must be bigger than degree.\r\n        Returns:\r\n          True of False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"ReverseCurve","Arguments":["curve_id"],"Signature":"ReverseCurve (curve_id)","Description":"Reverses the direction of a curve object. Same as Rhino's Dir command\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve object\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ReverseCurve in module rhinoscript.curve:\r\n\r\nReverseCurve(curve_id) |      Reverses the direction of a curve object. Same as Rhino's Dir command\r\n        Parameters:\r\n          curve_id = identifier of the curve object\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"SimplifyCurve","Arguments":["curve_id","flags=0"],"Signature":"SimplifyCurve (curve_id, flags=0)","Description":"Replace a curve with a geometrically equivalent polycurve\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SimplifyCurve in module rhinoscript.curve:\r\n\r\nSimplifyCurve(curve_id, flags=0) |      Replace a curve with a geometrically equivalent polycurve","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"SplitCurve","Arguments":["curve_id","parameter","delete_input=True"],"Signature":"SplitCurve (curve_id, parameter, delete_input=True)","Description":"Splits, or divides, a curve at a specified parameter. The parameter must\r\n        be in the interior of the curve's domain\r\n        ","ArgumentDesc":"\r\ncurve_id = the curve to split\r\nparameter = one or more parameters to split the curve at\r\ndelete_input[opt] = delete the input curve\r\n        ","Returns":"\r\nlist of new curves on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SplitCurve in module rhinoscript.curve:\r\n\r\nSplitCurve(curve_id, parameter, delete_input=True) |      Splits, or divides, a curve at a specified parameter. The parameter must\r\n        be in the interior of the curve's domain\r\n        Parameters:\r\n          curve_id = the curve to split\r\n          parameter = one or more parameters to split the curve at\r\n          delete_input[opt] = delete the input curve\r\n        Returns:\r\n          list of new curves on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"curve","Name":"TrimCurve","Arguments":["curve_id","interval","delete_input=True"],"Signature":"TrimCurve (curve_id, interval, delete_input=True)","Description":"Trims a curve by removing portions of the curve outside a specified interval\r\n        Paramters:\r\n          curve_id = the curve to trim\r\n          interval = two numbers indentifying the interval to keep. Portions of\r\n            the curve before domain[0] and after domain[1] will be removed. If the\r\n            input curve is open, the interval must be increasing. If the input\r\n            curve is closed and the interval is decreasing, then the portion of\r\n            the curve across the start and end of the curve is returned\r\n          delete_input[opt] = delete the input curve\r\n        Reutrns:\r\n          identifier of the new curve on success\r\n          None on failure\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TrimCurve in module rhinoscript.curve:\r\n\r\nTrimCurve(curve_id, interval, delete_input=True) |      Trims a curve by removing portions of the curve outside a specified interval\r\n        Paramters:\r\n          curve_id = the curve to trim\r\n          interval = two numbers indentifying the interval to keep. Portions of\r\n            the curve before domain[0] and after domain[1] will be removed. If the\r\n            input curve is open, the interval must be increasing. If the input\r\n            curve is closed and the interval is decreasing, then the portion of\r\n            the curve across the start and end of the curve is returned\r\n          delete_input[opt] = delete the input curve\r\n        Reutrns:\r\n          identifier of the new curve on success\r\n          None on failure","SuccessLevel":1,"IsDocStringWellFormed":false}]},{"ModuleName":"dimension","functions":[{"ModuleName":"dimension","Name":"AddAlignedDimension","Arguments":["start_point","end_point","point_on_dimension_line","style=None"],"Signature":"AddAlignedDimension (start_point, end_point, point_on_dimension_line, style=None)","Description":"Adds an aligned dimension object to the document. An aligned dimension\r\n        is a linear dimension lined up with two points\r\n        ","ArgumentDesc":"\r\nstart_point: first point of dimension\r\nend_point: second point of dimension\r\npoint_on_dimension_line: location point of dimension line\r\nstyle[opt]: name of dimension style\r\n        ","Returns":"\r\nidentifier of new dimension on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddAlignedDimension in module rhinoscript.dimension:\r\n\r\nAddAlignedDimension(start_point, end_point, point_on_dimension_line, style=None) |      Adds an aligned dimension object to the document. An aligned dimension\r\n        is a linear dimension lined up with two points\r\n        Parameters:\r\n          start_point: first point of dimension\r\n          end_point: second point of dimension\r\n          point_on_dimension_line: location point of dimension line\r\n          style[opt]: name of dimension style\r\n        Returns:\r\n          identifier of new dimension on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"AddDimStyle","Arguments":["dimstyle_name=None"],"Signature":"AddDimStyle (dimstyle_name=None)","Description":"Adds a new dimension style to the document. The new dimension style will\r\n        be initialized with the current default dimension style properties.\r\n        Properties:\r\n          dimstyle_name[opt] = name of the new dimension style. If omitted, Rhino\r\n            automatically generates the dimension style name\r\n        Returns:\r\n          name of the new dimension style on success\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddDimStyle in module rhinoscript.dimension:\r\n\r\nAddDimStyle(dimstyle_name=None) |      Adds a new dimension style to the document. The new dimension style will\r\n        be initialized with the current default dimension style properties.\r\n        Properties:\r\n          dimstyle_name[opt] = name of the new dimension style. If omitted, Rhino\r\n            automatically generates the dimension style name\r\n        Returns:\r\n          name of the new dimension style on success\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"AddLeader","Arguments":["points","view_or_plane=None","text=None"],"Signature":"AddLeader (points, view_or_plane=None, text=None)","Description":"Adds a leader to the document. Leader objects are planar.\r\n        The 3D points passed to this function should be co-planar\r\n        Paramters:\r\n          points = list of (at least 2) 3D points\r\n          view_or_plane[opt] = If a view is specified, points will be constrained\r\n            to the view's construction plane. If a view is not specified, points\r\n            will be constrained to a plane fit through the list of points\r\n          text[opt] = leader's text string\r\n        Returns:\r\n          identifier of the new leader on success\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddLeader in module rhinoscript.dimension:\r\n\r\nAddLeader(points, view_or_plane=None, text=None) |      Adds a leader to the document. Leader objects are planar.\r\n        The 3D points passed to this function should be co-planar\r\n        Paramters:\r\n          points = list of (at least 2) 3D points\r\n          view_or_plane[opt] = If a view is specified, points will be constrained\r\n            to the view's construction plane. If a view is not specified, points\r\n            will be constrained to a plane fit through the list of points\r\n          text[opt] = leader's text string\r\n        Returns:\r\n          identifier of the new leader on success\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"AddLinearDimension","Arguments":["plane","start_point","end_point","point_on_dimension_line"],"Signature":"AddLinearDimension (plane, start_point, end_point, point_on_dimension_line)","Description":"Adds a linear dimension to the document\r\n        ","ArgumentDesc":"\r\nplane = The plane on which the dimension will lie.\r\nstart_point = The origin, or first point of the dimension.\r\nend_point = The offset, or second point of the dimension.\r\npoint_on_dimension_line = A point that lies on the dimension line.\r\n        ","Returns":"\r\nidentifier of the new object on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddLinearDimension in module rhinoscript.dimension:\r\n\r\nAddLinearDimension(plane, start_point, end_point, point_on_dimension_line) |      Adds a linear dimension to the document\r\n        Parameters:\r\n          plane = The plane on which the dimension will lie.\r\n          start_point = The origin, or first point of the dimension.\r\n          end_point = The offset, or second point of the dimension.\r\n          point_on_dimension_line = A point that lies on the dimension line.\r\n        Returns:\r\n          identifier of the new object on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"CurrentDimStyle","Arguments":["dimstyle_name=None"],"Signature":"CurrentDimStyle (dimstyle_name=None)","Description":"\r\nReturns or changes the current default dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle_name[opt] = name of an existing dimension style to make current\r\n        ","Returns":"\r\nif dimstyle_name is not specified, name of the current dimension style\r\nif dimstyle_name is specified, name of the previous dimension style\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurrentDimStyle in module rhinoscript.dimension:\r\n\r\nCurrentDimStyle(dimstyle_name=None) |      \r\n        Returns or changes the current default dimension style\r\n        Parameters:\r\n          dimstyle_name[opt] = name of an existing dimension style to make current\r\n        Returns:\r\n          if dimstyle_name is not specified, name of the current dimension style\r\n          if dimstyle_name is specified, name of the previous dimension style\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DeleteDimStyle","Arguments":["dimstyle_name"],"Signature":"DeleteDimStyle (dimstyle_name)","Description":"Removes an existing dimension style from the document. The dimension style\r\n        to be removed cannot be referenced by any dimension objects.\r\n        ","ArgumentDesc":"\r\ndimstyle_name = the name of an unreferenced dimension style\r\n        ","Returns":"\r\nThe name of the deleted dimension style if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteDimStyle in module rhinoscript.dimension:\r\n\r\nDeleteDimStyle(dimstyle_name) |      Removes an existing dimension style from the document. The dimension style\r\n        to be removed cannot be referenced by any dimension objects.\r\n        Parameters:\r\n          dimstyle_name = the name of an unreferenced dimension style\r\n        Returns:\r\n          The name of the deleted dimension style if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleAnglePrecision","Arguments":["dimstyle","precision=None"],"Signature":"DimStyleAnglePrecision (dimstyle, precision=None)","Description":"Returns or changes the angle display precision of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nprecision[opt] = the new angle precision value. If omitted, the current angle\r\n  precision is returned\r\n        ","Returns":"\r\nIf a precision is not specified, the current angle precision\r\nIf a precision is specified, the previous angle precision\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleAnglePrecision in module rhinoscript.dimension:\r\n\r\nDimStyleAnglePrecision(dimstyle, precision=None) |      Returns or changes the angle display precision of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          precision[opt] = the new angle precision value. If omitted, the current angle\r\n            precision is returned\r\n        Returns:\r\n          If a precision is not specified, the current angle precision\r\n          If a precision is specified, the previous angle precision","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleArrowSize","Arguments":["dimstyle","size=None"],"Signature":"DimStyleArrowSize (dimstyle, size=None)","Description":"Returns or changes the arrow size of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nsize[opt] = the new arrow size. If omitted, the current arrow size is returned\r\n        ","Returns":"\r\nIf size is not specified, the current arrow size\r\nIf size is specified, the previous arrow size\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleArrowSize in module rhinoscript.dimension:\r\n\r\nDimStyleArrowSize(dimstyle, size=None) |      Returns or changes the arrow size of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          size[opt] = the new arrow size. If omitted, the current arrow size is returned\r\n        Returns:\r\n          If size is not specified, the current arrow size\r\n          If size is specified, the previous arrow size\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleExtension","Arguments":["dimstyle","extension=None"],"Signature":"DimStyleExtension (dimstyle, extension=None)","Description":"Returns or changes the extension line extension of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nextension[opt] = the new extension line extension\r\n        ","Returns":"\r\nif extension is not specified, the current extension line extension\r\nif extension is specified, the previous extension line extension\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleExtension in module rhinoscript.dimension:\r\n\r\nDimStyleExtension(dimstyle, extension=None) |      Returns or changes the extension line extension of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          extension[opt] = the new extension line extension\r\n        Returns:\r\n          if extension is not specified, the current extension line extension\r\n          if extension is specified, the previous extension line extension\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleFont","Arguments":["dimstyle","font=None"],"Signature":"DimStyleFont (dimstyle, font=None)","Description":"Returns or changes the font used by a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nfont[opt] = the new font face name\r\n        ","Returns":"\r\nif font is not specified, the current font if successful\r\nif font is specified, the previous font if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleFont in module rhinoscript.dimension:\r\n\r\nDimStyleFont(dimstyle, font=None) |      Returns or changes the font used by a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          font[opt] = the new font face name\r\n        Returns:\r\n          if font is not specified, the current font if successful\r\n          if font is specified, the previous font if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleLeaderArrowSize","Arguments":["dimstyle","size=None"],"Signature":"DimStyleLeaderArrowSize (dimstyle, size=None)","Description":"Returns or changes the leader arrow size of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nsize[opt] = the new leader arrow size\r\n        ","Returns":"\r\nif size is not specified, the current leader arrow size\r\nif size is specified, the previous leader arrow size\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleLeaderArrowSize in module rhinoscript.dimension:\r\n\r\nDimStyleLeaderArrowSize(dimstyle, size=None) |      Returns or changes the leader arrow size of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          size[opt] = the new leader arrow size\r\n        Returns:\r\n          if size is not specified, the current leader arrow size\r\n          if size is specified, the previous leader arrow size\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleLengthFactor","Arguments":["dimstyle","factor=None"],"Signature":"DimStyleLengthFactor (dimstyle, factor=None)","Description":"Returns or changes the length factor of a dimension style. Length factor\r\n        is the conversion between Rhino units and dimension units\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nfactor[opt] = the new length factor\r\n        ","Returns":"\r\nif factor is not defined, the current length factor\r\nif factor is defined, the previous length factor\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleLengthFactor in module rhinoscript.dimension:\r\n\r\nDimStyleLengthFactor(dimstyle, factor=None) |      Returns or changes the length factor of a dimension style. Length factor\r\n        is the conversion between Rhino units and dimension units\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          factor[opt] = the new length factor\r\n        Returns:\r\n          if factor is not defined, the current length factor\r\n          if factor is defined, the previous length factor\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleLinearPrecision","Arguments":["dimstyle","precision=None"],"Signature":"DimStyleLinearPrecision (dimstyle, precision=None)","Description":"Returns or changes the linear display precision of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nprecision[opt] = the new linear precision value\r\n        ","Returns":"\r\nif precision is not specified, the current linear precision value\r\nif precision is specified, the previous linear precision value\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleLinearPrecision in module rhinoscript.dimension:\r\n\r\nDimStyleLinearPrecision(dimstyle, precision=None) |      Returns or changes the linear display precision of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          precision[opt] = the new linear precision value\r\n        Returns:\r\n          if precision is not specified, the current linear precision value\r\n          if precision is specified, the previous linear precision value\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleNames","Arguments":["sort=False"],"Signature":"DimStyleNames (sort=False)","Description":"Returns the names of all dimension styles in the document\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleNames in module rhinoscript.dimension:\r\n\r\nDimStyleNames(sort=False) |      Returns the names of all dimension styles in the document","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleNumberFormat","Arguments":["dimstyle","format=None"],"Signature":"DimStyleNumberFormat (dimstyle, format=None)","Description":"Returns or changes the number display format of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nformat[opt] = the new number format\r\n   0 = Decimal\r\n   1 = Fractional\r\n   2 = Feet and inches\r\n        ","Returns":"\r\nif format is not specified, the current display format\r\nif format is specified, the previous display format\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleNumberFormat in module rhinoscript.dimension:\r\n\r\nDimStyleNumberFormat(dimstyle, format=None) |      Returns or changes the number display format of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          format[opt] = the new number format\r\n             0 = Decimal\r\n             1 = Fractional\r\n             2 = Feet and inches\r\n        Returns:\r\n          if format is not specified, the current display format\r\n          if format is specified, the previous display format\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleOffset","Arguments":["dimstyle","offset=None"],"Signature":"DimStyleOffset (dimstyle, offset=None)","Description":"Returns or changes the extension line offset of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\noffset[opt] = the new extension line offset\r\n        ","Returns":"\r\nif offset is not specified, the current extension line offset\r\nif offset is specified, the previous extension line offset\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleOffset in module rhinoscript.dimension:\r\n\r\nDimStyleOffset(dimstyle, offset=None) |      Returns or changes the extension line offset of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          offset[opt] = the new extension line offset\r\n        Returns:\r\n          if offset is not specified, the current extension line offset\r\n          if offset is specified, the previous extension line offset\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStylePrefix","Arguments":["dimstyle","prefix=None"],"Signature":"DimStylePrefix (dimstyle, prefix=None)","Description":"Returns or changes the prefix of a dimension style - the text to\r\n        prefix to the dimension text.\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimstyle\r\nprefix[opt] = the new prefix\r\n        ","Returns":"\r\nif prefix is not specified, the current prefix\r\nif prefix is specified, the previous prefix\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStylePrefix in module rhinoscript.dimension:\r\n\r\nDimStylePrefix(dimstyle, prefix=None) |      Returns or changes the prefix of a dimension style - the text to\r\n        prefix to the dimension text.\r\n        Parameters:\r\n          dimstyle = the name of an existing dimstyle\r\n          prefix[opt] = the new prefix\r\n        Returns:\r\n          if prefix is not specified, the current prefix\r\n          if prefix is specified, the previous prefix\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleSuffix","Arguments":["dimstyle","suffix=None"],"Signature":"DimStyleSuffix (dimstyle, suffix=None)","Description":"Returns or changes the suffix of a dimension style - the text to\r\n        append to the dimension text.\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimstyle\r\nsuffix[opt] = the new suffix\r\n        ","Returns":"\r\nif suffix is not specified, the current suffix\r\nif suffix is specified, the previous suffix\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleSuffix in module rhinoscript.dimension:\r\n\r\nDimStyleSuffix(dimstyle, suffix=None) |      Returns or changes the suffix of a dimension style - the text to\r\n        append to the dimension text.\r\n        Parameters:\r\n          dimstyle = the name of an existing dimstyle\r\n          suffix[opt] = the new suffix\r\n        Returns:\r\n          if suffix is not specified, the current suffix\r\n          if suffix is specified, the previous suffix\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleTextAlignment","Arguments":["dimstyle","alignment=None"],"Signature":"DimStyleTextAlignment (dimstyle, alignment=None)","Description":"Returns or changes the text alignment mode of a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nalignment[opt] = the new text alignment\r\n    0 = Normal (same as 2)\r\n    1 = Horizontal to view\r\n    2 = Above the dimension line\r\n    3 = In the dimension line\r\n        ","Returns":"\r\nif alignment is not specified, the current text alignment\r\nif alignment is specified, the previous text alignment\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleTextAlignment in module rhinoscript.dimension:\r\n\r\nDimStyleTextAlignment(dimstyle, alignment=None) |      Returns or changes the text alignment mode of a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          alignment[opt] = the new text alignment\r\n              0 = Normal (same as 2)\r\n              1 = Horizontal to view\r\n              2 = Above the dimension line\r\n              3 = In the dimension line\r\n        Returns:\r\n          if alignment is not specified, the current text alignment\r\n          if alignment is specified, the previous text alignment\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleTextGap","Arguments":["dimstyle","gap=None"],"Signature":"DimStyleTextGap (dimstyle, gap=None)","Description":"Returns or changes the text gap used by a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\ngap[opt] = the new text gap\r\n        ","Returns":"\r\nif gap is not specified, the current text gap\r\nif gap is specified, the previous text gap\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleTextGap in module rhinoscript.dimension:\r\n\r\nDimStyleTextGap(dimstyle, gap=None) |      Returns or changes the text gap used by a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          gap[opt] = the new text gap\r\n        Returns:\r\n          if gap is not specified, the current text gap\r\n          if gap is specified, the previous text gap\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimStyleTextHeight","Arguments":["dimstyle","height=None"],"Signature":"DimStyleTextHeight (dimstyle, height=None)","Description":"Returns or changes the text height used by a dimension style\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\nheight[opt] = the new text height\r\n        ","Returns":"\r\nif height is not specified, the current text height\r\nif height is specified, the previous text height\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimStyleTextHeight in module rhinoscript.dimension:\r\n\r\nDimStyleTextHeight(dimstyle, height=None) |      Returns or changes the text height used by a dimension style\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style\r\n          height[opt] = the new text height\r\n        Returns:\r\n          if height is not specified, the current text height\r\n          if height is specified, the previous text height\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimensionStyle","Arguments":["object_id","dimstyle_name=None"],"Signature":"DimensionStyle (object_id, dimstyle_name=None)","Description":"Returns or modifies the dimension style of a dimension object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\ndimstyle_name[opt] = the name of an existing dimension style\r\n        ","Returns":"\r\nif dimstyle_name is specified, the object's current dimension style name\r\nif dimstyle_name is not specified, the object's previous dimension style name\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimensionStyle in module rhinoscript.dimension:\r\n\r\nDimensionStyle(object_id, dimstyle_name=None) |      Returns or modifies the dimension style of a dimension object\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          dimstyle_name[opt] = the name of an existing dimension style\r\n        Returns:\r\n          if dimstyle_name is specified, the object's current dimension style name\r\n          if dimstyle_name is not specified, the object's previous dimension style name\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimensionText","Arguments":["object_id"],"Signature":"DimensionText (object_id)","Description":"Returns the text displayed by a dimension object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimensionText in module rhinoscript.dimension:\r\n\r\nDimensionText(object_id) |      Returns the text displayed by a dimension object\r\n        Parameters:\r\n          object_id = identifier of the object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimensionUserText","Arguments":["object_id","usertext=None"],"Signature":"DimensionUserText (object_id, usertext=None)","Description":"Returns of modifies the user text string of a dimension object. The user\r\n        text is the string that gets printed when the dimension is defined\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nusertext[opt] = the new user text string value\r\n        ","Returns":"\r\nif usertext is not specified, the current usertext string\r\nif usertext is specified, the previous usertext string\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimensionUserText in module rhinoscript.dimension:\r\n\r\nDimensionUserText(object_id, usertext=None) |      Returns of modifies the user text string of a dimension object. The user\r\n        text is the string that gets printed when the dimension is defined\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          usertext[opt] = the new user text string value\r\n        Returns:\r\n          if usertext is not specified, the current usertext string\r\n          if usertext is specified, the previous usertext string","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"DimensionValue","Arguments":["object_id"],"Signature":"DimensionValue (object_id)","Description":"Returns the value of a dimension object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        ","Returns":"\r\nnumeric value of the dimension if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DimensionValue in module rhinoscript.dimension:\r\n\r\nDimensionValue(object_id) |      Returns the value of a dimension object\r\n        Parameters:\r\n          object_id = identifier of the object\r\n        Returns:\r\n          numeric value of the dimension if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsAlignedDimension","Arguments":["object_id"],"Signature":"IsAlignedDimension (object_id)","Description":"Verifies an object is an aligned dimension object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsAlignedDimension in module rhinoscript.dimension:\r\n\r\nIsAlignedDimension(object_id) |      Verifies an object is an aligned dimension object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsAngularDimension","Arguments":["object_id"],"Signature":"IsAngularDimension (object_id)","Description":"Verifies an object is an angular dimension object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsAngularDimension in module rhinoscript.dimension:\r\n\r\nIsAngularDimension(object_id) |      Verifies an object is an angular dimension object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsDiameterDimension","Arguments":["object_id"],"Signature":"IsDiameterDimension (object_id)","Description":"Verifies an object is a diameter dimension object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsDiameterDimension in module rhinoscript.dimension:\r\n\r\nIsDiameterDimension(object_id) |      Verifies an object is a diameter dimension object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsDimStyle","Arguments":["dimstyle"],"Signature":"IsDimStyle (dimstyle)","Description":"Verifies the existance of a dimension style in the document\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of a dimstyle to test for\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsDimStyle in module rhinoscript.dimension:\r\n\r\nIsDimStyle(dimstyle) |      Verifies the existance of a dimension style in the document\r\n        Parameters:\r\n          dimstyle = the name of a dimstyle to test for","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsDimStyleReference","Arguments":["dimstyle"],"Signature":"IsDimStyleReference (dimstyle)","Description":"Verifies that an existing dimension style is from a reference file\r\n        ","ArgumentDesc":"\r\ndimstyle = the name of an existing dimension style\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsDimStyleReference in module rhinoscript.dimension:\r\n\r\nIsDimStyleReference(dimstyle) |      Verifies that an existing dimension style is from a reference file\r\n        Parameters:\r\n          dimstyle = the name of an existing dimension style","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsDimension","Arguments":["object_id"],"Signature":"IsDimension (object_id)","Description":"Verifies an object is a dimension object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsDimension in module rhinoscript.dimension:\r\n\r\nIsDimension(object_id) |      Verifies an object is a dimension object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsLeader","Arguments":["object_id"],"Signature":"IsLeader (object_id)","Description":"Verifies an object is a dimension leader object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLeader in module rhinoscript.dimension:\r\n\r\nIsLeader(object_id) |      Verifies an object is a dimension leader object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsLinearDimension","Arguments":["object_id"],"Signature":"IsLinearDimension (object_id)","Description":"Verifies an object is a linear dimension object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLinearDimension in module rhinoscript.dimension:\r\n\r\nIsLinearDimension(object_id) |      Verifies an object is a linear dimension object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsOrdinateDimension","Arguments":["object_id"],"Signature":"IsOrdinateDimension (object_id)","Description":"Verifies an object is an ordinate dimension object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsOrdinateDimension in module rhinoscript.dimension:\r\n\r\nIsOrdinateDimension(object_id) |      Verifies an object is an ordinate dimension object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"IsRadialDimension","Arguments":["object_id"],"Signature":"IsRadialDimension (object_id)","Description":"Verifies an object is a radial dimension object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsRadialDimension in module rhinoscript.dimension:\r\n\r\nIsRadialDimension(object_id) |      Verifies an object is a radial dimension object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"LeaderText","Arguments":["object_id","text=None"],"Signature":"LeaderText (object_id, text=None)","Description":"Returns or modifies the text string of a dimension leader object\r\n        ","ArgumentDesc":"\r\nobject_id = the object's identifier\r\ntext[opt] = the new text string\r\n        ","Returns":"\r\nif text is not specified, the current text string\r\nif text is specified, the previous text string\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LeaderText in module rhinoscript.dimension:\r\n\r\nLeaderText(object_id, text=None) |      Returns or modifies the text string of a dimension leader object\r\n        Parameters:\r\n          object_id = the object's identifier\r\n          text[opt] = the new text string\r\n        Returns:\r\n          if text is not specified, the current text string\r\n          if text is specified, the previous text string\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"dimension","Name":"RenameDimStyle","Arguments":["oldstyle","newstyle"],"Signature":"RenameDimStyle (oldstyle, newstyle)","Description":"Renames an existing dimension style\r\n        ","ArgumentDesc":"\r\noldstyle = the name of an existing dimension style\r\nnewstyle = the new dimension style name\r\n        ","Returns":"\r\nthe new dimension style name if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenameDimStyle in module rhinoscript.dimension:\r\n\r\nRenameDimStyle(oldstyle, newstyle) |      Renames an existing dimension style\r\n        Parameters:\r\n          oldstyle = the name of an existing dimension style\r\n          newstyle = the new dimension style name\r\n        Returns:\r\n          the new dimension style name if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"document","functions":[{"ModuleName":"document","Name":"CreatePreviewImage","Arguments":["filename","view=None","size=None","flags=0","wireframe=False"],"Signature":"CreatePreviewImage (filename, view=None, size=None, flags=0, wireframe=False)","Description":"Create a bitmap preview image of the current model\r\n        ","ArgumentDesc":"\r\nfilename = name of the bitmap file to create\r\nview[opt] = title of the view. If omitted, the active view is used\r\nsize[opt] = two integers that specify width and height of the bitmap\r\nflags[opt] = Bitmap creation flags. Can be the combination of:\r\n    1 = honor object highlighting\r\n    2 = draw construction plane\r\n    4 = use ghosted shading\r\nwireframe[opt] = If True then a wireframe preview image. If False,\r\n    a rendered image will be created\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CreatePreviewImage in module rhinoscript.document:\r\n\r\nCreatePreviewImage(filename, view=None, size=None, flags=0, wireframe=False) |      Create a bitmap preview image of the current model\r\n        Parameters:\r\n          filename = name of the bitmap file to create\r\n          view[opt] = title of the view. If omitted, the active view is used\r\n          size[opt] = two integers that specify width and height of the bitmap\r\n          flags[opt] = Bitmap creation flags. Can be the combination of:\r\n              1 = honor object highlighting\r\n              2 = draw construction plane\r\n              4 = use ghosted shading\r\n          wireframe[opt] = If True then a wireframe preview image. If False,\r\n              a rendered image will be created\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"DocumentModified","Arguments":["modified=None"],"Signature":"DocumentModified (modified=None)","Description":"Returns or sets the document's modified flag. This flag indicates whether\r\n        or not any changes to the current document have been made. NOTE: setting the\r\n        document modified flag to False will prevent the \"Do you want to save this\r\n        file...\" from displaying when you close Rhino.\r\n        ","ArgumentDesc":"\r\nmodified [optional] = the modified state, either True or False\r\n        ","Returns":"\r\nif no modified state is specified, the current modified state\r\nif a modified state is specified, the previous modified state\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DocumentModified in module rhinoscript.document:\r\n\r\nDocumentModified(modified=None) |      Returns or sets the document's modified flag. This flag indicates whether\r\n        or not any changes to the current document have been made. NOTE: setting the\r\n        document modified flag to False will prevent the \"Do you want to save this\r\n        file...\" from displaying when you close Rhino.\r\n        Parameters:\r\n          modified [optional] = the modified state, either True or False\r\n        Returns:\r\n          if no modified state is specified, the current modified state\r\n          if a modified state is specified, the previous modified state","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"EnableRedraw","Arguments":["enable=True"],"Signature":"EnableRedraw (enable=True)","Description":"Enables or disables screen redrawing\r\n        Returns: previous screen redrawing state\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EnableRedraw in module rhinoscript.document:\r\n\r\nEnableRedraw(enable=True) |      Enables or disables screen redrawing\r\n        Returns: previous screen redrawing state","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"ExtractPreviewImage","Arguments":["filename","modelname=None"],"Signature":"ExtractPreviewImage (filename, modelname=None)","Description":"Extracts the bitmap preview image from the specified model (.3dm)\r\n        ","ArgumentDesc":"\r\nfilename = name of the bitmap file to create. The extension of\r\n   the filename controls the format of the bitmap file created.\r\n   (.bmp, .tga, .jpg, .jpeg, .pcx, .png, .tif, .tiff)\r\nmodelname [opt] = The model (.3dm) from which to extract the\r\n   preview image. If omitted, the currently loaded model is used.\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtractPreviewImage in module rhinoscript.document:\r\n\r\nExtractPreviewImage(filename, modelname=None) |      Extracts the bitmap preview image from the specified model (.3dm)\r\n        Parameters:\r\n          filename = name of the bitmap file to create. The extension of\r\n             the filename controls the format of the bitmap file created.\r\n             (.bmp, .tga, .jpg, .jpeg, .pcx, .png, .tif, .tiff)\r\n          modelname [opt] = The model (.3dm) from which to extract the\r\n             preview image. If omitted, the currently loaded model is used.\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"Notes","Arguments":["newnotes=None"],"Signature":"Notes (newnotes=None)","Description":"Returns or sets the document's notes. Notes are generally created\r\n        using Rhino's Notes command\r\n        ","ArgumentDesc":"\r\nnewnotes[opt] = new notes to set\r\n        ","Returns":"\r\nif newnotes is omitted, the current notes if successful\r\nif newnotes is specified, the previous notes if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Notes in module rhinoscript.document:\r\n\r\nNotes(newnotes=None) |      Returns or sets the document's notes. Notes are generally created\r\n        using Rhino's Notes command\r\n        Parameters:\r\n          newnotes[opt] = new notes to set\r\n        Returns:\r\n          if newnotes is omitted, the current notes if successful\r\n          if newnotes is specified, the previous notes if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"RenderAntialias","Arguments":["style=None"],"Signature":"RenderAntialias (style=None)","Description":"Returns or sets render antialias style\r\n        ","ArgumentDesc":"\r\nstyle[opt] = level of antialiasing (0=none, 1=normal, 2=best)\r\n        ","Returns":"\r\nif style is not specified, the current antialias style\r\nif style is specified, the previous antialias style\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenderAntialias in module rhinoscript.document:\r\n\r\nRenderAntialias(style=None) |      Returns or sets render antialias style\r\n        Parameters:\r\n          style[opt] = level of antialiasing (0=none, 1=normal, 2=best)\r\n        Returns:\r\n          if style is not specified, the current antialias style\r\n          if style is specified, the previous antialias style","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"RenderColor","Arguments":["item","color=None"],"Signature":"RenderColor (item, color=None)","Description":"Returns or sets the render ambient light or background color\r\n        ","ArgumentDesc":"\r\nitem = 0=ambient light color, 1=background color\r\ncolor[opt] = the new color value. If omitted, the curren item color is returned\r\n        ","Returns":"\r\nif color is not specified, the current item color\r\nif color is specified, the previous item color\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenderColor in module rhinoscript.document:\r\n\r\nRenderColor(item, color=None) |      Returns or sets the render ambient light or background color\r\n        Parameters:\r\n          item = 0=ambient light color, 1=background color\r\n          color[opt] = the new color value. If omitted, the curren item color is returned\r\n        Returns:\r\n          if color is not specified, the current item color\r\n          if color is specified, the previous item color","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"RenderResolution","Arguments":["resolution=None"],"Signature":"RenderResolution (resolution=None)","Description":"Returns or sets the render resolution\r\n        ","ArgumentDesc":"\r\nresolution[opt] = width and height of render\r\n        ","Returns":"\r\nif resolution is not specified, the current resolution width,height\r\nif resolution is specified, the previous resolution width, height\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenderResolution in module rhinoscript.document:\r\n\r\nRenderResolution(resolution=None) |      Returns or sets the render resolution\r\n        Parameters:\r\n          resolution[opt] = width and height of render\r\n        Returns:\r\n          if resolution is not specified, the current resolution width,height\r\n          if resolution is specified, the previous resolution width, height","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"RenderSettings","Arguments":["settings=None"],"Signature":"RenderSettings (settings=None)","Description":"Returns or sets render settings\r\n        ","ArgumentDesc":"\r\nsettings[opt] = render settings to modify.\r\n  0=none,\r\n  1=create shadows,\r\n  2=use lights on layers that are off,\r\n  4=render curves and isocurves,\r\n  8=render dimensions and text\r\n        ","Returns":"\r\nif settings are not specified, the current render settings\r\nif settings are specified, the previous render settings\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenderSettings in module rhinoscript.document:\r\n\r\nRenderSettings(settings=None) |      Returns or sets render settings\r\n        Parameters:\r\n          settings[opt] = render settings to modify.\r\n            0=none,\r\n            1=create shadows,\r\n            2=use lights on layers that are off,\r\n            4=render curves and isocurves,\r\n            8=render dimensions and text\r\n        Returns:\r\n          if settings are not specified, the current render settings\r\n          if settings are specified, the previous render settings","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"UnitAbsoluteTolerance","Arguments":["tolerance=None","in_model_units=True"],"Signature":"UnitAbsoluteTolerance (tolerance=None, in_model_units=True)","Description":"Resturns or sets the document's absolute tolerance. Absolute tolerance\r\n        is measured in drawing units. See Rhino's document properties command\r\n        (Units and Page Units Window) for details\r\n        ","ArgumentDesc":"\r\ntolerance [opt] = the absolute tolerance to set\r\nin_model_units[opt] = Return or modify the document's model units (True)\r\n                      or the document's page units (False)\r\n        ","Returns":"\r\nif tolerance is not specified, the current absolute tolerance\r\nif tolerance is specified, the previous absolute tolerance\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnitAbsoluteTolerance in module rhinoscript.document:\r\n\r\nUnitAbsoluteTolerance(tolerance=None, in_model_units=True) |      Resturns or sets the document's absolute tolerance. Absolute tolerance\r\n        is measured in drawing units. See Rhino's document properties command\r\n        (Units and Page Units Window) for details\r\n        Parameters:\r\n          tolerance [opt] = the absolute tolerance to set\r\n          in_model_units[opt] = Return or modify the document's model units (True)\r\n                                or the document's page units (False)\r\n        Returns:\r\n          if tolerance is not specified, the current absolute tolerance\r\n          if tolerance is specified, the previous absolute tolerance","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"UnitAngleTolerance","Arguments":["angle_tolerance_degrees=None","in_model_units=True"],"Signature":"UnitAngleTolerance (angle_tolerance_degrees=None, in_model_units=True)","Description":"Return or set the document's angle tolerance. Angle tolerance is\r\n        measured in degrees. See Rhino's DocumentProperties command\r\n        (Units and Page Units Window) for details\r\n        ","ArgumentDesc":"\r\nangle_tolerance_degrees [opt] = the angle tolerance to set\r\nin_model_units [opt] = Return or modify the document's model units (True)\r\n                       or the document's page units (False)\r\n        ","Returns":"\r\nif angle_tolerance_degrees is not specified, the current angle tolerance\r\nif angle_tolerance_degrees is specified, the previous angle tolerance\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnitAngleTolerance in module rhinoscript.document:\r\n\r\nUnitAngleTolerance(angle_tolerance_degrees=None, in_model_units=True) |      Return or set the document's angle tolerance. Angle tolerance is\r\n        measured in degrees. See Rhino's DocumentProperties command\r\n        (Units and Page Units Window) for details\r\n        Parameters:\r\n          angle_tolerance_degrees [opt] = the angle tolerance to set\r\n          in_model_units [opt] = Return or modify the document's model units (True)\r\n                                 or the document's page units (False)\r\n        Returns:\r\n          if angle_tolerance_degrees is not specified, the current angle tolerance\r\n          if angle_tolerance_degrees is specified, the previous angle tolerance","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"UnitDistanceDisplayPrecision","Arguments":["precision=None","model_units=True"],"Signature":"UnitDistanceDisplayPrecision (precision=None, model_units=True)","Description":"Return or set the document's distance display precision\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnitDistanceDisplayPrecision in module rhinoscript.document:\r\n\r\nUnitDistanceDisplayPrecision(precision=None, model_units=True) |      Return or set the document's distance display precision","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"UnitRelativeTolerance","Arguments":["relative_tolerance=None","in_model_units=True"],"Signature":"UnitRelativeTolerance (relative_tolerance=None, in_model_units=True)","Description":"Return or set the document's relative tolerance. Relative tolerance\r\n        is measured in percent. See Rhino's DocumentProperties command\r\n        (Units and Page Units Window) for details\r\n        ","ArgumentDesc":"\r\nrelative_tolerance [opt] = the relative tolerance in percent\r\nin_model_units [opt] = Return or modify the document's model units (True)\r\n                       or the document's page units (False)\r\n        ","Returns":"\r\nif relative_tolerance is not specified, the current tolerance in percent\r\nif relative_tolerance is specified, the previous tolerance in percent\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnitRelativeTolerance in module rhinoscript.document:\r\n\r\nUnitRelativeTolerance(relative_tolerance=None, in_model_units=True) |      Return or set the document's relative tolerance. Relative tolerance\r\n        is measured in percent. See Rhino's DocumentProperties command\r\n        (Units and Page Units Window) for details\r\n        Parameters:\r\n          relative_tolerance [opt] = the relative tolerance in percent\r\n          in_model_units [opt] = Return or modify the document's model units (True)\r\n                                 or the document's page units (False)\r\n        Returns:\r\n          if relative_tolerance is not specified, the current tolerance in percent\r\n          if relative_tolerance is specified, the previous tolerance in percent","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"UnitScale","Arguments":["to_system","from_system=None"],"Signature":"UnitScale (to_system, from_system=None)","Description":"Return the scale factor for changing between unit systems.\r\n      ","ArgumentDesc":"\r\nto_system = The unit system to convert to. The unit systems are are:\r\n   0 - No unit system\r\n   1 - Microns (1.0e-6 meters)\r\n   2 - Millimeters (1.0e-3 meters)\r\n   3 - Centimeters (1.0e-2 meters)\r\n   4 - Meters\r\n   5 - Kilometers (1.0e+3 meters)\r\n   6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n   7 - Mils (2.54e-5 meters, 0.001 inches)\r\n   8 - Inches (0.0254 meters)\r\n   9 - Feet (0.3408 meters, 12 inches)\r\n  10 - Miles (1609.344 meters, 5280 feet)\r\n  11 - *Reserved for custom Unit System*\r\n  12 - Angstroms (1.0e-10 meters)\r\n  13 - Nanometers (1.0e-9 meters)\r\n  14 - Decimeters (1.0e-1 meters)\r\n  15 - Dekameters (1.0e+1 meters)\r\n  16 - Hectometers (1.0e+2 meters)\r\n  17 - Megameters (1.0e+6 meters)\r\n  18 - Gigameters (1.0e+9 meters)\r\n  19 - Yards (0.9144  meters, 36 inches)\r\n  20 - Printer point (1/72 inches, computer points)\r\n  21 - Printer pica (1/6 inches, (computer picas)\r\n  22 - Nautical mile (1852 meters)\r\n  23 - Astronomical (1.4959787e+11)\r\n  24 - Lightyears (9.46073e+15 meters)\r\n  25 - Parsecs (3.08567758e+16)\r\nfrom_system [opt] = the unit system to convert from (see above). If omitted,\r\n    the document's current unit system is used\r\n      ","Returns":"\r\nscale factor for changing between unit systems\r\n      \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnitScale in module rhinoscript.document:\r\n\r\nUnitScale(to_system, from_system=None) |      Return the scale factor for changing between unit systems.\r\n      Parameters:\r\n        to_system = The unit system to convert to. The unit systems are are:\r\n           0 - No unit system\r\n           1 - Microns (1.0e-6 meters)\r\n           2 - Millimeters (1.0e-3 meters)\r\n           3 - Centimeters (1.0e-2 meters)\r\n           4 - Meters\r\n           5 - Kilometers (1.0e+3 meters)\r\n           6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n           7 - Mils (2.54e-5 meters, 0.001 inches)\r\n           8 - Inches (0.0254 meters)\r\n           9 - Feet (0.3408 meters, 12 inches)\r\n          10 - Miles (1609.344 meters, 5280 feet)\r\n          11 - *Reserved for custom Unit System*\r\n          12 - Angstroms (1.0e-10 meters)\r\n          13 - Nanometers (1.0e-9 meters)\r\n          14 - Decimeters (1.0e-1 meters)\r\n          15 - Dekameters (1.0e+1 meters)\r\n          16 - Hectometers (1.0e+2 meters)\r\n          17 - Megameters (1.0e+6 meters)\r\n          18 - Gigameters (1.0e+9 meters)\r\n          19 - Yards (0.9144  meters, 36 inches)\r\n          20 - Printer point (1/72 inches, computer points)\r\n          21 - Printer pica (1/6 inches, (computer picas)\r\n          22 - Nautical mile (1852 meters)\r\n          23 - Astronomical (1.4959787e+11)\r\n          24 - Lightyears (9.46073e+15 meters)\r\n          25 - Parsecs (3.08567758e+16)\r\n        from_system [opt] = the unit system to convert from (see above). If omitted,\r\n            the document's current unit system is used\r\n      Returns:\r\n        scale factor for changing between unit systems","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"UnitSystem","Arguments":["unit_system=None","scale=False","in_model_units=True"],"Signature":"UnitSystem (unit_system=None, scale=False, in_model_units=True)","Description":"Return or set the document's unit system. See Rhino's DocumentProperties\r\n        command (Units and Page Units Window) for details\r\n        ","ArgumentDesc":"\r\n          unit_system = The unit system to set the document to. The unit systems are:\r\n             0 - No unit system\r\n             1 - Microns (1.0e-6 meters)\r\n             2 - Millimeters (1.0e-3 meters)\r\n             3 - Centimeters (1.0e-2 meters)\r\n             4 - Meters\r\n             5 - Kilometers (1.0e+3 meters)\r\n             6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n             7 - Mils (2.54e-5 meters, 0.001 inches)\r\n             8 - Inches (0.0254 meters)\r\n             9 - Feet (0.3408 meters, 12 inches)\r\n            10 - Miles (1609.344 meters, 5280 feet)\r\n            11 - *Reserved for custom Unit System*\r\n            12 - Angstroms (1.0e-10 meters)\r\n            13 - Nanometers (1.0e-9 meters)\r\n            14 - Decimeters (1.0e-1 meters)\r\n            15 - Dekameters (1.0e+1 meters)\r\n            16 - Hectometers (1.0e+2 meters)\r\n            17 - Megameters (1.0e+6 meters)\r\n            18 - Gigameters (1.0e+9 meters)\r\n            19 - Yards (0.9144  meters, 36 inches)\r\n            20 - Printer point (1/72 inches, computer points)\r\n            21 - Printer pica (1/6 inches, (computer picas)\r\n            22 - Nautical mile (1852 meters)\r\n            23 - Astronomical (1.4959787e+11)\r\n            24 - Lightyears (9.46073e+15 meters)\r\n            25 - Parsecs (3.08567758e+16)\r\n          scale [opt] = Scale existing geometry based on the new unit system.\r\n              If not specified, any existing geometry is not scaled (False)\r\n          in_model_units [opt] = Return or modify the document's model units (True)\r\n              or the document's page units (False). The default is True.\r\n        Returns:\r\n          if unit_system is not specified, the current unit system\r\n          if unit_system is specified, the previous unit system\r\n          None on error\r\n        \r\nHelp on UnitSystem in module __builtin__\r\n\r\n    Provides enumerated values for several unit systems.\r\n    \r\n    enum UnitSystem, values: Angstroms (12), Astronomical (23), Centimeters (3), CustomUnitSystem (11), Decimeters (14), Dekameters (15), Feet (9), Gigameters (18), Hectometers (16), Inches (8), Kilometers (5), Lightyears (24), Megameters (17), Meters (4), Microinches (6), Microns (1), Miles (10), Millimeters (2), Mils (7), Nanometers (13), NauticalMile (22), None (0), Parsecs (25), PrinterPica (21), PrinterPoint (20), Yards (19)\r\n    \r\n    \r\n    \r\nData and other attributes defined here:\r\n\r\n    MemberwiseClone(...)\r\n            MemberwiseClone(self: object) -> object\r\n            \r\n                Creates a shallow copy of the current System.Object.\r\n                ","Returns":"A shallow copy of the current System.Object.\r\n           MemberwiseClone(self: PythonType_1$1) -> object\r\n           MemberwiseClone(self: Object_2$2) -> object\r\n           MemberwiseClone(self: GetObject_3$3) -> object\r\n           MemberwiseClone(self: PythonProperty_4$4) -> object\r\n           MemberwiseClone(self: PythonDictionary_5$5) -> object\r\n           MemberwiseClone(self: PythonTuple_6$6) -> object\r\n           MemberwiseClone(self: _IOBase_7$7) -> object\r\n           MemberwiseClone(self: _RawIOBase_8$8) -> object\r\n           MemberwiseClone(self: _BufferedIOBase_9$9) -> object\r\n           MemberwiseClone(self: _TextIOBase_10$10) -> object\r\n            \r\n   __eq__(...)\r\n           x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y\r\n   __format__(...)\r\n           __format__(formattable: IFormattable, format: str) -> str\r\n            \r\n   __ge__(...)\r\n           __ge__[UnitSystem](y: object, x: UnitSystem) -> object\r\n           __ge__[UnitSystem](x: UnitSystem, y: object) -> object\r\n           __ge__[UnitSystem](x: UnitSystem, y: UnitSystem) -> bool\r\n            \r\n   __gt__(...)\r\n           x.__gt__(y) <==> x>yx.__gt__(y) <==> x>yx.__gt__(y) <==> x>y\r\n   __le__(...)\r\n           __le__[UnitSystem](y: object, x: UnitSystem) -> object\r\n           __le__[UnitSystem](x: UnitSystem, y: object) -> object\r\n           __le__[UnitSystem](x: UnitSystem, y: UnitSystem) -> bool\r\n            \r\n   __lt__(...)\r\n           x.__lt__(y) <==> x<yx.__lt__(y) <==> x<yx.__lt__(y) <==> x<y\r\n   __ne__(...)\r\n           __ne__[UnitSystem](y: object, x: UnitSystem) -> object\r\n           __ne__[UnitSystem](x: UnitSystem, y: object) -> object\r\n           __ne__[UnitSystem](x: UnitSystem, y: UnitSystem) -> bool\r\n            \r\n   __reduce_ex__(...)\r\n           helper for pickle\r\n   __str__(...)\r\n           x.__str__() <==> str(x)\r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnitSystem in module rhinoscript.document:\r\n\r\nUnitSystem(unit_system=None, scale=False, in_model_units=True) |      Return or set the document's unit system. See Rhino's DocumentProperties\r\n        command (Units and Page Units Window) for details\r\n        Parameters:\r\n          unit_system = The unit system to set the document to. The unit systems are:\r\n             0 - No unit system\r\n             1 - Microns (1.0e-6 meters)\r\n             2 - Millimeters (1.0e-3 meters)\r\n             3 - Centimeters (1.0e-2 meters)\r\n             4 - Meters\r\n             5 - Kilometers (1.0e+3 meters)\r\n             6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n             7 - Mils (2.54e-5 meters, 0.001 inches)\r\n             8 - Inches (0.0254 meters)\r\n             9 - Feet (0.3408 meters, 12 inches)\r\n            10 - Miles (1609.344 meters, 5280 feet)\r\n            11 - *Reserved for custom Unit System*\r\n            12 - Angstroms (1.0e-10 meters)\r\n            13 - Nanometers (1.0e-9 meters)\r\n            14 - Decimeters (1.0e-1 meters)\r\n            15 - Dekameters (1.0e+1 meters)\r\n            16 - Hectometers (1.0e+2 meters)\r\n            17 - Megameters (1.0e+6 meters)\r\n            18 - Gigameters (1.0e+9 meters)\r\n            19 - Yards (0.9144  meters, 36 inches)\r\n            20 - Printer point (1/72 inches, computer points)\r\n            21 - Printer pica (1/6 inches, (computer picas)\r\n            22 - Nautical mile (1852 meters)\r\n            23 - Astronomical (1.4959787e+11)\r\n            24 - Lightyears (9.46073e+15 meters)\r\n            25 - Parsecs (3.08567758e+16)\r\n          scale [opt] = Scale existing geometry based on the new unit system.\r\n              If not specified, any existing geometry is not scaled (False)\r\n          in_model_units [opt] = Return or modify the document's model units (True)\r\n              or the document's page units (False). The default is True.\r\n        Returns:\r\n          if unit_system is not specified, the current unit system\r\n          if unit_system is specified, the previous unit system\r\n          None on error\r\n        \r\nHelp on UnitSystem in module __builtin__\r\n\r\n    Provides enumerated values for several unit systems.\r\n    \r\n    enum UnitSystem, values: Angstroms (12), Astronomical (23), Centimeters (3), CustomUnitSystem (11), Decimeters (14), Dekameters (15), Feet (9), Gigameters (18), Hectometers (16), Inches (8), Kilometers (5), Lightyears (24), Megameters (17), Meters (4), Microinches (6), Microns (1), Miles (10), Millimeters (2), Mils (7), Nanometers (13), NauticalMile (22), None (0), Parsecs (25), PrinterPica (21), PrinterPoint (20), Yards (19)\r\n    \r\n    \r\n    \r\nData and other attributes defined here:\r\n\r\n    MemberwiseClone(...)\r\n            MemberwiseClone(self: object) -> object\r\n            \r\n                Creates a shallow copy of the current System.Object.\r\n                Returns: A shallow copy of the current System.Object.\r\n            MemberwiseClone(self: PythonType_1$1) -> object\r\n            MemberwiseClone(self: Object_2$2) -> object\r\n            MemberwiseClone(self: GetObject_3$3) -> object\r\n            MemberwiseClone(self: PythonProperty_4$4) -> object\r\n            MemberwiseClone(self: PythonDictionary_5$5) -> object\r\n            MemberwiseClone(self: PythonTuple_6$6) -> object\r\n            MemberwiseClone(self: _IOBase_7$7) -> object\r\n            MemberwiseClone(self: _RawIOBase_8$8) -> object\r\n            MemberwiseClone(self: _BufferedIOBase_9$9) -> object\r\n            MemberwiseClone(self: _TextIOBase_10$10) -> object\r\n            \r\n    __eq__(...)\r\n            x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y\r\n    __format__(...)\r\n            __format__(formattable: IFormattable, format: str) -> str\r\n            \r\n    __ge__(...)\r\n            __ge__[UnitSystem](y: object, x: UnitSystem) -> object\r\n            __ge__[UnitSystem](x: UnitSystem, y: object) -> object\r\n            __ge__[UnitSystem](x: UnitSystem, y: UnitSystem) -> bool\r\n            \r\n    __gt__(...)\r\n            x.__gt__(y) <==> x>yx.__gt__(y) <==> x>yx.__gt__(y) <==> x>y\r\n    __le__(...)\r\n            __le__[UnitSystem](y: object, x: UnitSystem) -> object\r\n            __le__[UnitSystem](x: UnitSystem, y: object) -> object\r\n            __le__[UnitSystem](x: UnitSystem, y: UnitSystem) -> bool\r\n            \r\n    __lt__(...)\r\n            x.__lt__(y) <==> x<yx.__lt__(y) <==> x<yx.__lt__(y) <==> x<y\r\n    __ne__(...)\r\n            __ne__[UnitSystem](y: object, x: UnitSystem) -> object\r\n            __ne__[UnitSystem](x: UnitSystem, y: object) -> object\r\n            __ne__[UnitSystem](x: UnitSystem, y: UnitSystem) -> bool\r\n            \r\n    __reduce_ex__(...)\r\n            helper for pickle\r\n    __str__(...)\r\n            x.__str__() <==> str(x)","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"document","Name":"UnitSystemName","Arguments":["capitalize=False","singular=True","abbreviate=False","model_units=True"],"Signature":"UnitSystemName (capitalize=False, singular=True, abbreviate=False, model_units=True)","Description":"Returns the name of the current unit system\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnitSystemName in module rhinoscript.document:\r\n\r\nUnitSystemName(capitalize=False, singular=True, abbreviate=False, model_units=True) |      Returns the name of the current unit system","SuccessLevel":1,"IsDocStringWellFormed":false}]},{"ModuleName":"geometry","functions":[{"ModuleName":"geometry","Name":"AddClippingPlane","Arguments":["plane","u_magnitude","v_magnitude","views=None"],"Signature":"AddClippingPlane (plane, u_magnitude, v_magnitude, views=None)","Description":"Create a clipping plane for visibly clipping away geometry in a specific\r\n        view. Note, clipping planes are infinite\r\n        ","ArgumentDesc":"\r\nplane = the plane\r\nu_magnitude, v_magnitude = size of the plane\r\nviews[opt]= Titles or ids the the view(s) to clip. If omitted, the active\r\n  view is used.\r\n        ","Returns":"\r\nobject identifier on success\r\nNone on failure  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddClippingPlane in module rhinoscript.geometry:\r\n\r\nAddClippingPlane(plane, u_magnitude, v_magnitude, views=None) |      Create a clipping plane for visibly clipping away geometry in a specific\r\n        view. Note, clipping planes are infinite\r\n        Parameters:\r\n          plane = the plane\r\n          u_magnitude, v_magnitude = size of the plane\r\n          views[opt]= Titles or ids the the view(s) to clip. If omitted, the active\r\n            view is used.\r\n        Returns:\r\n          object identifier on success\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"AddPictureFrame","Arguments":["plane","filename","width=0.0","height=0.0","self_illumination=True","embed=False","use_alpha=False","make_mesh=False"],"Signature":"AddPictureFrame (plane, filename, width=0.0, height=0.0, self_illumination=True, embed=False, use_alpha=False, make_mesh=False)","Description":"Creates a picture frame and adds it to the document.\r\n      ","ArgumentDesc":"\r\n  plane = The plane in which the PictureFrame will be created.  The bottom-left corner of picture will be at plane's origin. The width will be in the plane's X axis direction, and the height will be in the plane's Y axis direction.\r\n  filename = The path to a bitmap or image file.\r\n  width = If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\n  height =  If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\n  self_illumination =  If True, then the image mapped to the picture frame plane always displays at full intensity and is not affected by light or shadow.\r\n  embed = If True, then the function adds the image to Rhino's internal bitmap table, thus making the document self-contained.\r\n  use_alpha = If False, the picture frame is created without any transparency texture.  If True, a transparency texture is created with a \"mask texture\" set to alpha, and an instance of the diffuse texture in the source texture slot.\r\n  make_mesh = If True, the function will make a PictureFrame object from a mesh rather than a plane surface.\r\nReterns:\r\n  object identifier on success\r\n  None on failure\r\n      \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPictureFrame in module rhinoscript.geometry:\r\n\r\nAddPictureFrame(plane, filename, width=0.0, height=0.0, self_illumination=True, embed=False, use_alpha=False, make_mesh=False) |      Creates a picture frame and adds it to the document.\r\n      Parameters:\r\n        plane = The plane in which the PictureFrame will be created.  The bottom-left corner of picture will be at plane's origin. The width will be in the plane's X axis direction, and the height will be in the plane's Y axis direction.\r\n        filename = The path to a bitmap or image file.\r\n        width = If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\n        height =  If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\n        self_illumination =  If True, then the image mapped to the picture frame plane always displays at full intensity and is not affected by light or shadow.\r\n        embed = If True, then the function adds the image to Rhino's internal bitmap table, thus making the document self-contained.\r\n        use_alpha = If False, the picture frame is created without any transparency texture.  If True, a transparency texture is created with a \"mask texture\" set to alpha, and an instance of the diffuse texture in the source texture slot.\r\n        make_mesh = If True, the function will make a PictureFrame object from a mesh rather than a plane surface.\r\n      Reterns:\r\n        object identifier on success\r\n        None on failure","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"AddPoint","Arguments":["point","y=None","z=None"],"Signature":"AddPoint (point, y=None, z=None)","Description":"Adds point object to the document\r\n        ","ArgumentDesc":"\r\npoint = x,y,z location of point to add\r\n        ","Returns":"\r\nGuid for the object that was added to the doc\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPoint in module rhinoscript.geometry:\r\n\r\nAddPoint(point, y=None, z=None) |      Adds point object to the document\r\n        Parameters:\r\n          point = x,y,z location of point to add\r\n        Returns:\r\n          Guid for the object that was added to the doc","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"AddPointCloud","Arguments":["points","colors=None"],"Signature":"AddPointCloud (points, colors=None)","Description":"Adds point cloud object to the document\r\n        ","ArgumentDesc":"\r\npoints = list of values where every multiple of three represents a point\r\ncolors[opt] = list of colors to apply to each point\r\n        ","Returns":"\r\nidentifier of point cloud on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPointCloud in module rhinoscript.geometry:\r\n\r\nAddPointCloud(points, colors=None) |      Adds point cloud object to the document\r\n        Parameters:\r\n          points = list of values where every multiple of three represents a point\r\n          colors[opt] = list of colors to apply to each point\r\n        Returns:\r\n          identifier of point cloud on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"AddPoints","Arguments":["points"],"Signature":"AddPoints (points)","Description":"Adds one or more point objects to the document\r\n        ","ArgumentDesc":"\r\npoints = list of points\r\n        ","Returns":"\r\nlist of Guid identifiers of the new objects on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPoints in module rhinoscript.geometry:\r\n\r\nAddPoints(points) |      Adds one or more point objects to the document\r\n        Parameters:\r\n          points = list of points\r\n        Returns:\r\n          list of Guid identifiers of the new objects on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"AddText","Arguments":["text","point_or_plane","height=1.0","font='Arial'","font_style=0","justification=None"],"Signature":"AddText (text, point_or_plane, height=1.0, font='Arial', font_style=0, justification=None)","Description":"Adds a text string to the document\r\n        ","ArgumentDesc":"\r\ntext = the text to display\r\npoint_or_plane = a 3-D point or the plane on which the text will lie.\r\n    The origin of the plane will be the origin point of the text\r\nheight [opt] = the text height\r\nfont [opt] = the text font\r\nfont_style[opt] = any of the following flags\r\n   0 = normal\r\n   1 = bold\r\n   2 = italic\r\n   3 = bold and italic\r\njustification[opt] = text justification (see help for values)\r\n        ","Returns":"\r\nGuid for the object that was added to the doc on success\r\nNone on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddText in module rhinoscript.geometry:\r\n\r\nAddText(text, point_or_plane, height=1.0, font='Arial', font_style=0, justification=None) |      Adds a text string to the document\r\n        Parameters:\r\n          text = the text to display\r\n          point_or_plane = a 3-D point or the plane on which the text will lie.\r\n              The origin of the plane will be the origin point of the text\r\n          height [opt] = the text height\r\n          font [opt] = the text font\r\n          font_style[opt] = any of the following flags\r\n             0 = normal\r\n             1 = bold\r\n             2 = italic\r\n             3 = bold and italic\r\n          justification[opt] = text justification (see help for values)\r\n        Returns:\r\n          Guid for the object that was added to the doc on success\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"AddTextDot","Arguments":["text","point"],"Signature":"AddTextDot (text, point)","Description":"Add a text dot to the document.\r\n        ","ArgumentDesc":"\r\ntext = string in dot\r\npoint = A 3D point identifying the origin point.\r\n        ","Returns":"\r\nThe identifier of the new object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddTextDot in module rhinoscript.geometry:\r\n\r\nAddTextDot(text, point) |      Add a text dot to the document.\r\n        Parameters:\r\n          text = string in dot\r\n          point = A 3D point identifying the origin point.\r\n        Returns:\r\n          The identifier of the new object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"Area","Arguments":["object_id"],"Signature":"Area (object_id)","Description":"Compute the area of a closed curve, hatch, surface, polysurface, or mesh\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Area in module rhinoscript.geometry:\r\n\r\nArea(object_id) |      Compute the area of a closed curve, hatch, surface, polysurface, or mesh","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"BoundingBox","Arguments":["objects","view_or_plane=None","in_world_coords=True"],"Signature":"BoundingBox (objects, view_or_plane=None, in_world_coords=True)","Description":"Returns either world axis-aligned or a construction plane axis-aligned\r\n        bounding box of an object or of several objects\r\n        ","ArgumentDesc":"\r\nobjects = The identifiers of the objects\r\nview_or_plane[opt] = Title or id of the view that contains the\r\n    construction plane to which the bounding box should be aligned -or-\r\n    user defined plane. If omitted, a world axis-aligned bounding box\r\n    will be calculated\r\nin_world_coords[opt] = return the bounding box as world coordinates or\r\n    construction plane coordinates. Note, this option does not apply to\r\n    world axis-aligned bounding boxes.\r\n        ","Returns":"\r\nEight 3D points that define the bounding box. Points returned in counter-\r\nclockwise order starting with the bottom rectangle of the box.\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BoundingBox in module rhinoscript.geometry:\r\n\r\nBoundingBox(objects, view_or_plane=None, in_world_coords=True) |      Returns either world axis-aligned or a construction plane axis-aligned\r\n        bounding box of an object or of several objects\r\n        Parameters:\r\n          objects = The identifiers of the objects\r\n          view_or_plane[opt] = Title or id of the view that contains the\r\n              construction plane to which the bounding box should be aligned -or-\r\n              user defined plane. If omitted, a world axis-aligned bounding box\r\n              will be calculated\r\n          in_world_coords[opt] = return the bounding box as world coordinates or\r\n              construction plane coordinates. Note, this option does not apply to\r\n              world axis-aligned bounding boxes.\r\n        Returns:\r\n          Eight 3D points that define the bounding box. Points returned in counter-\r\n          clockwise order starting with the bottom rectangle of the box.\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"ExplodeText","Arguments":["text_id","delete=False"],"Signature":"ExplodeText (text_id, delete=False)","Description":"Creates outline curves for a given text entity\r\n        ","ArgumentDesc":"\r\ntext_id: identifier of Text object to explode\r\ndelete[opt]: delete the text object after the curves have been created\r\n        ","Returns":"\r\nlist of outline curves\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExplodeText in module rhinoscript.geometry:\r\n\r\nExplodeText(text_id, delete=False) |      Creates outline curves for a given text entity\r\n        Parameters:\r\n          text_id: identifier of Text object to explode\r\n          delete[opt]: delete the text object after the curves have been created\r\n        Returns:\r\n          list of outline curves","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"IsClippingPlane","Arguments":["object_id"],"Signature":"IsClippingPlane (object_id)","Description":"Verifies that an object is a clipping plane object\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\n        ","Returns":"\r\nTrue if the object with a given id is a clipping plane\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsClippingPlane in module rhinoscript.geometry:\r\n\r\nIsClippingPlane(object_id) |      Verifies that an object is a clipping plane object\r\n        Parameters:\r\n          object_id: the object's identifier\r\n        Returns:\r\n          True if the object with a given id is a clipping plane","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"IsPoint","Arguments":["object_id"],"Signature":"IsPoint (object_id)","Description":"Verifies an object is a point object.\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\n        ","Returns":"\r\nTrue if the object with a given id is a point\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPoint in module rhinoscript.geometry:\r\n\r\nIsPoint(object_id) |      Verifies an object is a point object.\r\n        Parameters:\r\n          object_id: the object's identifier\r\n        Returns:\r\n          True if the object with a given id is a point","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"IsPointCloud","Arguments":["object_id"],"Signature":"IsPointCloud (object_id)","Description":"Verifies an object is a point cloud object.\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\n        ","Returns":"\r\nTrue if the object with a given id is a point cloud\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPointCloud in module rhinoscript.geometry:\r\n\r\nIsPointCloud(object_id) |      Verifies an object is a point cloud object.\r\n        Parameters:\r\n          object_id: the object's identifier\r\n        Returns:\r\n          True if the object with a given id is a point cloud","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"IsText","Arguments":["object_id"],"Signature":"IsText (object_id)","Description":"Verifies an object is a text object.\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\n        ","Returns":"\r\nTrue if the object with a given id is a text object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsText in module rhinoscript.geometry:\r\n\r\nIsText(object_id) |      Verifies an object is a text object.\r\n        Parameters:\r\n          object_id: the object's identifier\r\n        Returns:\r\n          True if the object with a given id is a text object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"IsTextDot","Arguments":["object_id"],"Signature":"IsTextDot (object_id)","Description":"Verifies an object is a text dot object.\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\n        ","Returns":"\r\nTrue if the object with a given id is a text dot object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsTextDot in module rhinoscript.geometry:\r\n\r\nIsTextDot(object_id) |      Verifies an object is a text dot object.\r\n        Parameters:\r\n          object_id: the object's identifier\r\n        Returns:\r\n          True if the object with a given id is a text dot object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"PointCloudCount","Arguments":["object_id"],"Signature":"PointCloudCount (object_id)","Description":"Returns the point count of a point cloud object\r\n        ","ArgumentDesc":"\r\nobject_id: the point cloud object's identifier\r\n        ","Returns":"\r\nnumber of points if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCloudCount in module rhinoscript.geometry:\r\n\r\nPointCloudCount(object_id) |      Returns the point count of a point cloud object\r\n        Parameters:\r\n          object_id: the point cloud object's identifier\r\n        Returns:\r\n          number of points if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"PointCloudHasHiddenPoints","Arguments":["object_id"],"Signature":"PointCloudHasHiddenPoints (object_id)","Description":"Verifies that a point cloud has hidden points\r\n        ","ArgumentDesc":"\r\nobject_id: the point cloud object's identifier\r\n        ","Returns":"\r\nTrue if cloud has hidden points, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCloudHasHiddenPoints in module rhinoscript.geometry:\r\n\r\nPointCloudHasHiddenPoints(object_id) |      Verifies that a point cloud has hidden points\r\n        Parameters:\r\n          object_id: the point cloud object's identifier\r\n        Returns:\r\n          True if cloud has hidden points, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"PointCloudHasPointColors","Arguments":["object_id"],"Signature":"PointCloudHasPointColors (object_id)","Description":"Verifies that a point cloud has point colors\r\n        ","ArgumentDesc":"\r\nobject_id: the point cloud object's identifier\r\n        ","Returns":"\r\nTrue if cloud has point colors, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCloudHasPointColors in module rhinoscript.geometry:\r\n\r\nPointCloudHasPointColors(object_id) |      Verifies that a point cloud has point colors\r\n        Parameters:\r\n          object_id: the point cloud object's identifier\r\n        Returns:\r\n          True if cloud has point colors, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"PointCloudHidePoints","Arguments":["object_id","hidden=[]"],"Signature":"PointCloudHidePoints (object_id, hidden=[])","Description":"Returns or modifies the hidden points of a point cloud object\r\n        ","ArgumentDesc":"\r\nobject_id: the point cloud object's identifier\r\nhidden: list of hidden values if you want to hide certain points\r\n        ","Returns":"\r\nList of point cloud hidden states\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCloudHidePoints in module rhinoscript.geometry:\r\n\r\nPointCloudHidePoints(object_id, hidden=[]) |      Returns or modifies the hidden points of a point cloud object\r\n        Parameters:\r\n          object_id: the point cloud object's identifier\r\n          hidden: list of hidden values if you want to hide certain points\r\n        Returns:\r\n          List of point cloud hidden states","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"PointCloudPointColors","Arguments":["object_id","colors=[]"],"Signature":"PointCloudPointColors (object_id, colors=[])","Description":"Returns or modifies the point colors of a point cloud object\r\n        ","ArgumentDesc":"\r\nobject_id: the point cloud object's identifier\r\ncolors: list of color values if you want to adjust colors\r\n        ","Returns":"\r\nList of point cloud colors\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCloudPointColors in module rhinoscript.geometry:\r\n\r\nPointCloudPointColors(object_id, colors=[]) |      Returns or modifies the point colors of a point cloud object\r\n        Parameters:\r\n          object_id: the point cloud object's identifier\r\n          colors: list of color values if you want to adjust colors\r\n        Returns:\r\n          List of point cloud colors","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"PointCloudPoints","Arguments":["object_id"],"Signature":"PointCloudPoints (object_id)","Description":"Returns the points of a point cloud object\r\n        ","ArgumentDesc":"\r\nobject_id: the point cloud object's identifier\r\n        ","Returns":"\r\nlist of points if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCloudPoints in module rhinoscript.geometry:\r\n\r\nPointCloudPoints(object_id) |      Returns the points of a point cloud object\r\n        Parameters:\r\n          object_id: the point cloud object's identifier\r\n        Returns:\r\n          list of points if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"PointCoordinates","Arguments":["object_id","point=None"],"Signature":"PointCoordinates (object_id, point=None)","Description":"Returns or modifies the X, Y, and Z coordinates of a point object\r\n        ","ArgumentDesc":"\r\nobject_id = The identifier of a point object\r\npoint[opt] = A new 3D point location.\r\n        ","Returns":"\r\nIf point is not specified, the current 3-D point location\r\nIf point is specified, the previous 3-D point location\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCoordinates in module rhinoscript.geometry:\r\n\r\nPointCoordinates(object_id, point=None) |      Returns or modifies the X, Y, and Z coordinates of a point object\r\n        Parameters:\r\n          object_id = The identifier of a point object\r\n          point[opt] = A new 3D point location.\r\n        Returns:\r\n          If point is not specified, the current 3-D point location\r\n          If point is specified, the previous 3-D point location","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextDotFont","Arguments":["object_id","fontface=None"],"Signature":"TextDotFont (object_id, fontface=None)","Description":"Returns or modified the font of a text dot\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a text dot object\r\nfontface[opt] = new font face name\r\n        ","Returns":"\r\nIf font is not specified, the current text dot font\r\nIf font is specified, the previous text dot font\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextDotFont in module rhinoscript.geometry:\r\n\r\nTextDotFont(object_id, fontface=None) |      Returns or modified the font of a text dot\r\n        Parameters:\r\n          object_id = identifier of a text dot object\r\n          fontface[opt] = new font face name\r\n        Returns:\r\n          If font is not specified, the current text dot font\r\n          If font is specified, the previous text dot font\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextDotHeight","Arguments":["object_id","height=None"],"Signature":"TextDotHeight (object_id, height=None)","Description":"Returns or modified the font height of a text dot\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a text dot object\r\nheight[opt] = new font height\r\n        ","Returns":"\r\nIf height is not specified, the current text dot height\r\nIf height is specified, the previous text dot height\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextDotHeight in module rhinoscript.geometry:\r\n\r\nTextDotHeight(object_id, height=None) |      Returns or modified the font height of a text dot\r\n        Parameters:\r\n          object_id = identifier of a text dot object\r\n          height[opt] = new font height\r\n        Returns:\r\n          If height is not specified, the current text dot height\r\n          If height is specified, the previous text dot height\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextDotPoint","Arguments":["object_id","point=None"],"Signature":"TextDotPoint (object_id, point=None)","Description":"Returns or modifies the location, or insertion point, on a text dot object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a text dot object\r\npoint[opt] = A new 3D point location.\r\n        ","Returns":"\r\nIf point is not specified, the current 3-D text dot location\r\nIf point is specified, the previous 3-D text dot location\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextDotPoint in module rhinoscript.geometry:\r\n\r\nTextDotPoint(object_id, point=None) |      Returns or modifies the location, or insertion point, on a text dot object\r\n        Parameters:\r\n          object_id = identifier of a text dot object\r\n          point[opt] = A new 3D point location.\r\n        Returns:\r\n          If point is not specified, the current 3-D text dot location\r\n          If point is specified, the previous 3-D text dot location\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextDotText","Arguments":["object_id","text=None"],"Signature":"TextDotText (object_id, text=None)","Description":"Returns or modifies the text on a text dot object\r\n        ","ArgumentDesc":"\r\nobject_id =tThe identifier of a text dot object\r\ntext [opt] = a new string for the dot\r\n        ","Returns":"\r\nIf text is not specified, the current text dot text\r\nIf text is specified, the previous text dot text\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextDotText in module rhinoscript.geometry:\r\n\r\nTextDotText(object_id, text=None) |      Returns or modifies the text on a text dot object\r\n        Parameters:\r\n          object_id =tThe identifier of a text dot object\r\n          text [opt] = a new string for the dot\r\n        Returns:\r\n          If text is not specified, the current text dot text\r\n          If text is specified, the previous text dot text\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextObjectFont","Arguments":["object_id","font=None"],"Signature":"TextObjectFont (object_id, font=None)","Description":"Returns of modifies the font used by a text object\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of a text object\r\nfont [opt] = the new font face name\r\n        ","Returns":"\r\nif a font is not specified, the current font face name\r\nif a font is specified, the previous font face name\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextObjectFont in module rhinoscript.geometry:\r\n\r\nTextObjectFont(object_id, font=None) |      Returns of modifies the font used by a text object\r\n        Parameters:\r\n          object_id = the identifier of a text object\r\n          font [opt] = the new font face name\r\n        Returns:\r\n          if a font is not specified, the current font face name\r\n          if a font is specified, the previous font face name\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextObjectHeight","Arguments":["object_id","height=None"],"Signature":"TextObjectHeight (object_id, height=None)","Description":"Returns or modifies the height of a text object\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of a text object\r\nheight[opt] = the new text height.\r\n        ","Returns":"\r\nif height is not specified, the current text height\r\nif height is specified, the previous text height\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextObjectHeight in module rhinoscript.geometry:\r\n\r\nTextObjectHeight(object_id, height=None) |      Returns or modifies the height of a text object\r\n        Parameters:\r\n          object_id = the identifier of a text object\r\n          height[opt] = the new text height.\r\n        Returns:\r\n          if height is not specified, the current text height\r\n          if height is specified, the previous text height\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextObjectPlane","Arguments":["object_id","plane=None"],"Signature":"TextObjectPlane (object_id, plane=None)","Description":"Returns or modifies the plane used by a text object\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of a text object\r\nplane[opt] = the new text object plane\r\n        ","Returns":"\r\nif a plane is not specified, the current plane if successful\r\nif a plane is specified, the previous plane if successful\r\nNone if not successful, or on Error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextObjectPlane in module rhinoscript.geometry:\r\n\r\nTextObjectPlane(object_id, plane=None) |      Returns or modifies the plane used by a text object\r\n        Parameters:\r\n          object_id = the identifier of a text object\r\n          plane[opt] = the new text object plane\r\n        Returns:\r\n          if a plane is not specified, the current plane if successful\r\n          if a plane is specified, the previous plane if successful\r\n          None if not successful, or on Error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextObjectPoint","Arguments":["object_id","point=None"],"Signature":"TextObjectPoint (object_id, point=None)","Description":"Returns or modifies the location of a text object\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of a text object\r\npoint[opt] = the new text object location\r\n        ","Returns":"\r\nif point is not specified, the 3D point identifying the current location\r\nif point is specified, the 3D point identifying the previous location\r\nNone if not successful, or on Error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextObjectPoint in module rhinoscript.geometry:\r\n\r\nTextObjectPoint(object_id, point=None) |      Returns or modifies the location of a text object\r\n        Parameters:\r\n          object_id = the identifier of a text object\r\n          point[opt] = the new text object location\r\n        Returns:\r\n          if point is not specified, the 3D point identifying the current location\r\n          if point is specified, the 3D point identifying the previous location\r\n          None if not successful, or on Error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextObjectStyle","Arguments":["object_id","style=None"],"Signature":"TextObjectStyle (object_id, style=None)","Description":"Returns or modifies the font style of a text object\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of a text object\r\nstyle [opt] = the font style. Can be any of the following flags\r\n   0 = Normal\r\n   1 = Bold\r\n   2 = Italic\r\n        ","Returns":"\r\nif style is not specified, the current font style\r\nif style is specified, the previous font style\r\nNone if not successful, or on Error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextObjectStyle in module rhinoscript.geometry:\r\n\r\nTextObjectStyle(object_id, style=None) |      Returns or modifies the font style of a text object\r\n        Parameters:\r\n          object_id = the identifier of a text object\r\n          style [opt] = the font style. Can be any of the following flags\r\n             0 = Normal\r\n             1 = Bold\r\n             2 = Italic\r\n        Returns:\r\n          if style is not specified, the current font style\r\n          if style is specified, the previous font style\r\n          None if not successful, or on Error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"geometry","Name":"TextObjectText","Arguments":["object_id","text=None"],"Signature":"TextObjectText (object_id, text=None)","Description":"Returns or modifies the text string of a text object.\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of a text object\r\ntext [opt] = a new text string\r\n        ","Returns":"\r\nif text is not specified, the current string value if successful\r\nif text is specified, the previous string value if successful\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TextObjectText in module rhinoscript.geometry:\r\n\r\nTextObjectText(object_id, text=None) |      Returns or modifies the text string of a text object.\r\n        Parameters:\r\n          object_id = the identifier of a text object\r\n          text [opt] = a new text string\r\n        Returns:\r\n          if text is not specified, the current string value if successful\r\n          if text is specified, the previous string value if successful\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"grips","functions":[{"ModuleName":"grips","Name":"EnableObjectGrips","Arguments":["object_id","enable=True"],"Signature":"EnableObjectGrips (object_id, enable=True)","Description":"Enables or disables an object's grips. For curves and surfaces, these are\r\n        also called control points.\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nenable [opt] = if True, the specified object's grips will be turned on.\r\n  Otherwise, they will be turned off\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EnableObjectGrips in module rhinoscript.grips:\r\n\r\nEnableObjectGrips(object_id, enable=True) |      Enables or disables an object's grips. For curves and surfaces, these are\r\n        also called control points.\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          enable [opt] = if True, the specified object's grips will be turned on.\r\n            Otherwise, they will be turned off","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"GetObjectGrip","Arguments":["message=None","preselect=False","select=False"],"Signature":"GetObjectGrip (message=None, preselect=False, select=False)","Description":"Prompts the user to pick a single object grip\r\n        ","ArgumentDesc":"\r\nmessage [opt] = prompt for picking\r\npreselect [opt] = allow for selection of pre-selected object grip.\r\nselect [opt] = select the picked object grip.\r\n        ","Returns":"\r\ntuple defining a grip record.\r\n  grip_record[0] = identifier of the object that owns the grip\r\n  grip_record[1] = index value of the grip\r\n  grip_record[2] = location of the grip\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetObjectGrip in module rhinoscript.grips:\r\n\r\nGetObjectGrip(message=None, preselect=False, select=False) |      Prompts the user to pick a single object grip\r\n        Parameters:\r\n          message [opt] = prompt for picking\r\n          preselect [opt] = allow for selection of pre-selected object grip.\r\n          select [opt] = select the picked object grip.\r\n        Returns:\r\n          tuple defining a grip record.\r\n            grip_record[0] = identifier of the object that owns the grip\r\n            grip_record[1] = index value of the grip\r\n            grip_record[2] = location of the grip\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"GetObjectGrips","Arguments":["message=None","preselect=False","select=False"],"Signature":"GetObjectGrips (message=None, preselect=False, select=False)","Description":"Prompts user to pick one or more object grips from one or more objects.\r\n        ","ArgumentDesc":"\r\nmessage [opt] = prompt for picking\r\npreselect [opt] = allow for selection of pre-selected object grips\r\nselect [opt] = select the picked object grips\r\n        ","Returns":"\r\nlist containing one or more grip records. Each grip record is a tuple\r\n  grip_record[0] = identifier of the object that owns the grip\r\n  grip_record[1] = index value of the grip\r\n  grip_record[2] = location of the grip\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetObjectGrips in module rhinoscript.grips:\r\n\r\nGetObjectGrips(message=None, preselect=False, select=False) |      Prompts user to pick one or more object grips from one or more objects.\r\n        Parameters:\r\n          message [opt] = prompt for picking\r\n          preselect [opt] = allow for selection of pre-selected object grips\r\n          select [opt] = select the picked object grips\r\n        Returns:\r\n          list containing one or more grip records. Each grip record is a tuple\r\n            grip_record[0] = identifier of the object that owns the grip\r\n            grip_record[1] = index value of the grip\r\n            grip_record[2] = location of the grip\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"NextObjectGrip","Arguments":["object_id","index","direction=0","enable=True"],"Signature":"NextObjectGrip (object_id, index, direction=0, enable=True)","Description":"Returns the next grip index from a specified grip index of an object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nindex = zero based grip index from which to get the next grip index\r\ndirection[opt] = direction to get the next grip index (0=U, 1=V)\r\nenable[opt] = if True, the next grip index found will be selected\r\n        ","Returns":"\r\nindex of the next grip on success, None on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function NextObjectGrip in module rhinoscript.grips:\r\n\r\nNextObjectGrip(object_id, index, direction=0, enable=True) |      Returns the next grip index from a specified grip index of an object\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          index = zero based grip index from which to get the next grip index\r\n          direction[opt] = direction to get the next grip index (0=U, 1=V)\r\n          enable[opt] = if True, the next grip index found will be selected\r\n        Returns:\r\n          index of the next grip on success, None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"ObjectGripCount","Arguments":["object_id"],"Signature":"ObjectGripCount (object_id)","Description":"Returns number of grips owned by an object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        ","Returns":"\r\nnumber of grips if successful\r\nNone on error  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectGripCount in module rhinoscript.grips:\r\n\r\nObjectGripCount(object_id) |      Returns number of grips owned by an object\r\n        Parameters:\r\n          object_id = identifier of the object\r\n        Returns:\r\n          number of grips if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"ObjectGripLocation","Arguments":["object_id","index","point=None"],"Signature":"ObjectGripLocation (object_id, index, point=None)","Description":"Returns or modifies the location of an object's grip\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nindex = index of the grip to either query or modify\r\npoint [opt] = 3D point defining new location of the grip\r\n        ","Returns":"\r\nif point is not specified, the current location of the grip referenced by index\r\nif point is specified, the previous location of the grip referenced by index\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectGripLocation in module rhinoscript.grips:\r\n\r\nObjectGripLocation(object_id, index, point=None) |      Returns or modifies the location of an object's grip\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          index = index of the grip to either query or modify\r\n          point [opt] = 3D point defining new location of the grip\r\n        Returns:\r\n          if point is not specified, the current location of the grip referenced by index\r\n          if point is specified, the previous location of the grip referenced by index\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"ObjectGripLocations","Arguments":["object_id","points=None"],"Signature":"ObjectGripLocations (object_id, points=None)","Description":"Returns or modifies the location of all grips owned by an object. The\r\n        locations of the grips are returned in a list of Point3d with each position\r\n        in the list corresponding to that grip's index. To modify the locations of\r\n        the grips, you must provide a list of points that contain the same number\r\n        of points at grips\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\npoints [opt] = list of 3D points identifying the new grip locations\r\n        ","Returns":"\r\nif points is not specified, the current location of all grips\r\nif points is specified, the previous location of all grips\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectGripLocations in module rhinoscript.grips:\r\n\r\nObjectGripLocations(object_id, points=None) |      Returns or modifies the location of all grips owned by an object. The\r\n        locations of the grips are returned in a list of Point3d with each position\r\n        in the list corresponding to that grip's index. To modify the locations of\r\n        the grips, you must provide a list of points that contain the same number\r\n        of points at grips\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          points [opt] = list of 3D points identifying the new grip locations\r\n        Returns:\r\n          if points is not specified, the current location of all grips\r\n          if points is specified, the previous location of all grips\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"ObjectGripsOn","Arguments":["object_id"],"Signature":"ObjectGripsOn (object_id)","Description":"Verifies that an object's grips are turned on\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        ","Returns":"\r\nTrue or False indcating Grips state\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectGripsOn in module rhinoscript.grips:\r\n\r\nObjectGripsOn(object_id) |      Verifies that an object's grips are turned on\r\n        Parameters:\r\n          object_id = identifier of the object\r\n        Returns:\r\n          True or False indcating Grips state\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"ObjectGripsSelected","Arguments":["object_id"],"Signature":"ObjectGripsSelected (object_id)","Description":"Verifies that an object's grips are turned on and at least one grip\r\n        is selected\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectGripsSelected in module rhinoscript.grips:\r\n\r\nObjectGripsSelected(object_id) |      Verifies that an object's grips are turned on and at least one grip\r\n        is selected\r\n        Parameters:\r\n          object_id = identifier of the object\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"PrevObjectGrip","Arguments":["object_id","index","direction=0","enable=True"],"Signature":"PrevObjectGrip (object_id, index, direction=0, enable=True)","Description":"Returns the prevoius grip index from a specified grip index of an object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nindex = zero based grip index from which to get the previous grip index\r\ndirection[opt] = direction to get the next grip index (0=U, 1=V)\r\nenable[opt] = if True, the next grip index found will be selected\r\n        ","Returns":"\r\nindex of the next grip on success, None on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PrevObjectGrip in module rhinoscript.grips:\r\n\r\nPrevObjectGrip(object_id, index, direction=0, enable=True) |      Returns the prevoius grip index from a specified grip index of an object\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          index = zero based grip index from which to get the previous grip index\r\n          direction[opt] = direction to get the next grip index (0=U, 1=V)\r\n          enable[opt] = if True, the next grip index found will be selected\r\n        Returns:\r\n          index of the next grip on success, None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"SelectObjectGrip","Arguments":["object_id","index"],"Signature":"SelectObjectGrip (object_id, index)","Description":"Selects a single grip owned by an object. If the object's grips are\r\n        not turned on, the grips will not be selected\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nindex = index of the grip to select\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SelectObjectGrip in module rhinoscript.grips:\r\n\r\nSelectObjectGrip(object_id, index) |      Selects a single grip owned by an object. If the object's grips are\r\n        not turned on, the grips will not be selected\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          index = index of the grip to select\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"SelectObjectGrips","Arguments":["object_id"],"Signature":"SelectObjectGrips (object_id)","Description":"Selects an object's grips. If the object's grips are not turned on,\r\n        they will not be selected\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        ","Returns":"\r\nNumber of grips selected on success\r\nNone on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SelectObjectGrips in module rhinoscript.grips:\r\n\r\nSelectObjectGrips(object_id) |      Selects an object's grips. If the object's grips are not turned on,\r\n        they will not be selected\r\n        Parameters:\r\n          object_id = identifier of the object\r\n        Returns:\r\n          Number of grips selected on success\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"SelectedObjectGrips","Arguments":["object_id"],"Signature":"SelectedObjectGrips (object_id)","Description":"Returns a list of grip indices indentifying an object's selected grips\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        ","Returns":"\r\nlist of indices on success\r\nNone on failure or if no grips are selected\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SelectedObjectGrips in module rhinoscript.grips:\r\n\r\nSelectedObjectGrips(object_id) |      Returns a list of grip indices indentifying an object's selected grips\r\n        Parameters:\r\n          object_id = identifier of the object\r\n        Returns:\r\n          list of indices on success\r\n          None on failure or if no grips are selected","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"UnselectObjectGrip","Arguments":["object_id","index"],"Signature":"UnselectObjectGrip (object_id, index)","Description":"Unselects a single grip owned by an object. If the object's grips are\r\n        not turned on, the grips will not be unselected\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nindex = index of the grip to unselect\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnselectObjectGrip in module rhinoscript.grips:\r\n\r\nUnselectObjectGrip(object_id, index) |      Unselects a single grip owned by an object. If the object's grips are\r\n        not turned on, the grips will not be unselected\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          index = index of the grip to unselect\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"grips","Name":"UnselectObjectGrips","Arguments":["object_id"],"Signature":"UnselectObjectGrips (object_id)","Description":"Unselects an object's grips. Note, the grips will not be turned off.\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\n        ","Returns":"\r\nNumber of grips unselected on success\r\nNone on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnselectObjectGrips in module rhinoscript.grips:\r\n\r\nUnselectObjectGrips(object_id) |      Unselects an object's grips. Note, the grips will not be turned off.\r\n        Parameters:\r\n          object_id = identifier of the object\r\n        Returns:\r\n          Number of grips unselected on success\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"group","functions":[{"ModuleName":"group","Name":"AddGroup","Arguments":["group_name=None"],"Signature":"AddGroup (group_name=None)","Description":"Adds a new empty group to the document\r\n        ","ArgumentDesc":"\r\ngroup_name[opt] = name of the new group. If omitted, rhino automatically\r\n    generates the group name\r\n        ","Returns":"\r\nname of the new group if successful\r\nNone is not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddGroup in module rhinoscript.group:\r\n\r\nAddGroup(group_name=None) |      Adds a new empty group to the document\r\n        Parameters:\r\n          group_name[opt] = name of the new group. If omitted, rhino automatically\r\n              generates the group name\r\n        Returns:\r\n          name of the new group if successful\r\n          None is not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"AddObjectToGroup","Arguments":["object_id","group_name"],"Signature":"AddObjectToGroup (object_id, group_name)","Description":"Adds a single object to an existing group.\r\n        ","ArgumentDesc":"\r\nobject_id = String or Guid representing the object identifier\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nTrue or False representing success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddObjectToGroup in module rhinoscript.group:\r\n\r\nAddObjectToGroup(object_id, group_name) |      Adds a single object to an existing group.\r\n        Parameters:\r\n          object_id = String or Guid representing the object identifier\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          True or False representing success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"AddObjectsToGroup","Arguments":["object_ids","group_name"],"Signature":"AddObjectsToGroup (object_ids, group_name)","Description":"Adds one or more objects to an existing group.\r\n        ","ArgumentDesc":"\r\nobject_ids = list of Strings or Guids representing the object identifiers\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nnumber of objects added to the group\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddObjectsToGroup in module rhinoscript.group:\r\n\r\nAddObjectsToGroup(object_ids, group_name) |      Adds one or more objects to an existing group.\r\n        Parameters:\r\n          object_ids = list of Strings or Guids representing the object identifiers\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          number of objects added to the group","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"DeleteGroup","Arguments":["group_name"],"Signature":"DeleteGroup (group_name)","Description":"Removes an existing group from the document. Reference groups cannot be\r\n        removed. Deleting a group does not delete the member objects\r\n        ","ArgumentDesc":"\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nTrue or False representing success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteGroup in module rhinoscript.group:\r\n\r\nDeleteGroup(group_name) |      Removes an existing group from the document. Reference groups cannot be\r\n        removed. Deleting a group does not delete the member objects\r\n        Parameters:\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          True or False representing success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"HideGroup","Arguments":["group_name"],"Signature":"HideGroup (group_name)","Description":"Hides a group of objects. Hidden objects are not visible, cannot be\r\n        snapped to, and cannot be selected\r\n        ","ArgumentDesc":"\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nThe number of objects that were hidden\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HideGroup in module rhinoscript.group:\r\n\r\nHideGroup(group_name) |      Hides a group of objects. Hidden objects are not visible, cannot be\r\n        snapped to, and cannot be selected\r\n        Parameters:\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          The number of objects that were hidden","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"IsGroup","Arguments":["group_name"],"Signature":"IsGroup (group_name)","Description":"Verifies the existance of a group\r\n        Paramters:\r\n          group_name = the name of the group to check for\r\n        Returns:\r\n          True or False\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsGroup in module rhinoscript.group:\r\n\r\nIsGroup(group_name) |      Verifies the existance of a group\r\n        Paramters:\r\n          group_name = the name of the group to check for\r\n        Returns:\r\n          True or False","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"IsGroupEmpty","Arguments":["group_name"],"Signature":"IsGroupEmpty (group_name)","Description":"Verifies that an existing group is empty, or contains no object members\r\n        ","ArgumentDesc":"\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nTrue or False if group_name exists\r\nNone if group_name does not exist\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsGroupEmpty in module rhinoscript.group:\r\n\r\nIsGroupEmpty(group_name) |      Verifies that an existing group is empty, or contains no object members\r\n        Parameters:\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          True or False if group_name exists\r\n          None if group_name does not exist","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"LockGroup","Arguments":["group_name"],"Signature":"LockGroup (group_name)","Description":"Locks a group of objects. Locked objects are visible and they can be\r\n        snapped to. But, they cannot be selected\r\n        ","ArgumentDesc":"\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nNumber of objects that were locked if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LockGroup in module rhinoscript.group:\r\n\r\nLockGroup(group_name) |      Locks a group of objects. Locked objects are visible and they can be\r\n        snapped to. But, they cannot be selected\r\n        Parameters:\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          Number of objects that were locked if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"RemoveObjectFromAllGroups","Arguments":["object_id"],"Signature":"RemoveObjectFromAllGroups (object_id)","Description":"Removes a single object from any and all groups that it is a member.\r\n        Neither the object nor the group can be reference objects\r\n        ","ArgumentDesc":"\r\nobject_id = the object identifier\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RemoveObjectFromAllGroups in module rhinoscript.group:\r\n\r\nRemoveObjectFromAllGroups(object_id) |      Removes a single object from any and all groups that it is a member.\r\n        Neither the object nor the group can be reference objects\r\n        Parameters:\r\n          object_id = the object identifier\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"RemoveObjectFromGroup","Arguments":["object_id","group_name"],"Signature":"RemoveObjectFromGroup (object_id, group_name)","Description":"Remove a single object from an existing group\r\n        ","ArgumentDesc":"\r\nobject_id = the object identifier\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RemoveObjectFromGroup in module rhinoscript.group:\r\n\r\nRemoveObjectFromGroup(object_id, group_name) |      Remove a single object from an existing group\r\n        Parameters:\r\n          object_id = the object identifier\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"RemoveObjectsFromGroup","Arguments":["object_ids","group_name"],"Signature":"RemoveObjectsFromGroup (object_ids, group_name)","Description":"Removes one or more objects from an existing group\r\n        ","ArgumentDesc":"\r\nobject_ids = a list of object identifiers\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nThe number of objects removed from the group is successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RemoveObjectsFromGroup in module rhinoscript.group:\r\n\r\nRemoveObjectsFromGroup(object_ids, group_name) |      Removes one or more objects from an existing group\r\n        Parameters:\r\n          object_ids = a list of object identifiers\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          The number of objects removed from the group is successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"RenameGroup","Arguments":["old_name","new_name"],"Signature":"RenameGroup (old_name, new_name)","Description":"Renames an existing group\r\n        ","ArgumentDesc":"\r\nold_name = the name of an existing group\r\nnew_name = the new group name\r\n        ","Returns":"\r\nthe new group name if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenameGroup in module rhinoscript.group:\r\n\r\nRenameGroup(old_name, new_name) |      Renames an existing group\r\n        Parameters:\r\n          old_name = the name of an existing group\r\n          new_name = the new group name\r\n        Returns:\r\n          the new group name if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"ShowGroup","Arguments":["group_name"],"Signature":"ShowGroup (group_name)","Description":"Shows a group of previously hidden objects. Hidden objects are not\r\n        visible, cannot be snapped to, and cannot be selected\r\n        ","ArgumentDesc":"\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nThe number of objects that were shown if successful\r\nNone on error  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowGroup in module rhinoscript.group:\r\n\r\nShowGroup(group_name) |      Shows a group of previously hidden objects. Hidden objects are not\r\n        visible, cannot be snapped to, and cannot be selected\r\n        Parameters:\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          The number of objects that were shown if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"group","Name":"UnlockGroup","Arguments":["group_name"],"Signature":"UnlockGroup (group_name)","Description":"Unlocks a group of previously locked objects. Lockes objects are visible,\r\n        can be snapped to, but cannot be selected\r\n        ","ArgumentDesc":"\r\ngroup_name = the name of an existing group\r\n        ","Returns":"\r\nThe number of objects that were unlocked if successful\r\nNone on error  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnlockGroup in module rhinoscript.group:\r\n\r\nUnlockGroup(group_name) |      Unlocks a group of previously locked objects. Lockes objects are visible,\r\n        can be snapped to, but cannot be selected\r\n        Parameters:\r\n          group_name = the name of an existing group\r\n        Returns:\r\n          The number of objects that were unlocked if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"hatch","functions":[{"ModuleName":"hatch","Name":"AddHatch","Arguments":["curve_id","hatch_pattern=None","scale=1.0","rotation=0.0"],"Signature":"AddHatch (curve_id, hatch_pattern=None, scale=1.0, rotation=0.0)","Description":"Creates a new hatch object from a closed planar curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the closed planar curve that defines the\r\n    boundary of the hatch object\r\nhatch_pattern[opt] = name of the hatch pattern to be used by the hatch\r\n    object. If omitted, the current hatch pattern will be used\r\nscale[opt] = hatch pattern scale factor\r\nrotation[opt] = hatch pattern rotation angle in degrees.\r\n        ","Returns":"\r\nidentifier of the newly created hatch on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddHatch in module rhinoscript.hatch:\r\n\r\nAddHatch(curve_id, hatch_pattern=None, scale=1.0, rotation=0.0) |      Creates a new hatch object from a closed planar curve object\r\n        Parameters:\r\n          curve_id = identifier of the closed planar curve that defines the\r\n              boundary of the hatch object\r\n          hatch_pattern[opt] = name of the hatch pattern to be used by the hatch\r\n              object. If omitted, the current hatch pattern will be used\r\n          scale[opt] = hatch pattern scale factor\r\n          rotation[opt] = hatch pattern rotation angle in degrees.\r\n        Returns:\r\n          identifier of the newly created hatch on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"AddHatchPatterns","Arguments":["filename","replace=False"],"Signature":"AddHatchPatterns (filename, replace=False)","Description":"Adds hatch patterns to the document by importing hatch pattern definitions\r\n        from a pattern file.\r\n        ","ArgumentDesc":"\r\nfilename = name of the hatch pattern file\r\nreplace[opt] = If hatch pattern names already in the document match hatch\r\n    pattern names in the pattern definition file, then the existing hatch\r\n    patterns will be redefined\r\n        ","Returns":"\r\nNames of the newly added hatch patterns if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddHatchPatterns in module rhinoscript.hatch:\r\n\r\nAddHatchPatterns(filename, replace=False) |      Adds hatch patterns to the document by importing hatch pattern definitions\r\n        from a pattern file.\r\n        Parameters:\r\n          filename = name of the hatch pattern file\r\n          replace[opt] = If hatch pattern names already in the document match hatch\r\n              pattern names in the pattern definition file, then the existing hatch\r\n              patterns will be redefined\r\n        Returns:\r\n          Names of the newly added hatch patterns if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"AddHatches","Arguments":["curve_ids","hatch_pattern=None","scale=1.0","rotation=0.0"],"Signature":"AddHatches (curve_ids, hatch_pattern=None, scale=1.0, rotation=0.0)","Description":"Creates one or more new hatch objects a list of closed planar curves\r\n        ","ArgumentDesc":"\r\ncurve_ids = identifiers of the closed planar curves that defines the\r\n    boundary of the hatch objects\r\nhatch_pattern[opt] = name of the hatch pattern to be used by the hatch\r\n    object. If omitted, the current hatch pattern will be used\r\nscale[opt] = hatch pattern scale factor\r\nrotation[opt] = hatch pattern rotation angle in degrees.\r\n        ","Returns":"\r\nidentifiers of the newly created hatch on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddHatches in module rhinoscript.hatch:\r\n\r\nAddHatches(curve_ids, hatch_pattern=None, scale=1.0, rotation=0.0) |      Creates one or more new hatch objects a list of closed planar curves\r\n        Parameters:\r\n          curve_ids = identifiers of the closed planar curves that defines the\r\n              boundary of the hatch objects\r\n          hatch_pattern[opt] = name of the hatch pattern to be used by the hatch\r\n              object. If omitted, the current hatch pattern will be used\r\n          scale[opt] = hatch pattern scale factor\r\n          rotation[opt] = hatch pattern rotation angle in degrees.\r\n        Returns:\r\n          identifiers of the newly created hatch on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"CurrentHatchPattern","Arguments":["hatch_pattern=None"],"Signature":"CurrentHatchPattern (hatch_pattern=None)","Description":"Returns or sets the current hatch pattern file\r\n        ","ArgumentDesc":"\r\nhatch_pattern[opt] = name of an existing hatch pattern to make current\r\n        ","Returns":"\r\nif hatch_pattern is not specified, the current hatch pattern\r\nif hatch_pattern is specified, the previous hatch pattern\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurrentHatchPattern in module rhinoscript.hatch:\r\n\r\nCurrentHatchPattern(hatch_pattern=None) |      Returns or sets the current hatch pattern file\r\n        Parameters:\r\n          hatch_pattern[opt] = name of an existing hatch pattern to make current\r\n        Returns:\r\n          if hatch_pattern is not specified, the current hatch pattern\r\n          if hatch_pattern is specified, the previous hatch pattern\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"ExplodeHatch","Arguments":["hatch_id","delete=False"],"Signature":"ExplodeHatch (hatch_id, delete=False)","Description":"Explodes a hatch object into its component objects. The exploded objects\r\n        will be added to the document. If the hatch object uses a solid pattern,\r\n        then planar face Brep objects will be created. Otherwise, line curve objects\r\n        will be created\r\n        ","ArgumentDesc":"\r\nhatch_id = identifier of a hatch object\r\ndelete[opt] = delete the hatch object\r\n        ","Returns":"\r\nlist of identifiers for the newly created objects\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExplodeHatch in module rhinoscript.hatch:\r\n\r\nExplodeHatch(hatch_id, delete=False) |      Explodes a hatch object into its component objects. The exploded objects\r\n        will be added to the document. If the hatch object uses a solid pattern,\r\n        then planar face Brep objects will be created. Otherwise, line curve objects\r\n        will be created\r\n        Parameters:\r\n          hatch_id = identifier of a hatch object\r\n          delete[opt] = delete the hatch object\r\n        Returns:\r\n          list of identifiers for the newly created objects\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"HatchPattern","Arguments":["hatch_id","hatch_pattern=None"],"Signature":"HatchPattern (hatch_id, hatch_pattern=None)","Description":"Returns or changes a hatch object's hatch pattern\r\n        Paramters:\r\n          hatch_id = identifier of a hatch object\r\n          hatch_pattern[opt] = name of an existing hatch pattern to replace the\r\n              current hatch pattern\r\n        Returns:\r\n          if hatch_pattern is not specified, the current hatch pattern\r\n          if hatch_pattern is specified, the previous hatch pattern\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HatchPattern in module rhinoscript.hatch:\r\n\r\nHatchPattern(hatch_id, hatch_pattern=None) |      Returns or changes a hatch object's hatch pattern\r\n        Paramters:\r\n          hatch_id = identifier of a hatch object\r\n          hatch_pattern[opt] = name of an existing hatch pattern to replace the\r\n              current hatch pattern\r\n        Returns:\r\n          if hatch_pattern is not specified, the current hatch pattern\r\n          if hatch_pattern is specified, the previous hatch pattern\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"HatchPatternDescription","Arguments":["hatch_pattern"],"Signature":"HatchPatternDescription (hatch_pattern)","Description":"Returns the description of a hatch pattern. Note, not all hatch patterns\r\n        have descriptions\r\n        ","ArgumentDesc":"\r\nhatch_pattern = name of an existing hatch pattern\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HatchPatternDescription in module rhinoscript.hatch:\r\n\r\nHatchPatternDescription(hatch_pattern) |      Returns the description of a hatch pattern. Note, not all hatch patterns\r\n        have descriptions\r\n        Parameters:\r\n          hatch_pattern = name of an existing hatch pattern","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"HatchPatternFillType","Arguments":["hatch_pattern"],"Signature":"HatchPatternFillType (hatch_pattern)","Description":"Returns the fill type of a hatch pattern.\r\n            0 = solid, uses object color\r\n            1 = lines, uses pattern file definition\r\n            2 = gradient, uses fill color definition\r\n        ","ArgumentDesc":"\r\nhatch_pattern = name of an existing hatch pattern\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HatchPatternFillType in module rhinoscript.hatch:\r\n\r\nHatchPatternFillType(hatch_pattern) |      Returns the fill type of a hatch pattern.\r\n            0 = solid, uses object color\r\n            1 = lines, uses pattern file definition\r\n            2 = gradient, uses fill color definition\r\n        Parameters:\r\n          hatch_pattern = name of an existing hatch pattern","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"HatchRotation","Arguments":["hatch_id","rotation=None"],"Signature":"HatchRotation (hatch_id, rotation=None)","Description":"Returns or modifies the rotation applied to the hatch pattern when\r\n        it is mapped to the hatch's plane\r\n        ","ArgumentDesc":"\r\nhatch_id = identifier of a hatch object\r\nrotation[opt] = rotation angle in degrees\r\n        ","Returns":"\r\nif rotation is not defined, the current rotation angle\r\nif rotation is specified, the previous rotation angle\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HatchRotation in module rhinoscript.hatch:\r\n\r\nHatchRotation(hatch_id, rotation=None) |      Returns or modifies the rotation applied to the hatch pattern when\r\n        it is mapped to the hatch's plane\r\n        Parameters:\r\n          hatch_id = identifier of a hatch object\r\n          rotation[opt] = rotation angle in degrees\r\n        Returns:\r\n          if rotation is not defined, the current rotation angle\r\n          if rotation is specified, the previous rotation angle\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"HatchScale","Arguments":["hatch_id","scale=None"],"Signature":"HatchScale (hatch_id, scale=None)","Description":"Returns or modifies the scale applied to the hatch pattern when it is\r\n        mapped to the hatch's plane\r\n        ","ArgumentDesc":"\r\nhatch_id = identifier of a hatch object\r\nscale[opt] = scale factor\r\n        ","Returns":"\r\nif scale is not defined, the current scale factor\r\nif scale is defined, the previous scale factor\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HatchScale in module rhinoscript.hatch:\r\n\r\nHatchScale(hatch_id, scale=None) |      Returns or modifies the scale applied to the hatch pattern when it is\r\n        mapped to the hatch's plane\r\n        Parameters:\r\n          hatch_id = identifier of a hatch object\r\n          scale[opt] = scale factor\r\n        Returns:\r\n          if scale is not defined, the current scale factor\r\n          if scale is defined, the previous scale factor\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"IsHatch","Arguments":["object_id"],"Signature":"IsHatch (object_id)","Description":"Verifies the existence of a hatch object in the document\r\n        Paramters:\r\n          object_id = identifier of an object\r\n        Returns:\r\n          True or False\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsHatch in module rhinoscript.hatch:\r\n\r\nIsHatch(object_id) |      Verifies the existence of a hatch object in the document\r\n        Paramters:\r\n          object_id = identifier of an object\r\n        Returns:\r\n          True or False","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"IsHatchPattern","Arguments":["name"],"Signature":"IsHatchPattern (name)","Description":"Verifies the existence of a hatch pattern in the document\r\n        ","ArgumentDesc":"\r\nname = the name of a hatch pattern\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsHatchPattern in module rhinoscript.hatch:\r\n\r\nIsHatchPattern(name) |      Verifies the existence of a hatch pattern in the document\r\n        Parameters:\r\n          name = the name of a hatch pattern\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"IsHatchPatternCurrent","Arguments":["hatch_pattern"],"Signature":"IsHatchPatternCurrent (hatch_pattern)","Description":"Verifies that a hatch pattern is the current hatch pattern\r\n        ","ArgumentDesc":"\r\nhatch_pattern = name of an existing hatch pattern\r\n        ","Returns":"\r\nTrue or False\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsHatchPatternCurrent in module rhinoscript.hatch:\r\n\r\nIsHatchPatternCurrent(hatch_pattern) |      Verifies that a hatch pattern is the current hatch pattern\r\n        Parameters:\r\n          hatch_pattern = name of an existing hatch pattern\r\n        Returns:\r\n          True or False\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"hatch","Name":"IsHatchPatternReference","Arguments":["hatch_pattern"],"Signature":"IsHatchPatternReference (hatch_pattern)","Description":"Verifies that a hatch pattern is from a reference file\r\n        ","ArgumentDesc":"\r\nhatch_pattern = name of an existing hatch pattern\r\n        ","Returns":"\r\nTrue or False\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsHatchPatternReference in module rhinoscript.hatch:\r\n\r\nIsHatchPatternReference(hatch_pattern) |      Verifies that a hatch pattern is from a reference file\r\n        Parameters:\r\n          hatch_pattern = name of an existing hatch pattern\r\n        Returns:\r\n          True or False\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"layer","functions":[{"ModuleName":"layer","Name":"AddLayer","Arguments":["name=None","color=None","visible=True","locked=False","parent=None"],"Signature":"AddLayer (name=None, color=None, visible=True, locked=False, parent=None)","Description":"Add a new layer to the document\r\n        ","ArgumentDesc":"\r\nname[opt]: The name of the new layer. If omitted, Rhino automatically\r\n    generates the layer name.\r\ncolor[opt]: A Red-Green-Blue color value or System.Drawing.Color. If\r\n    omitted, the color Black is assigned.\r\nvisible[opt]: layer's visibility\r\nlocked[opt]: layer's locked state\r\nparent[opt]: name of the new layer's parent layer. If omitted, the new\r\n    layer will not have a parent layer.\r\n        ","Returns":"\r\nThe full name of the new layer if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddLayer in module rhinoscript.layer:\r\n\r\nAddLayer(name=None, color=None, visible=True, locked=False, parent=None) |      Add a new layer to the document\r\n        Parameters:\r\n          name[opt]: The name of the new layer. If omitted, Rhino automatically\r\n              generates the layer name.\r\n          color[opt]: A Red-Green-Blue color value or System.Drawing.Color. If\r\n              omitted, the color Black is assigned.\r\n          visible[opt]: layer's visibility\r\n          locked[opt]: layer's locked state\r\n          parent[opt]: name of the new layer's parent layer. If omitted, the new\r\n              layer will not have a parent layer.\r\n        Returns:\r\n          The full name of the new layer if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"CurrentLayer","Arguments":["layer=None"],"Signature":"CurrentLayer (layer=None)","Description":"Returns or changes the current layer\r\n        ","ArgumentDesc":"\r\nlayer[opt] = the name or Guid of an existing layer to make current\r\n        ","Returns":"\r\nIf a layer name is not specified, the full name of the current layer\r\nIf a layer name is specified, the full name of the previous current layer\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurrentLayer in module rhinoscript.layer:\r\n\r\nCurrentLayer(layer=None) |      Returns or changes the current layer\r\n        Parameters:\r\n          layer[opt] = the name or Guid of an existing layer to make current\r\n        Returns:\r\n          If a layer name is not specified, the full name of the current layer\r\n          If a layer name is specified, the full name of the previous current layer","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"DeleteLayer","Arguments":["layer"],"Signature":"DeleteLayer (layer)","Description":"Removes an existing layer from the document. The layer to be removed\r\n        cannot be the current layer. Unlike the PurgeLayer method, the layer must\r\n        be empty, or contain no objects, before it can be removed. Any layers that\r\n        are children of the specified layer will also be removed if they are also\r\n        empty.\r\n        ","ArgumentDesc":"\r\nlayer = the name or id of an existing empty layer\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteLayer in module rhinoscript.layer:\r\n\r\nDeleteLayer(layer) |      Removes an existing layer from the document. The layer to be removed\r\n        cannot be the current layer. Unlike the PurgeLayer method, the layer must\r\n        be empty, or contain no objects, before it can be removed. Any layers that\r\n        are children of the specified layer will also be removed if they are also\r\n        empty.\r\n        Parameters:\r\n          layer = the name or id of an existing empty layer\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"ExpandLayer","Arguments":["layer","expand"],"Signature":"ExpandLayer (layer, expand)","Description":"Expands a layer. Expanded layers can be viewed in Rhino's layer dialog\r\n        ","ArgumentDesc":"\r\nlayer = name of the layer to expand\r\nexpand = True to expand, False to collapse\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExpandLayer in module rhinoscript.layer:\r\n\r\nExpandLayer(layer, expand) |      Expands a layer. Expanded layers can be viewed in Rhino's layer dialog\r\n        Parameters:\r\n          layer = name of the layer to expand\r\n          expand = True to expand, False to collapse\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayer","Arguments":["layer"],"Signature":"IsLayer (layer)","Description":"Verifies the existance of a layer in the document\r\n        ","ArgumentDesc":"\r\nlayer = the name or id of a layer to search for\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayer in module rhinoscript.layer:\r\n\r\nIsLayer(layer) |      Verifies the existance of a layer in the document\r\n        Parameters:\r\n          layer = the name or id of a layer to search for","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerChangeable","Arguments":["layer"],"Signature":"IsLayerChangeable (layer)","Description":"Verifies that the objects on a layer can be changed (normal)\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerChangeable in module rhinoscript.layer:\r\n\r\nIsLayerChangeable(layer) |      Verifies that the objects on a layer can be changed (normal)","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerChildOf","Arguments":["layer","test"],"Signature":"IsLayerChildOf (layer, test)","Description":"Verifies that a layer is a child of another layer\r\n        ","ArgumentDesc":"\r\nlayer = the name or id of the layer to test against\r\ntest = the name or id to the layer to test\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerChildOf in module rhinoscript.layer:\r\n\r\nIsLayerChildOf(layer, test) |      Verifies that a layer is a child of another layer\r\n        Parameters:\r\n          layer = the name or id of the layer to test against\r\n          test = the name or id to the layer to test","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerCurrent","Arguments":["layer"],"Signature":"IsLayerCurrent (layer)","Description":"Verifies that a layer is the current layer\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerCurrent in module rhinoscript.layer:\r\n\r\nIsLayerCurrent(layer) |      Verifies that a layer is the current layer","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerEmpty","Arguments":["layer"],"Signature":"IsLayerEmpty (layer)","Description":"Verifies that an existing layer is empty, or contains no objects\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerEmpty in module rhinoscript.layer:\r\n\r\nIsLayerEmpty(layer) |      Verifies that an existing layer is empty, or contains no objects","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerExpanded","Arguments":["layer"],"Signature":"IsLayerExpanded (layer)","Description":"Verifies that a layer is expanded. Expanded layers can be viewed in\r\n        Rhino's layer dialog\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerExpanded in module rhinoscript.layer:\r\n\r\nIsLayerExpanded(layer) |      Verifies that a layer is expanded. Expanded layers can be viewed in\r\n        Rhino's layer dialog","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerLocked","Arguments":["layer"],"Signature":"IsLayerLocked (layer)","Description":"Verifies that a layer is locked.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerLocked in module rhinoscript.layer:\r\n\r\nIsLayerLocked(layer) |      Verifies that a layer is locked.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerOn","Arguments":["layer"],"Signature":"IsLayerOn (layer)","Description":"Verifies that a layer is on.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerOn in module rhinoscript.layer:\r\n\r\nIsLayerOn(layer) |      Verifies that a layer is on.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerParentOf","Arguments":["layer","test"],"Signature":"IsLayerParentOf (layer, test)","Description":"Verifies that a layer is a parent of another layer\r\n        ","ArgumentDesc":"\r\nlayer = the name or id of the layer to test against\r\ntest = the name or id to the layer to test\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerParentOf in module rhinoscript.layer:\r\n\r\nIsLayerParentOf(layer, test) |      Verifies that a layer is a parent of another layer\r\n        Parameters:\r\n          layer = the name or id of the layer to test against\r\n          test = the name or id to the layer to test","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerReference","Arguments":["layer"],"Signature":"IsLayerReference (layer)","Description":"Verifies that a layer is from a reference file.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerReference in module rhinoscript.layer:\r\n\r\nIsLayerReference(layer) |      Verifies that a layer is from a reference file.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerSelectable","Arguments":["layer"],"Signature":"IsLayerSelectable (layer)","Description":"Verifies that an existing layer is selectable (normal and reference)\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerSelectable in module rhinoscript.layer:\r\n\r\nIsLayerSelectable(layer) |      Verifies that an existing layer is selectable (normal and reference)","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"IsLayerVisible","Arguments":["layer"],"Signature":"IsLayerVisible (layer)","Description":"Verifies that a layer is visible (normal, locked, and reference)\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayerVisible in module rhinoscript.layer:\r\n\r\nIsLayerVisible(layer) |      Verifies that a layer is visible (normal, locked, and reference)","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerChildCount","Arguments":["layer"],"Signature":"LayerChildCount (layer)","Description":"Returns the number of immediate child layers of a layer\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerChildCount in module rhinoscript.layer:\r\n\r\nLayerChildCount(layer) |      Returns the number of immediate child layers of a layer","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerChildren","Arguments":["layer"],"Signature":"LayerChildren (layer)","Description":"Returns the immediate child layers of a layer\r\n        ","ArgumentDesc":"\r\nlayer = the name or id of an existing layer\r\n        ","Returns":"\r\nList of children\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerChildren in module rhinoscript.layer:\r\n\r\nLayerChildren(layer) |      Returns the immediate child layers of a layer\r\n        Parameters:\r\n          layer = the name or id of an existing layer\r\n        Returns:\r\n          List of children","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerColor","Arguments":["layer","color=None"],"Signature":"LayerColor (layer, color=None)","Description":"Returns or changes the color of a layer.\r\n        ","ArgumentDesc":"\r\nlayer = name or id of an existing layer\r\ncolor [opt] = the new color value. If omitted, the current layer color is returned.\r\n        ","Returns":"\r\nIf a color value is not specified, the current color value on success\r\nIf a color value is specified, the previous color value on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerColor in module rhinoscript.layer:\r\n\r\nLayerColor(layer, color=None) |      Returns or changes the color of a layer.\r\n        Parameters:\r\n          layer = name or id of an existing layer\r\n          color [opt] = the new color value. If omitted, the current layer color is returned.\r\n        Returns:\r\n          If a color value is not specified, the current color value on success\r\n          If a color value is specified, the previous color value on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerId","Arguments":["layer"],"Signature":"LayerId (layer)","Description":"Returns the identifier of a layer given the layer's name.\r\n        ","ArgumentDesc":"\r\nlayer = name of existing layer\r\n        ","Returns":"\r\nString - The layer's identifier if successful.\r\nNull - If not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerId in module rhinoscript.layer:\r\n\r\nLayerId(layer) |      Returns the identifier of a layer given the layer's name.\r\n        Parameters:\r\n          layer = name of existing layer\r\n        Returns:\r\n          String - The layer's identifier if successful.\r\n          Null - If not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerLinetype","Arguments":["layer","linetype=None"],"Signature":"LayerLinetype (layer, linetype=None)","Description":"Returns or changes the linetype of a layer\r\n        ","ArgumentDesc":"\r\nlayer = name of an existing layer\r\nlinetype[opt] = name of a linetype\r\n        ","Returns":"\r\nIf linetype is not specified, name of the current linetype\r\nIf linetype is specified, name of the previous linetype\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerLinetype in module rhinoscript.layer:\r\n\r\nLayerLinetype(layer, linetype=None) |      Returns or changes the linetype of a layer\r\n        Parameters:\r\n          layer = name of an existing layer\r\n          linetype[opt] = name of a linetype\r\n        Returns:\r\n          If linetype is not specified, name of the current linetype\r\n          If linetype is specified, name of the previous linetype","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerLocked","Arguments":["layer","locked=None"],"Signature":"LayerLocked (layer, locked=None)","Description":"Returns or changes the locked mode of a layer\r\n        ","ArgumentDesc":"\r\nlayer = name of an existing layer\r\nlocked[opt] = new layer locked mode\r\n        ","Returns":"\r\nIf locked is not specified, the current layer locked mode\r\nIf locked is specified, the previous layer locked mode\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerLocked in module rhinoscript.layer:\r\n\r\nLayerLocked(layer, locked=None) |      Returns or changes the locked mode of a layer\r\n        Parameters:\r\n          layer = name of an existing layer\r\n          locked[opt] = new layer locked mode\r\n        Returns:\r\n          If locked is not specified, the current layer locked mode\r\n          If locked is specified, the previous layer locked mode","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerMaterialIndex","Arguments":["layer","index=None"],"Signature":"LayerMaterialIndex (layer, index=None)","Description":"Returns or changes the material index of a layer. A material index of -1\r\n        indicates that no material has been assigned to the layer. Thus, the layer\r\n        will use Rhino's default layer material\r\n        ","ArgumentDesc":"\r\nlayer = name of existing layer\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerMaterialIndex in module rhinoscript.layer:\r\n\r\nLayerMaterialIndex(layer, index=None) |      Returns or changes the material index of a layer. A material index of -1\r\n        indicates that no material has been assigned to the layer. Thus, the layer\r\n        will use Rhino's default layer material\r\n        Parameters:\r\n          layer = name of existing layer","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerName","Arguments":["layer_id","fullpath=True"],"Signature":"LayerName (layer_id, fullpath=True)","Description":"Return the name of a layer given it's identifier\r\n        ","ArgumentDesc":"\r\nlayer_id = layer identifier\r\nfullpath [opt] = return the full path name or short name\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerName in module rhinoscript.layer:\r\n\r\nLayerName(layer_id, fullpath=True) |      Return the name of a layer given it's identifier\r\n        Parameters:\r\n          layer_id = layer identifier\r\n          fullpath [opt] = return the full path name or short name","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerNames","Arguments":["sort=False"],"Signature":"LayerNames (sort=False)","Description":"Returns the names of all layers in the document.\r\n        ","ArgumentDesc":"\r\n  sort [opt] = return a sorted list of the layer names\r\nReturns\r\n  list of strings\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerNames in module rhinoscript.layer:\r\n\r\nLayerNames(sort=False) |      Returns the names of all layers in the document.\r\n        Parameters:\r\n          sort [opt] = return a sorted list of the layer names\r\n        Returns\r\n          list of strings","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerOrder","Arguments":["layer"],"Signature":"LayerOrder (layer)","Description":"Returns the current display order index of a layer as displayed in Rhino's\r\n        layer dialog box. A display order index of -1 indicates that the current\r\n        layer dialog filter does not allow the layer to appear in the layer list\r\n        ","ArgumentDesc":"\r\nlayer = name of existing layer\r\n        ","Returns":"\r\n0 based index\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerOrder in module rhinoscript.layer:\r\n\r\nLayerOrder(layer) |      Returns the current display order index of a layer as displayed in Rhino's\r\n        layer dialog box. A display order index of -1 indicates that the current\r\n        layer dialog filter does not allow the layer to appear in the layer list\r\n        Parameters:\r\n          layer = name of existing layer\r\n        Returns:\r\n          0 based index","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerPrintColor","Arguments":["layer","color=None"],"Signature":"LayerPrintColor (layer, color=None)","Description":"Returns or changes the print color of a layer. Layer print colors are\r\n        represented as RGB colors.\r\n        ","ArgumentDesc":"\r\nlayer = name of existing layer\r\ncolor[opt] = new print color\r\n        ","Returns":"\r\nif color is not specified, the current layer print color\r\nif color is specified, the previous layer print color\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerPrintColor in module rhinoscript.layer:\r\n\r\nLayerPrintColor(layer, color=None) |      Returns or changes the print color of a layer. Layer print colors are\r\n        represented as RGB colors.\r\n        Parameters:\r\n          layer = name of existing layer\r\n          color[opt] = new print color\r\n        Returns:\r\n          if color is not specified, the current layer print color\r\n          if color is specified, the previous layer print color\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerPrintWidth","Arguments":["layer","width=None"],"Signature":"LayerPrintWidth (layer, width=None)","Description":"Returns or changes the print width of a layer. Print width is specified\r\n        in millimeters. A print width of 0.0 denotes the \"default\" print width.\r\n        ","ArgumentDesc":"\r\nlayer = name of existing layer\r\nwidth[opt] = new print width\r\n        ","Returns":"\r\nif width is not specified, the current layer print width\r\nif width is specified, the previous layer print width\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerPrintWidth in module rhinoscript.layer:\r\n\r\nLayerPrintWidth(layer, width=None) |      Returns or changes the print width of a layer. Print width is specified\r\n        in millimeters. A print width of 0.0 denotes the \"default\" print width.\r\n        Parameters:\r\n          layer = name of existing layer\r\n          width[opt] = new print width\r\n        Returns:\r\n          if width is not specified, the current layer print width\r\n          if width is specified, the previous layer print width","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"LayerVisible","Arguments":["layer","visible=None","force_visible=False"],"Signature":"LayerVisible (layer, visible=None, force_visible=False)","Description":"Returns or changes the visible property of a layer.\r\n        ","ArgumentDesc":"\r\nlayer = name of existing layer\r\nvisible[opt] = new visible state\r\n        ","Returns":"\r\nif visible is not specified, the current layer visibility\r\nif visible is specified, the previous layer visibility\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LayerVisible in module rhinoscript.layer:\r\n\r\nLayerVisible(layer, visible=None, force_visible=False) |      Returns or changes the visible property of a layer.\r\n        Parameters:\r\n          layer = name of existing layer\r\n          visible[opt] = new visible state\r\n        Returns:\r\n          if visible is not specified, the current layer visibility\r\n          if visible is specified, the previous layer visibility","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"ParentLayer","Arguments":["layer","parent=None"],"Signature":"ParentLayer (layer, parent=None)","Description":"Return or modify the parent layer of a layer\r\n        ","ArgumentDesc":"\r\nlayer = name of an existing layer\r\nparent[opt] = name of new parent layer. To remove the parent layer,\r\n  thus making a root-level layer, specify an empty string\r\n        ","Returns":"\r\nIf parent is not specified, the name of the current parent layer\r\nIf parent is specified, the name of the previous parent layer\r\nNone if the layer does not have a parent\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ParentLayer in module rhinoscript.layer:\r\n\r\nParentLayer(layer, parent=None) |      Return or modify the parent layer of a layer\r\n        Parameters:\r\n          layer = name of an existing layer\r\n          parent[opt] = name of new parent layer. To remove the parent layer,\r\n            thus making a root-level layer, specify an empty string\r\n        Returns:\r\n          If parent is not specified, the name of the current parent layer\r\n          If parent is specified, the name of the previous parent layer\r\n          None if the layer does not have a parent","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"PurgeLayer","Arguments":["layer"],"Signature":"PurgeLayer (layer)","Description":"Removes an existing layer from the document. The layer will be removed\r\n        even if it contains geometry objects. The layer to be removed cannot be the\r\n        current layer\r\n        empty.\r\n        ","ArgumentDesc":"\r\nlayer = the name or id of an existing empty layer\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PurgeLayer in module rhinoscript.layer:\r\n\r\nPurgeLayer(layer) |      Removes an existing layer from the document. The layer will be removed\r\n        even if it contains geometry objects. The layer to be removed cannot be the\r\n        current layer\r\n        empty.\r\n        Parameters:\r\n          layer = the name or id of an existing empty layer\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"layer","Name":"RenameLayer","Arguments":["oldname","newname"],"Signature":"RenameLayer (oldname, newname)","Description":"Renames an existing layer\r\n        Returns: The new layer name if successful\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenameLayer in module rhinoscript.layer:\r\n\r\nRenameLayer(oldname, newname) |      Renames an existing layer\r\n        Returns: The new layer name if successful","SuccessLevel":1,"IsDocStringWellFormed":false}]},{"ModuleName":"light","functions":[{"ModuleName":"light","Name":"AddDirectionalLight","Arguments":["start_point","end_point"],"Signature":"AddDirectionalLight (start_point, end_point)","Description":"Adds a new directional light object to the document\r\n        ","ArgumentDesc":"\r\nstart_point: starting point of the light\r\nend_point: ending point and direction of the light\r\n        ","Returns":"\r\nidentifier of the new object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddDirectionalLight in module rhinoscript.light:\r\n\r\nAddDirectionalLight(start_point, end_point) |      Adds a new directional light object to the document\r\n        Parameters:\r\n          start_point: starting point of the light\r\n          end_point: ending point and direction of the light\r\n        Returns:\r\n          identifier of the new object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"AddLinearLight","Arguments":["start_point","end_point","width=None"],"Signature":"AddLinearLight (start_point, end_point, width=None)","Description":"Adds a new linear light object to the document\r\n        ","ArgumentDesc":"\r\nstart_point: starting point of the light\r\nend_point: ending point and direction of the light\r\nwidth[opt]: width of the light\r\n        ","Returns":"\r\nidentifier of the new object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddLinearLight in module rhinoscript.light:\r\n\r\nAddLinearLight(start_point, end_point, width=None) |      Adds a new linear light object to the document\r\n        Parameters:\r\n          start_point: starting point of the light\r\n          end_point: ending point and direction of the light\r\n          width[opt]: width of the light\r\n        Returns:\r\n          identifier of the new object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"AddPointLight","Arguments":["point"],"Signature":"AddPointLight (point)","Description":"Adds a new point light object to the document\r\n        ","ArgumentDesc":"\r\npoint = the 3d location of the point\r\n        ","Returns":"\r\nidentifier of the new object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPointLight in module rhinoscript.light:\r\n\r\nAddPointLight(point) |      Adds a new point light object to the document\r\n        Parameters:\r\n          point = the 3d location of the point\r\n        Returns:\r\n          identifier of the new object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"AddRectangularLight","Arguments":["origin","width_point","height_point"],"Signature":"AddRectangularLight (origin, width_point, height_point)","Description":"Adds a new rectangular light object to the document\r\n        ","ArgumentDesc":"\r\norigin = 3d origin point of the light\r\nwidth_point = 3d width and direction point of the light\r\nheight_point = 3d height and direction point of the light\r\n        ","Returns":"\r\nidentifier of the new object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddRectangularLight in module rhinoscript.light:\r\n\r\nAddRectangularLight(origin, width_point, height_point) |      Adds a new rectangular light object to the document\r\n        Parameters:\r\n          origin = 3d origin point of the light\r\n          width_point = 3d width and direction point of the light\r\n          height_point = 3d height and direction point of the light\r\n        Returns:\r\n          identifier of the new object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"AddSpotLight","Arguments":["origin","radius","apex_point"],"Signature":"AddSpotLight (origin, radius, apex_point)","Description":"Adds a new spot light object to the document\r\n        ","ArgumentDesc":"\r\norigin = 3d origin point of the light\r\nradius = radius of the cone\r\napex_point = 3d apex point of the light\r\n        ","Returns":"\r\nidentifier of the new object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSpotLight in module rhinoscript.light:\r\n\r\nAddSpotLight(origin, radius, apex_point) |      Adds a new spot light object to the document\r\n        Parameters:\r\n          origin = 3d origin point of the light\r\n          radius = radius of the cone\r\n          apex_point = 3d apex point of the light\r\n        Returns:\r\n          identifier of the new object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"EnableLight","Arguments":["object_id","enable=None"],"Signature":"EnableLight (object_id, enable=None)","Description":"Enables or disables a light object\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\nenable[opt] = the light's enabled status\r\n        ","Returns":"\r\nif enable is not specified, the current enabled status \r\nif enable is specified, the previous enabled status\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EnableLight in module rhinoscript.light:\r\n\r\nEnableLight(object_id, enable=None) |      Enables or disables a light object\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          enable[opt] = the light's enabled status\r\n        Returns:\r\n          if enable is not specified, the current enabled status \r\n          if enable is specified, the previous enabled status\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsDirectionalLight","Arguments":["object_id"],"Signature":"IsDirectionalLight (object_id)","Description":"Verifies a light object is a directional light\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsDirectionalLight in module rhinoscript.light:\r\n\r\nIsDirectionalLight(object_id) |      Verifies a light object is a directional light\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsLight","Arguments":["object_id"],"Signature":"IsLight (object_id)","Description":"Verifies an object is a light object\r\n        ","ArgumentDesc":"\r\nobject_id: the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLight in module rhinoscript.light:\r\n\r\nIsLight(object_id) |      Verifies an object is a light object\r\n        Parameters:\r\n          object_id: the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsLightEnabled","Arguments":["object_id"],"Signature":"IsLightEnabled (object_id)","Description":"Verifies a light object is enabled\r\n        ","ArgumentDesc":"\r\nobject_id: the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLightEnabled in module rhinoscript.light:\r\n\r\nIsLightEnabled(object_id) |      Verifies a light object is enabled\r\n        Parameters:\r\n          object_id: the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsLightReference","Arguments":["object_id"],"Signature":"IsLightReference (object_id)","Description":"Verifies a light object is referenced from another file\r\n        ","ArgumentDesc":"\r\nobject_id: the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLightReference in module rhinoscript.light:\r\n\r\nIsLightReference(object_id) |      Verifies a light object is referenced from another file\r\n        Parameters:\r\n          object_id: the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsLinearLight","Arguments":["object_id"],"Signature":"IsLinearLight (object_id)","Description":"Verifies a light object is a linear light\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLinearLight in module rhinoscript.light:\r\n\r\nIsLinearLight(object_id) |      Verifies a light object is a linear light\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsPointLight","Arguments":["object_id"],"Signature":"IsPointLight (object_id)","Description":"Verifies a light object is a point light\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPointLight in module rhinoscript.light:\r\n\r\nIsPointLight(object_id) |      Verifies a light object is a point light\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsRectangularLight","Arguments":["object_id"],"Signature":"IsRectangularLight (object_id)","Description":"Verifies a light object is a rectangular light\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsRectangularLight in module rhinoscript.light:\r\n\r\nIsRectangularLight(object_id) |      Verifies a light object is a rectangular light\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"IsSpotLight","Arguments":["object_id"],"Signature":"IsSpotLight (object_id)","Description":"Verifies a light object is a spot light\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSpotLight in module rhinoscript.light:\r\n\r\nIsSpotLight(object_id) |      Verifies a light object is a spot light\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"LightColor","Arguments":["object_id","color=None"],"Signature":"LightColor (object_id, color=None)","Description":"Returns or changes the color of a light\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\ncolor[opt] = the light's new color\r\n        ","Returns":"\r\nif color is not specified, the current color \r\nif color is specified, the previous color\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LightColor in module rhinoscript.light:\r\n\r\nLightColor(object_id, color=None) |      Returns or changes the color of a light\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          color[opt] = the light's new color\r\n        Returns:\r\n          if color is not specified, the current color \r\n          if color is specified, the previous color","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"LightDirection","Arguments":["object_id","direction=None"],"Signature":"LightDirection (object_id, direction=None)","Description":"Returns or changes the direction of a light object\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\ndirection[opt] = the light's new direction\r\n        ","Returns":"\r\nif direction is not specified, the current direction\r\nif direction is specified, the previous direction\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LightDirection in module rhinoscript.light:\r\n\r\nLightDirection(object_id, direction=None) |      Returns or changes the direction of a light object\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          direction[opt] = the light's new direction\r\n        Returns:\r\n          if direction is not specified, the current direction\r\n          if direction is specified, the previous direction","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"LightLocation","Arguments":["object_id","location=None"],"Signature":"LightLocation (object_id, location=None)","Description":"Returns or changes the location of a light object\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\nlocation[opt] = the light's new location\r\n        ","Returns":"\r\nif location is not specified, the current location\r\nif location is specified, the previous location\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LightLocation in module rhinoscript.light:\r\n\r\nLightLocation(object_id, location=None) |      Returns or changes the location of a light object\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          location[opt] = the light's new location\r\n        Returns:\r\n          if location is not specified, the current location\r\n          if location is specified, the previous location","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"LightName","Arguments":["object_id","name=None"],"Signature":"LightName (object_id, name=None)","Description":"Returns or changes the name of a light object\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\nname[opt] = the light's new name\r\n        ","Returns":"\r\nif name is not specified, the current name\r\nif name is specified, the previous name\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LightName in module rhinoscript.light:\r\n\r\nLightName(object_id, name=None) |      Returns or changes the name of a light object\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          name[opt] = the light's new name\r\n        Returns:\r\n          if name is not specified, the current name\r\n          if name is specified, the previous name","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"RectangularLightPlane","Arguments":["object_id"],"Signature":"RectangularLightPlane (object_id)","Description":"Returns the plane of a rectangular light object\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\n        ","Returns":"\r\nthe plane if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RectangularLightPlane in module rhinoscript.light:\r\n\r\nRectangularLightPlane(object_id) |      Returns the plane of a rectangular light object\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n        Returns:\r\n          the plane if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"SpotLightHardness","Arguments":["object_id","hardness=None"],"Signature":"SpotLightHardness (object_id, hardness=None)","Description":"Returns or changes the hardness of a spot light. Spotlight hardness\r\n        controls the fully illuminated region.\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\nhardness[opt] = the light's new hardness\r\n        ","Returns":"\r\nif hardness is not specified, the current hardness\r\nif hardness is specified, the previous hardness\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SpotLightHardness in module rhinoscript.light:\r\n\r\nSpotLightHardness(object_id, hardness=None) |      Returns or changes the hardness of a spot light. Spotlight hardness\r\n        controls the fully illuminated region.\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          hardness[opt] = the light's new hardness\r\n        Returns:\r\n          if hardness is not specified, the current hardness\r\n          if hardness is specified, the previous hardness","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"SpotLightRadius","Arguments":["object_id","radius=None"],"Signature":"SpotLightRadius (object_id, radius=None)","Description":"Returns or changes the radius of a spot light.\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\nradius[opt] = the light's new radius\r\n        ","Returns":"\r\nif radius is not specified, the current radius\r\nif radius is specified, the previous radius\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SpotLightRadius in module rhinoscript.light:\r\n\r\nSpotLightRadius(object_id, radius=None) |      Returns or changes the radius of a spot light.\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          radius[opt] = the light's new radius\r\n        Returns:\r\n          if radius is not specified, the current radius\r\n          if radius is specified, the previous radius","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"light","Name":"SpotLightShadowIntensity","Arguments":["object_id","intensity=None"],"Signature":"SpotLightShadowIntensity (object_id, intensity=None)","Description":"Returns or changes the shadow intensity of a spot light.\r\n        ","ArgumentDesc":"\r\nobject_id = the light object's identifier\r\nintensity[opt] = the light's new intensity\r\n        ","Returns":"\r\nif intensity is not specified, the current intensity\r\nif intensity is specified, the previous intensity\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SpotLightShadowIntensity in module rhinoscript.light:\r\n\r\nSpotLightShadowIntensity(object_id, intensity=None) |      Returns or changes the shadow intensity of a spot light.\r\n        Parameters:\r\n          object_id = the light object's identifier\r\n          intensity[opt] = the light's new intensity\r\n        Returns:\r\n          if intensity is not specified, the current intensity\r\n          if intensity is specified, the previous intensity","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"line","functions":[{"ModuleName":"line","Name":"LineClosestPoint","Arguments":["line","testpoint"],"Signature":"LineClosestPoint (line, testpoint)","Description":"Finds the point on an infinite line that is closest to a test point\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineClosestPoint in module rhinoscript.line:\r\n\r\nLineClosestPoint(line, testpoint) |      Finds the point on an infinite line that is closest to a test point","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LineCylinderIntersection","Arguments":["line","cylinder_plane","cylinder_height","cylinder_radius"],"Signature":"LineCylinderIntersection (line, cylinder_plane, cylinder_height, cylinder_radius)","Description":"Calculates the intersection of a line and a cylinder\r\n        ","ArgumentDesc":"\r\nline = the line to intersect\r\ncylinder_plane = base plane of the cylinder\r\ncylinder_height = height of the cylinder\r\ncylinder_radius = radius of the cylinder\r\n        ","Returns":"\r\nlist of intersection points (0, 1, or 2 points)\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineCylinderIntersection in module rhinoscript.line:\r\n\r\nLineCylinderIntersection(line, cylinder_plane, cylinder_height, cylinder_radius) |      Calculates the intersection of a line and a cylinder\r\n        Parameters:\r\n          line = the line to intersect\r\n          cylinder_plane = base plane of the cylinder\r\n          cylinder_height = height of the cylinder\r\n          cylinder_radius = radius of the cylinder\r\n        Returns:\r\n          list of intersection points (0, 1, or 2 points)","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LineIsFartherThan","Arguments":["line","distance","point_or_line"],"Signature":"LineIsFartherThan (line, distance, point_or_line)","Description":"Determines if the shortest distance from a line to a point or another\r\n        line is greater than a specified distance\r\n        Returns:\r\n          True if the shortest distance from the line to the other project is\r\n          greater than distance, False otherwise\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineIsFartherThan in module rhinoscript.line:\r\n\r\nLineIsFartherThan(line, distance, point_or_line) |      Determines if the shortest distance from a line to a point or another\r\n        line is greater than a specified distance\r\n        Returns:\r\n          True if the shortest distance from the line to the other project is\r\n          greater than distance, False otherwise","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LineLineIntersection","Arguments":["lineA","lineB"],"Signature":"LineLineIntersection (lineA, lineB)","Description":"Calculates the intersection of two non-parallel lines. Note, the two\r\n        lines do not have to intersect for an intersection to be found. (see help)\r\n        ","ArgumentDesc":"\r\nlineA, lineB = lines to intersect\r\n        ","Returns":"\r\na tuple containing a point on the first line and a point on the second line if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineLineIntersection in module rhinoscript.line:\r\n\r\nLineLineIntersection(lineA, lineB) |      Calculates the intersection of two non-parallel lines. Note, the two\r\n        lines do not have to intersect for an intersection to be found. (see help)\r\n        Parameters:\r\n          lineA, lineB = lines to intersect\r\n        Returns:\r\n          a tuple containing a point on the first line and a point on the second line if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LineMaxDistanceTo","Arguments":["line","point_or_line"],"Signature":"LineMaxDistanceTo (line, point_or_line)","Description":"Finds the longest distance between a line as a finite chord, and a point\r\n        or another line\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineMaxDistanceTo in module rhinoscript.line:\r\n\r\nLineMaxDistanceTo(line, point_or_line) |      Finds the longest distance between a line as a finite chord, and a point\r\n        or another line","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LineMinDistanceTo","Arguments":["line","point_or_line"],"Signature":"LineMinDistanceTo (line, point_or_line)","Description":"Finds the shortest distance between a line as a finite chord, and a point\r\n        or another line\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineMinDistanceTo in module rhinoscript.line:\r\n\r\nLineMinDistanceTo(line, point_or_line) |      Finds the shortest distance between a line as a finite chord, and a point\r\n        or another line","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LinePlane","Arguments":["line"],"Signature":"LinePlane (line)","Description":"Returns a plane that contains the line. The origin of the plane is at the start of\r\n        the line. If possible, a plane parallel to the world XY, YZ, or ZX plane is returned\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LinePlane in module rhinoscript.line:\r\n\r\nLinePlane(line) |      Returns a plane that contains the line. The origin of the plane is at the start of\r\n        the line. If possible, a plane parallel to the world XY, YZ, or ZX plane is returned","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LinePlaneIntersection","Arguments":["line","plane"],"Signature":"LinePlaneIntersection (line, plane)","Description":"Calculates the intersection of a line and a plane.\r\n        ","ArgumentDesc":"\r\nline = Two 3D points identifying the starting and ending points of the line to intersect.\r\nplane = The plane to intersect.\r\n        ","Returns":"\r\nThe 3D point of intersection is successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LinePlaneIntersection in module rhinoscript.line:\r\n\r\nLinePlaneIntersection(line, plane) |      Calculates the intersection of a line and a plane.\r\n        Parameters:\r\n          line = Two 3D points identifying the starting and ending points of the line to intersect.\r\n          plane = The plane to intersect.\r\n        Returns:\r\n          The 3D point of intersection is successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LineSphereIntersection","Arguments":["line","sphere_center","sphere_radius"],"Signature":"LineSphereIntersection (line, sphere_center, sphere_radius)","Description":"Calculates the intersection of a line and a sphere\r\n        Returns:\r\n          list of intersection points if successful\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineSphereIntersection in module rhinoscript.line:\r\n\r\nLineSphereIntersection(line, sphere_center, sphere_radius) |      Calculates the intersection of a line and a sphere\r\n        Returns:\r\n          list of intersection points if successful","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"line","Name":"LineTransform","Arguments":["line","xform"],"Signature":"LineTransform (line, xform)","Description":"Transforms a line\r\n        ","ArgumentDesc":"\r\nline = the line to transform\r\nxform = the transformation to apply\r\n        ","Returns":"\r\ntransformed line\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LineTransform in module rhinoscript.line:\r\n\r\nLineTransform(line, xform) |      Transforms a line\r\n        Parameters:\r\n          line = the line to transform\r\n          xform = the transformation to apply\r\n        Returns:\r\n          transformed line","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"linetype","functions":[{"ModuleName":"linetype","Name":"IsLinetype","Arguments":["name_or_id"],"Signature":"IsLinetype (name_or_id)","Description":"Verifies the existance of a linetype in the document\r\n        Returns: True or False\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLinetype in module rhinoscript.linetype:\r\n\r\nIsLinetype(name_or_id) |      Verifies the existance of a linetype in the document\r\n        Returns: True or False","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"linetype","Name":"IsLinetypeReference","Arguments":["name_or_id"],"Signature":"IsLinetypeReference (name_or_id)","Description":"Verifies that an existing linetype is from a reference file\r\n        Returns: True or False\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLinetypeReference in module rhinoscript.linetype:\r\n\r\nIsLinetypeReference(name_or_id) |      Verifies that an existing linetype is from a reference file\r\n        Returns: True or False","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"linetype","Name":"LinetypeNames","Arguments":["sort=False"],"Signature":"LinetypeNames (sort=False)","Description":"Returns names of all linetypes in the document\r\n        ","ArgumentDesc":"\r\n  sort[opt] = return a sorted list of the linetype names\r\nReturns\r\n  list of strings if successful\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LinetypeNames in module rhinoscript.linetype:\r\n\r\nLinetypeNames(sort=False) |      Returns names of all linetypes in the document\r\n        Parameters:\r\n          sort[opt] = return a sorted list of the linetype names\r\n        Returns\r\n          list of strings if successful","SuccessLevel":2,"IsDocStringWellFormed":false}]},{"ModuleName":"material","functions":[{"ModuleName":"material","Name":"AddMaterialToLayer","Arguments":["layer"],"Signature":"AddMaterialToLayer (layer)","Description":"Add material to a layer and returns the new material's index. If the\r\n        layer already has a material, then the layer's current material index is\r\n        returned\r\n        ","ArgumentDesc":"\r\nlayer = name of an existing layer.\r\n        ","Returns":"\r\nMaterial index of the layer if successful\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddMaterialToLayer in module rhinoscript.material:\r\n\r\nAddMaterialToLayer(layer) |      Add material to a layer and returns the new material's index. If the\r\n        layer already has a material, then the layer's current material index is\r\n        returned\r\n        Parameters:\r\n          layer = name of an existing layer.\r\n        Returns:\r\n          Material index of the layer if successful\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"AddMaterialToObject","Arguments":["object_id"],"Signature":"AddMaterialToObject (object_id)","Description":"Adds material to an object and returns the new material's index. If the\r\n        object already has a material, the the object's current material index is\r\n        returned.\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of an object\r\n        ","Returns":"\r\nmaterial index of the object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddMaterialToObject in module rhinoscript.material:\r\n\r\nAddMaterialToObject(object_id) |      Adds material to an object and returns the new material's index. If the\r\n        object already has a material, the the object's current material index is\r\n        returned.\r\n        Parameters:\r\n          object_id = identifier of an object\r\n        Returns:\r\n          material index of the object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"CopyMaterial","Arguments":["source_index","destination_index"],"Signature":"CopyMaterial (source_index, destination_index)","Description":"Copies definition of a source material to a destination material\r\n        ","ArgumentDesc":"\r\nsource_index, destination_index = indices of materials to copy\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CopyMaterial in module rhinoscript.material:\r\n\r\nCopyMaterial(source_index, destination_index) |      Copies definition of a source material to a destination material\r\n        Parameters:\r\n          source_index, destination_index = indices of materials to copy\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"IsMaterialDefault","Arguments":["material_index"],"Signature":"IsMaterialDefault (material_index)","Description":"Verifies a material is a copy of Rhino's built-in \"default\" material.\r\n        The default material is used by objects and layers that have not been\r\n        assigned a material.\r\n        ","ArgumentDesc":"\r\nmaterial_index = the zero-based material index\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsMaterialDefault in module rhinoscript.material:\r\n\r\nIsMaterialDefault(material_index) |      Verifies a material is a copy of Rhino's built-in \"default\" material.\r\n        The default material is used by objects and layers that have not been\r\n        assigned a material.\r\n        Parameters:\r\n          material_index = the zero-based material index\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"IsMaterialReference","Arguments":["material_index"],"Signature":"IsMaterialReference (material_index)","Description":"Verifies a material is referenced from another file\r\n        ","ArgumentDesc":"\r\nmaterial_index = the zero-based material index\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsMaterialReference in module rhinoscript.material:\r\n\r\nIsMaterialReference(material_index) |      Verifies a material is referenced from another file\r\n        Parameters:\r\n          material_index = the zero-based material index\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MatchMaterial","Arguments":["source","destination"],"Signature":"MatchMaterial (source, destination)","Description":"Copies the material definition from one material to one or more objects\r\n        ","ArgumentDesc":"\r\nsource = source material index -or- identifier of the source object.\r\n  The object must have a material assigned\r\ndestination = indentifier(s) of the destination object(s)\r\n        ","Returns":"\r\nnumber of objects that were modified if successful\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MatchMaterial in module rhinoscript.material:\r\n\r\nMatchMaterial(source, destination) |      Copies the material definition from one material to one or more objects\r\n        Parameters:\r\n          source = source material index -or- identifier of the source object.\r\n            The object must have a material assigned\r\n          destination = indentifier(s) of the destination object(s)\r\n        Returns:\r\n          number of objects that were modified if successful\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialBump","Arguments":["material_index","filename=None"],"Signature":"MaterialBump (material_index, filename=None)","Description":"Returns or modifies a material's bump bitmap filename\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\nfilename[opt] = the bump bitmap filename\r\n        ","Returns":"\r\nif filename is not specified, the current bump bitmap filename\r\nif filename is specified, the previous bump bitmap filename\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialBump in module rhinoscript.material:\r\n\r\nMaterialBump(material_index, filename=None) |      Returns or modifies a material's bump bitmap filename\r\n        Parameters:\r\n          material_index = zero based material index\r\n          filename[opt] = the bump bitmap filename\r\n        Returns:\r\n          if filename is not specified, the current bump bitmap filename\r\n          if filename is specified, the previous bump bitmap filename\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialColor","Arguments":["material_index","color=None"],"Signature":"MaterialColor (material_index, color=None)","Description":"Returns or modifies a material's diffuse color.\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\ncolor[opt] = the new color value\r\n        ","Returns":"\r\nif color is not specified, the current material color\r\nif color is specified, the previous material color\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialColor in module rhinoscript.material:\r\n\r\nMaterialColor(material_index, color=None) |      Returns or modifies a material's diffuse color.\r\n        Parameters:\r\n          material_index = zero based material index\r\n          color[opt] = the new color value\r\n        Returns:\r\n          if color is not specified, the current material color\r\n          if color is specified, the previous material color\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialEnvironmentMap","Arguments":["material_index","filename=None"],"Signature":"MaterialEnvironmentMap (material_index, filename=None)","Description":"Returns or modifies a material's environment bitmap filename.\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\nfilename[opt] = the environment bitmap filename\r\n        ","Returns":"\r\nif filename is not specified, the current environment bitmap filename\r\nif filename is specified, the previous environment bitmap filename\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialEnvironmentMap in module rhinoscript.material:\r\n\r\nMaterialEnvironmentMap(material_index, filename=None) |      Returns or modifies a material's environment bitmap filename.\r\n        Parameters:\r\n          material_index = zero based material index\r\n          filename[opt] = the environment bitmap filename\r\n        Returns:\r\n          if filename is not specified, the current environment bitmap filename\r\n          if filename is specified, the previous environment bitmap filename\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialName","Arguments":["material_index","name=None"],"Signature":"MaterialName (material_index, name=None)","Description":"Returns or modifies a material's user defined name\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\nname[opt] = the new name\r\n        ","Returns":"\r\nif name is not specified, the current material name\r\nif name is specified, the previous material name\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialName in module rhinoscript.material:\r\n\r\nMaterialName(material_index, name=None) |      Returns or modifies a material's user defined name\r\n        Parameters:\r\n          material_index = zero based material index\r\n          name[opt] = the new name\r\n        Returns:\r\n          if name is not specified, the current material name\r\n          if name is specified, the previous material name\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialReflectiveColor","Arguments":["material_index","color=None"],"Signature":"MaterialReflectiveColor (material_index, color=None)","Description":"Returns or modifies a material's reflective color.\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\ncolor[opt] = the new color value\r\n        ","Returns":"\r\nif color is not specified, the current material reflective color\r\nif color is specified, the previous material reflective color\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialReflectiveColor in module rhinoscript.material:\r\n\r\nMaterialReflectiveColor(material_index, color=None) |      Returns or modifies a material's reflective color.\r\n        Parameters:\r\n          material_index = zero based material index\r\n          color[opt] = the new color value\r\n        Returns:\r\n          if color is not specified, the current material reflective color\r\n          if color is specified, the previous material reflective color\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialShine","Arguments":["material_index","shine=None"],"Signature":"MaterialShine (material_index, shine=None)","Description":"Returns or modifies a material's shine value\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\nshine[opt] = the new shine value. A material's shine value ranges from 0.0 to 255.0, with\r\n  0.0 being matte and 255.0 being glossy\r\n        ","Returns":"\r\nif shine is not specified, the current material shine value\r\nif shine is specified, the previous material shine value\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialShine in module rhinoscript.material:\r\n\r\nMaterialShine(material_index, shine=None) |      Returns or modifies a material's shine value\r\n        Parameters:\r\n          material_index = zero based material index\r\n          shine[opt] = the new shine value. A material's shine value ranges from 0.0 to 255.0, with\r\n            0.0 being matte and 255.0 being glossy\r\n        Returns:\r\n          if shine is not specified, the current material shine value\r\n          if shine is specified, the previous material shine value\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialTexture","Arguments":["material_index","filename=None"],"Signature":"MaterialTexture (material_index, filename=None)","Description":"Returns or modifies a material's texture bitmap filename\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\nfilename[opt] = the texture bitmap filename\r\n        ","Returns":"\r\nif filename is not specified, the current texture bitmap filename\r\nif filename is specified, the previous texture bitmap filename\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialTexture in module rhinoscript.material:\r\n\r\nMaterialTexture(material_index, filename=None) |      Returns or modifies a material's texture bitmap filename\r\n        Parameters:\r\n          material_index = zero based material index\r\n          filename[opt] = the texture bitmap filename\r\n        Returns:\r\n          if filename is not specified, the current texture bitmap filename\r\n          if filename is specified, the previous texture bitmap filename\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialTransparency","Arguments":["material_index","transparency=None"],"Signature":"MaterialTransparency (material_index, transparency=None)","Description":"Returns or modifies a material's transparency value\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\ntransparency[opt] = the new transparency value. A material's transparency value ranges from 0.0 to 1.0, with\r\n  0.0 being opaque and 1.0 being transparent\r\n        ","Returns":"\r\nif transparency is not specified, the current material transparency value\r\nif transparency is specified, the previous material transparency value\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialTransparency in module rhinoscript.material:\r\n\r\nMaterialTransparency(material_index, transparency=None) |      Returns or modifies a material's transparency value\r\n        Parameters:\r\n          material_index = zero based material index\r\n          transparency[opt] = the new transparency value. A material's transparency value ranges from 0.0 to 1.0, with\r\n            0.0 being opaque and 1.0 being transparent\r\n        Returns:\r\n          if transparency is not specified, the current material transparency value\r\n          if transparency is specified, the previous material transparency value\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"MaterialTransparencyMap","Arguments":["material_index","filename=None"],"Signature":"MaterialTransparencyMap (material_index, filename=None)","Description":"Returns or modifies a material's transparency bitmap filename\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\nfilename[opt] = the transparency bitmap filename\r\n        ","Returns":"\r\nif filename is not specified, the current transparency bitmap filename\r\nif filename is specified, the previous transparency bitmap filename\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaterialTransparencyMap in module rhinoscript.material:\r\n\r\nMaterialTransparencyMap(material_index, filename=None) |      Returns or modifies a material's transparency bitmap filename\r\n        Parameters:\r\n          material_index = zero based material index\r\n          filename[opt] = the transparency bitmap filename\r\n        Returns:\r\n          if filename is not specified, the current transparency bitmap filename\r\n          if filename is specified, the previous transparency bitmap filename\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"material","Name":"ResetMaterial","Arguments":["material_index"],"Signature":"ResetMaterial (material_index)","Description":"Resets a material to Rhino's default material\r\n        ","ArgumentDesc":"\r\nmaterial_index = zero based material index\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ResetMaterial in module rhinoscript.material:\r\n\r\nResetMaterial(material_index) |      Resets a material to Rhino's default material\r\n        Parameters:\r\n          material_index = zero based material index\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"mesh","functions":[{"ModuleName":"mesh","Name":"AddMesh","Arguments":["vertices","face_vertices","vertex_normals=None","texture_coordinates=None","vertex_colors=None"],"Signature":"AddMesh (vertices, face_vertices, vertex_normals=None, texture_coordinates=None, vertex_colors=None)","Description":"Add a mesh object to the document\r\n        ","ArgumentDesc":"\r\nvertices = list of 3D points defining the vertices of the mesh\r\nface_vertices = list containing lists of 3 or 4 numbers that define the\r\n  vertex indices for each face of the mesh. If the third a fourth vertex\r\n  indices of a face are identical, a triangular face will be created.\r\nvertex_normals[opt] = list of 3D vectors defining the vertex normals of\r\n  the mesh. Note, for every vertex, there must be a corresponding vertex\r\n  normal\r\ntexture_coordinates[opt] = list of 2D texture coordinates. For every\r\n  vertex, there must be a corresponding texture coordinate\r\nvertex_colors[opt] = a list of color values. For every vertex,\r\n  there must be a corresponding vertex color\r\n        ","Returns":"\r\nIdentifier of the new object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddMesh in module rhinoscript.mesh:\r\n\r\nAddMesh(vertices, face_vertices, vertex_normals=None, texture_coordinates=None, vertex_colors=None) |      Add a mesh object to the document\r\n        Parameters:\r\n          vertices = list of 3D points defining the vertices of the mesh\r\n          face_vertices = list containing lists of 3 or 4 numbers that define the\r\n            vertex indices for each face of the mesh. If the third a fourth vertex\r\n            indices of a face are identical, a triangular face will be created.\r\n          vertex_normals[opt] = list of 3D vectors defining the vertex normals of\r\n            the mesh. Note, for every vertex, there must be a corresponding vertex\r\n            normal\r\n          texture_coordinates[opt] = list of 2D texture coordinates. For every\r\n            vertex, there must be a corresponding texture coordinate\r\n          vertex_colors[opt] = a list of color values. For every vertex,\r\n            there must be a corresponding vertex color\r\n        Returns:\r\n          Identifier of the new object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"AddPlanarMesh","Arguments":["object_id","delete_input=False"],"Signature":"AddPlanarMesh (object_id, delete_input=False)","Description":"Creates a planar mesh from a closed, planar curve\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a closed, planar curve\r\ndelete_input[opt] = if True, delete the input curve defined by object_id\r\n        ","Returns":"\r\nid of the new mesh on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPlanarMesh in module rhinoscript.mesh:\r\n\r\nAddPlanarMesh(object_id, delete_input=False) |      Creates a planar mesh from a closed, planar curve\r\n        Parameters:\r\n          object_id = identifier of a closed, planar curve\r\n          delete_input[opt] = if True, delete the input curve defined by object_id\r\n        Returns:\r\n          id of the new mesh on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"CurveMeshIntersection","Arguments":["curve_id","mesh_id","return_faces=False"],"Signature":"CurveMeshIntersection (curve_id, mesh_id, return_faces=False)","Description":"Calculates the intersection of a curve object and a mesh object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of a curve object\r\nmesh_id = identifier or a mesh object\r\nreturn_faces[opt] = return both intersection points and face indices.\r\n  If False, then just the intersection points are returned\r\n        ","Returns":"\r\nif return_false is omitted or False, then a list of intersection points\r\nif return_false is True, the a one-dimensional list containing information\r\n  about each intersection. Each element contains the following two elements\r\n  (point of intersection, mesh face index where intersection lies)\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurveMeshIntersection in module rhinoscript.mesh:\r\n\r\nCurveMeshIntersection(curve_id, mesh_id, return_faces=False) |      Calculates the intersection of a curve object and a mesh object\r\n        Parameters:\r\n          curve_id = identifier of a curve object\r\n          mesh_id = identifier or a mesh object\r\n          return_faces[opt] = return both intersection points and face indices.\r\n            If False, then just the intersection points are returned\r\n        Returns:\r\n          if return_false is omitted or False, then a list of intersection points\r\n          if return_false is True, the a one-dimensional list containing information\r\n            about each intersection. Each element contains the following two elements\r\n            (point of intersection, mesh face index where intersection lies)\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"DisjointMeshCount","Arguments":["object_id"],"Signature":"DisjointMeshCount (object_id)","Description":"Returns number of meshes that could be created by calling SplitDisjointMesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        ","Returns":"\r\nThe number of meshes that could be created\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DisjointMeshCount in module rhinoscript.mesh:\r\n\r\nDisjointMeshCount(object_id) |      Returns number of meshes that could be created by calling SplitDisjointMesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          The number of meshes that could be created","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"DuplicateMeshBorder","Arguments":["mesh_id"],"Signature":"DuplicateMeshBorder (mesh_id)","Description":"Creates curves that duplicates a mesh border\r\n        ","ArgumentDesc":"\r\nmesh_id = identifier of a mesh object\r\n        ","Returns":"\r\nlist of curve ids on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DuplicateMeshBorder in module rhinoscript.mesh:\r\n\r\nDuplicateMeshBorder(mesh_id) |      Creates curves that duplicates a mesh border\r\n        Parameters:\r\n          mesh_id = identifier of a mesh object\r\n        Returns:\r\n          list of curve ids on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"ExplodeMeshes","Arguments":["mesh_ids","delete=False"],"Signature":"ExplodeMeshes (mesh_ids, delete=False)","Description":"Explodes a mesh object, or mesh objects int submeshes. A submesh is a\r\n        collection of mesh faces that are contained within a closed loop of\r\n        unwelded mesh edges. Unwelded mesh edges are where the mesh faces that\r\n        share the edge have unique mesh vertices (not mesh topology vertices)\r\n        at both ends of the edge\r\n        ","ArgumentDesc":"\r\nmesh_ids = list of mesh identifiers\r\ndelete[opt] = delete the input meshes\r\n        ","Returns":"\r\nList of identifiers\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExplodeMeshes in module rhinoscript.mesh:\r\n\r\nExplodeMeshes(mesh_ids, delete=False) |      Explodes a mesh object, or mesh objects int submeshes. A submesh is a\r\n        collection of mesh faces that are contained within a closed loop of\r\n        unwelded mesh edges. Unwelded mesh edges are where the mesh faces that\r\n        share the edge have unique mesh vertices (not mesh topology vertices)\r\n        at both ends of the edge\r\n        Parameters:\r\n          mesh_ids = list of mesh identifiers\r\n          delete[opt] = delete the input meshes\r\n        Returns:\r\n          List of identifiers","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"IsMesh","Arguments":["object_id"],"Signature":"IsMesh (object_id)","Description":"Verifies if an object is a mesh\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsMesh in module rhinoscript.mesh:\r\n\r\nIsMesh(object_id) |      Verifies if an object is a mesh","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"IsMeshClosed","Arguments":["object_id"],"Signature":"IsMeshClosed (object_id)","Description":"Verifies a mesh object is closed\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsMeshClosed in module rhinoscript.mesh:\r\n\r\nIsMeshClosed(object_id) |      Verifies a mesh object is closed\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"IsMeshManifold","Arguments":["object_id"],"Signature":"IsMeshManifold (object_id)","Description":"Verifies a mesh object is manifold. A mesh for which every edge is shared\r\n        by at most two faces is called manifold. If a mesh has at least one edge\r\n        that is shared by more than two faces, then that mesh is called non-manifold\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsMeshManifold in module rhinoscript.mesh:\r\n\r\nIsMeshManifold(object_id) |      Verifies a mesh object is manifold. A mesh for which every edge is shared\r\n        by at most two faces is called manifold. If a mesh has at least one edge\r\n        that is shared by more than two faces, then that mesh is called non-manifold\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"IsPointOnMesh","Arguments":["object_id","point"],"Signature":"IsPointOnMesh (object_id, point)","Description":"Verifies a point is on a mesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\npoint = test point\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPointOnMesh in module rhinoscript.mesh:\r\n\r\nIsPointOnMesh(object_id, point) |      Verifies a point is on a mesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n          point = test point","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"JoinMeshes","Arguments":["object_ids","delete_input=False"],"Signature":"JoinMeshes (object_ids, delete_input=False)","Description":"Joins two or or more mesh objects together\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of two or more mesh objects\r\ndelete_input[opt] = delete input after joining\r\n        ","Returns":"\r\nidentifier of newly created mesh on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function JoinMeshes in module rhinoscript.mesh:\r\n\r\nJoinMeshes(object_ids, delete_input=False) |      Joins two or or more mesh objects together\r\n        Parameters:\r\n          object_ids = identifiers of two or more mesh objects\r\n          delete_input[opt] = delete input after joining\r\n        Returns:\r\n          identifier of newly created mesh on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshArea","Arguments":["object_ids"],"Signature":"MeshArea (object_ids)","Description":"Returns approximate area of one or more mesh objects\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of one or more mesh objects\r\n        ","Returns":"\r\nlist containing 3 numbers if successful where\r\n  element[0] = number of meshes used in calculation\r\n  element[1] = total area of all meshes\r\n  element[2] = the error estimate\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshArea in module rhinoscript.mesh:\r\n\r\nMeshArea(object_ids) |      Returns approximate area of one or more mesh objects\r\n        Parameters:\r\n          object_ids = identifiers of one or more mesh objects\r\n        Returns:\r\n          list containing 3 numbers if successful where\r\n            element[0] = number of meshes used in calculation\r\n            element[1] = total area of all meshes\r\n            element[2] = the error estimate\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshAreaCentroid","Arguments":["object_id"],"Signature":"MeshAreaCentroid (object_id)","Description":"Calculates the area centroid of a mesh object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        ","Returns":"\r\nPoint3d representing the area centroid if successful\r\nNone on error  \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshAreaCentroid in module rhinoscript.mesh:\r\n\r\nMeshAreaCentroid(object_id) |      Calculates the area centroid of a mesh object\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          Point3d representing the area centroid if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshBooleanDifference","Arguments":["input0","input1","delete_input=True"],"Signature":"MeshBooleanDifference (input0, input1, delete_input=True)","Description":"Performs boolean difference operation on two sets of input meshes\r\n        ","ArgumentDesc":"\r\ninput0, input1 = identifiers of meshes\r\ndelete_input[opt] = delete the input meshes\r\n        ","Returns":"\r\nlist of identifiers of new meshes\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshBooleanDifference in module rhinoscript.mesh:\r\n\r\nMeshBooleanDifference(input0, input1, delete_input=True) |      Performs boolean difference operation on two sets of input meshes\r\n        Parameters:\r\n          input0, input1 = identifiers of meshes\r\n          delete_input[opt] = delete the input meshes\r\n        Returns:\r\n          list of identifiers of new meshes","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshBooleanIntersection","Arguments":["input0","input1","delete_input=True"],"Signature":"MeshBooleanIntersection (input0, input1, delete_input=True)","Description":"Performs boolean intersection operation on two sets of input meshes\r\n        ","ArgumentDesc":"\r\ninput0, input1 = identifiers of meshes\r\ndelete_input[opt] = delete the input meshes\r\n        ","Returns":"\r\nlist of identifiers of new meshes on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshBooleanIntersection in module rhinoscript.mesh:\r\n\r\nMeshBooleanIntersection(input0, input1, delete_input=True) |      Performs boolean intersection operation on two sets of input meshes\r\n        Parameters:\r\n          input0, input1 = identifiers of meshes\r\n          delete_input[opt] = delete the input meshes\r\n        Returns:\r\n          list of identifiers of new meshes on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshBooleanSplit","Arguments":["input0","input1","delete_input=True"],"Signature":"MeshBooleanSplit (input0, input1, delete_input=True)","Description":"Performs boolean split operation on two sets of input meshes\r\n        ","ArgumentDesc":"\r\ninput0, input1 = identifiers of meshes\r\ndelete_input[opt] = delete the input meshes\r\n        ","Returns":"\r\nlist of identifiers of new meshes on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshBooleanSplit in module rhinoscript.mesh:\r\n\r\nMeshBooleanSplit(input0, input1, delete_input=True) |      Performs boolean split operation on two sets of input meshes\r\n        Parameters:\r\n          input0, input1 = identifiers of meshes\r\n          delete_input[opt] = delete the input meshes\r\n        Returns:\r\n          list of identifiers of new meshes on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshBooleanUnion","Arguments":["mesh_ids","delete_input=True"],"Signature":"MeshBooleanUnion (mesh_ids, delete_input=True)","Description":"Performs boolean union operation on a set of input meshes\r\n        ","ArgumentDesc":"\r\nmesh_ids = identifiers of meshes\r\ndelete_input[opt] = delete the input meshes\r\n        ","Returns":"\r\nlist of identifiers of new meshes\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshBooleanUnion in module rhinoscript.mesh:\r\n\r\nMeshBooleanUnion(mesh_ids, delete_input=True) |      Performs boolean union operation on a set of input meshes\r\n        Parameters:\r\n          mesh_ids = identifiers of meshes\r\n          delete_input[opt] = delete the input meshes\r\n        Returns:\r\n          list of identifiers of new meshes","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshClosestPoint","Arguments":["object_id","point","maximum_distance=None"],"Signature":"MeshClosestPoint (object_id, point, maximum_distance=None)","Description":"Returns the point on a mesh that is closest to a test point\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\npoint = point to test\r\nmaximum_distance[opt] = upper bound used for closest point calculation.\r\n  If you are only interested in finding a point Q on the mesh when\r\n  point.DistanceTo(Q) < maximum_distance, then set maximum_distance to\r\n  that value\r\n        ","Returns":"\r\nTuple containing the results of the calculation where\r\n  element[0] = the 3-D point on the mesh\r\n  element[1] = the index of the mesh face on which the 3-D point lies\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshClosestPoint in module rhinoscript.mesh:\r\n\r\nMeshClosestPoint(object_id, point, maximum_distance=None) |      Returns the point on a mesh that is closest to a test point\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n          point = point to test\r\n          maximum_distance[opt] = upper bound used for closest point calculation.\r\n            If you are only interested in finding a point Q on the mesh when\r\n            point.DistanceTo(Q) < maximum_distance, then set maximum_distance to\r\n            that value\r\n        Returns:\r\n          Tuple containing the results of the calculation where\r\n            element[0] = the 3-D point on the mesh\r\n            element[1] = the index of the mesh face on which the 3-D point lies\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshFaceCenters","Arguments":["mesh_id"],"Signature":"MeshFaceCenters (mesh_id)","Description":"Returns the center of each face of the mesh object\r\n        ","ArgumentDesc":"\r\nmesh_id = identifier of a mesh object\r\n        ","Returns":"\r\nlist of 3d points defining the center of each face\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshFaceCenters in module rhinoscript.mesh:\r\n\r\nMeshFaceCenters(mesh_id) |      Returns the center of each face of the mesh object\r\n        Parameters:\r\n          mesh_id = identifier of a mesh object\r\n        Returns:\r\n          list of 3d points defining the center of each face","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshFaceCount","Arguments":["object_id"],"Signature":"MeshFaceCount (object_id)","Description":"Returns total face count of a mesh object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshFaceCount in module rhinoscript.mesh:\r\n\r\nMeshFaceCount(object_id) |      Returns total face count of a mesh object\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshFaceNormals","Arguments":["mesh_id"],"Signature":"MeshFaceNormals (mesh_id)","Description":"Returns the face unit normal for each face of a mesh object\r\n        Paramters:\r\n          mesh_id = identifier of a mesh object\r\n        Returns:\r\n          List of 3D vectors that define the face unit normals of the mesh\r\n          None on error    \r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshFaceNormals in module rhinoscript.mesh:\r\n\r\nMeshFaceNormals(mesh_id) |      Returns the face unit normal for each face of a mesh object\r\n        Paramters:\r\n          mesh_id = identifier of a mesh object\r\n        Returns:\r\n          List of 3D vectors that define the face unit normals of the mesh\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshFaceVertices","Arguments":["object_id"],"Signature":"MeshFaceVertices (object_id)","Description":"Returns the vertex indices of all faces of a mesh object\r\n        Paramters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          A list containing tuples of 4 numbers that define the vertex indices for\r\n          each face of the mesh. Both quad and triangle faces are returned. If the\r\n          third and fourth vertex indices are identical, the face is a triangle.\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshFaceVertices in module rhinoscript.mesh:\r\n\r\nMeshFaceVertices(object_id) |      Returns the vertex indices of all faces of a mesh object\r\n        Paramters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          A list containing tuples of 4 numbers that define the vertex indices for\r\n          each face of the mesh. Both quad and triangle faces are returned. If the\r\n          third and fourth vertex indices are identical, the face is a triangle.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshFaces","Arguments":["object_id","face_type=True"],"Signature":"MeshFaces (object_id, face_type=True)","Description":"Returns face vertices of a mesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\nface_type[opt] = The face type to be returned. True = both triangles\r\n  and quads. False = only triangles\r\n        ","Returns":"\r\na list of 3D points that define the face vertices of the mesh. If\r\nface_type is True, then faces are returned as both quads and triangles\r\n(4 3D points). For triangles, the third and fourth vertex will be\r\nidentical. If face_type is False, then faces are returned as only\r\ntriangles(3 3D points). Quads will be converted to triangles.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshFaces in module rhinoscript.mesh:\r\n\r\nMeshFaces(object_id, face_type=True) |      Returns face vertices of a mesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n          face_type[opt] = The face type to be returned. True = both triangles\r\n            and quads. False = only triangles\r\n        Returns:\r\n          a list of 3D points that define the face vertices of the mesh. If\r\n          face_type is True, then faces are returned as both quads and triangles\r\n          (4 3D points). For triangles, the third and fourth vertex will be\r\n          identical. If face_type is False, then faces are returned as only\r\n          triangles(3 3D points). Quads will be converted to triangles.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshHasFaceNormals","Arguments":["object_id"],"Signature":"MeshHasFaceNormals (object_id)","Description":"Verifies a mesh object has face normals\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshHasFaceNormals in module rhinoscript.mesh:\r\n\r\nMeshHasFaceNormals(object_id) |      Verifies a mesh object has face normals\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshHasTextureCoordinates","Arguments":["object_id"],"Signature":"MeshHasTextureCoordinates (object_id)","Description":"Verifies a mesh object has texture coordinates\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshHasTextureCoordinates in module rhinoscript.mesh:\r\n\r\nMeshHasTextureCoordinates(object_id) |      Verifies a mesh object has texture coordinates\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshHasVertexColors","Arguments":["object_id"],"Signature":"MeshHasVertexColors (object_id)","Description":"Verifies a mesh object has vertex colors\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshHasVertexColors in module rhinoscript.mesh:\r\n\r\nMeshHasVertexColors(object_id) |      Verifies a mesh object has vertex colors\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshHasVertexNormals","Arguments":["object_id"],"Signature":"MeshHasVertexNormals (object_id)","Description":"Verifies a mesh object has vertex normals\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshHasVertexNormals in module rhinoscript.mesh:\r\n\r\nMeshHasVertexNormals(object_id) |      Verifies a mesh object has vertex normals\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshMeshIntersection","Arguments":["mesh1","mesh2","tolerance=None"],"Signature":"MeshMeshIntersection (mesh1, mesh2, tolerance=None)","Description":"Calculates the intersections of a mesh object with another mesh object\r\n        ","ArgumentDesc":"\r\nmesh1, mesh2 = identifiers of meshes\r\ntolerance[opt] = the intersection tolerance\r\n        ","Returns":"\r\nList of 3d point arrays that define the vertices of the intersection curves\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshMeshIntersection in module rhinoscript.mesh:\r\n\r\nMeshMeshIntersection(mesh1, mesh2, tolerance=None) |      Calculates the intersections of a mesh object with another mesh object\r\n        Parameters:\r\n          mesh1, mesh2 = identifiers of meshes\r\n          tolerance[opt] = the intersection tolerance\r\n        Returns:\r\n          List of 3d point arrays that define the vertices of the intersection curves","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshNakedEdgePoints","Arguments":["object_id"],"Signature":"MeshNakedEdgePoints (object_id)","Description":"Identifies the naked edge points of a mesh object. This function shows\r\n        where mesh vertices are not completely surrounded by faces. Joined\r\n        meshes, such as are made by MeshBox, have naked mesh edge points where\r\n        the sub-meshes are joined\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        ","Returns":"\r\nList of boolean values that represent whether or not a mesh vertex is\r\nnaked or not. The number of elements in the list will be equal to\r\nthe value returned by MeshVertexCount. In which case, the list will\r\nidentify the naked status for each vertex returned by MeshVertices\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshNakedEdgePoints in module rhinoscript.mesh:\r\n\r\nMeshNakedEdgePoints(object_id) |      Identifies the naked edge points of a mesh object. This function shows\r\n        where mesh vertices are not completely surrounded by faces. Joined\r\n        meshes, such as are made by MeshBox, have naked mesh edge points where\r\n        the sub-meshes are joined\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          List of boolean values that represent whether or not a mesh vertex is\r\n          naked or not. The number of elements in the list will be equal to\r\n          the value returned by MeshVertexCount. In which case, the list will\r\n          identify the naked status for each vertex returned by MeshVertices\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshOffset","Arguments":["mesh_id","distance"],"Signature":"MeshOffset (mesh_id, distance)","Description":"Makes a new mesh with vertices offset at a distance in the opposite\r\n        direction of the existing vertex normals\r\n        ","ArgumentDesc":"\r\nmesh_id = identifier of a mesh object\r\ndistance = the distance to offset\r\n        ","Returns":"\r\nid of the new mesh object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshOffset in module rhinoscript.mesh:\r\n\r\nMeshOffset(mesh_id, distance) |      Makes a new mesh with vertices offset at a distance in the opposite\r\n        direction of the existing vertex normals\r\n        Parameters:\r\n          mesh_id = identifier of a mesh object\r\n          distance = the distance to offset\r\n        Returns:\r\n          id of the new mesh object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshOutline","Arguments":["object_ids","view=None"],"Signature":"MeshOutline (object_ids, view=None)","Description":"Creates polyline curve outlines of mesh objects\r\n        ","ArgumentDesc":"\r\nobjects_ids = identifiers of meshes to outline\r\nview(opt) = view to use for outline direction\r\n        ","Returns":"\r\nlist of polyline curve id on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshOutline in module rhinoscript.mesh:\r\n\r\nMeshOutline(object_ids, view=None) |      Creates polyline curve outlines of mesh objects\r\n        Parameters:\r\n          objects_ids = identifiers of meshes to outline\r\n          view(opt) = view to use for outline direction\r\n        Returns:\r\n          list of polyline curve id on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshQuadCount","Arguments":["object_id"],"Signature":"MeshQuadCount (object_id)","Description":"Returns the number of quad faces of a mesh object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshQuadCount in module rhinoscript.mesh:\r\n\r\nMeshQuadCount(object_id) |      Returns the number of quad faces of a mesh object\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshQuadsToTriangles","Arguments":["object_id"],"Signature":"MeshQuadsToTriangles (object_id)","Description":"Converts a mesh object's quad faces to triangles\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshQuadsToTriangles in module rhinoscript.mesh:\r\n\r\nMeshQuadsToTriangles(object_id) |      Converts a mesh object's quad faces to triangles\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshToNurb","Arguments":["object_id","trimmed_triangles=True","delete_input=False"],"Signature":"MeshToNurb (object_id, trimmed_triangles=True, delete_input=False)","Description":"Duplicates each polygon in a mesh with a NURBS surface. The resulting\r\n        surfaces are then joined into a polysurface and added to the document\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\ntrimmed_triangles[opt] = if True, triangles in the mesh will be\r\n  represented by a trimmed plane\r\ndelete_input[opt] = delete input object\r\n        ","Returns":"\r\nlist of identifiers for the new breps on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshToNurb in module rhinoscript.mesh:\r\n\r\nMeshToNurb(object_id, trimmed_triangles=True, delete_input=False) |      Duplicates each polygon in a mesh with a NURBS surface. The resulting\r\n        surfaces are then joined into a polysurface and added to the document\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n          trimmed_triangles[opt] = if True, triangles in the mesh will be\r\n            represented by a trimmed plane\r\n          delete_input[opt] = delete input object\r\n        Returns:\r\n          list of identifiers for the new breps on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshTriangleCount","Arguments":["object_id"],"Signature":"MeshTriangleCount (object_id)","Description":"Returns number of triangular faces of a mesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshTriangleCount in module rhinoscript.mesh:\r\n\r\nMeshTriangleCount(object_id) |      Returns number of triangular faces of a mesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshVertexColors","Arguments":["mesh_id","colors=0"],"Signature":"MeshVertexColors (mesh_id, colors=0)","Description":"Returns of modifies vertex colors of a mesh\r\n        ","ArgumentDesc":"\r\nmesh_id = identifier of a mesh object\r\ncolors[opt] = A list of color values. Note, for each vertex, there must\r\n  be a corresponding vertex color. If the value is None, then any\r\n  existing vertex colors will be removed from the mesh\r\n        ","Returns":"\r\nif colors is not specified, the current vertex colors\r\nif colors is specified, the previous vertex colors\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshVertexColors in module rhinoscript.mesh:\r\n\r\nMeshVertexColors(mesh_id, colors=0) |      Returns of modifies vertex colors of a mesh\r\n        Parameters:\r\n          mesh_id = identifier of a mesh object\r\n          colors[opt] = A list of color values. Note, for each vertex, there must\r\n            be a corresponding vertex color. If the value is None, then any\r\n            existing vertex colors will be removed from the mesh\r\n        Returns:\r\n          if colors is not specified, the current vertex colors\r\n          if colors is specified, the previous vertex colors","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshVertexCount","Arguments":["object_id"],"Signature":"MeshVertexCount (object_id)","Description":"Returns the vertex count of a mesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshVertexCount in module rhinoscript.mesh:\r\n\r\nMeshVertexCount(object_id) |      Returns the vertex count of a mesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshVertexFaces","Arguments":["mesh_id","vertex_index"],"Signature":"MeshVertexFaces (mesh_id, vertex_index)","Description":"Returns the mesh faces that share a specified mesh vertex\r\n        ","ArgumentDesc":"\r\nmesh_id = identifier of a mesh object\r\nvertex_index = index of the mesh vertex to find faces for\r\n        ","Returns":"\r\nlist of face indices on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshVertexFaces in module rhinoscript.mesh:\r\n\r\nMeshVertexFaces(mesh_id, vertex_index) |      Returns the mesh faces that share a specified mesh vertex\r\n        Parameters:\r\n          mesh_id = identifier of a mesh object\r\n          vertex_index = index of the mesh vertex to find faces for\r\n        Returns:\r\n          list of face indices on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshVertexNormals","Arguments":["mesh_id"],"Signature":"MeshVertexNormals (mesh_id)","Description":"Returns the vertex unit normal for each vertex of a mesh\r\n        ","ArgumentDesc":"\r\nmesh_id = identifier of a mesh object\r\n        ","Returns":"\r\nlist of vertex normals, (empty list if no normals exist)\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshVertexNormals in module rhinoscript.mesh:\r\n\r\nMeshVertexNormals(mesh_id) |      Returns the vertex unit normal for each vertex of a mesh\r\n        Parameters:\r\n          mesh_id = identifier of a mesh object\r\n        Returns:\r\n          list of vertex normals, (empty list if no normals exist)","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshVertices","Arguments":["object_id"],"Signature":"MeshVertices (object_id)","Description":"Returns the vertices of a mesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        ","Returns":"\r\nlist of 3D points\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshVertices in module rhinoscript.mesh:\r\n\r\nMeshVertices(object_id) |      Returns the vertices of a mesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          list of 3D points","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshVolume","Arguments":["object_ids"],"Signature":"MeshVolume (object_ids)","Description":"\r\nReturns the approximate volume of one or more closed meshes\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of one or more mesh objects\r\n        ","Returns":"\r\ntuple containing 3 numbers if successful where\r\n  element[0] = number of meshes used in volume calculation\r\n  element[1] = total volume of all meshes\r\n  element[2] = the error estimate\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshVolume in module rhinoscript.mesh:\r\n\r\nMeshVolume(object_ids) |      \r\n        Returns the approximate volume of one or more closed meshes\r\n        Parameters:\r\n          object_ids = identifiers of one or more mesh objects\r\n        Returns:\r\n          tuple containing 3 numbers if successful where\r\n            element[0] = number of meshes used in volume calculation\r\n            element[1] = total volume of all meshes\r\n            element[2] = the error estimate\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"MeshVolumeCentroid","Arguments":["object_id"],"Signature":"MeshVolumeCentroid (object_id)","Description":"Calculates the volume centroid of a mesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        ","Returns":"\r\nPoint3d representing the volume centroid\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MeshVolumeCentroid in module rhinoscript.mesh:\r\n\r\nMeshVolumeCentroid(object_id) |      Calculates the volume centroid of a mesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          Point3d representing the volume centroid\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"PullCurveToMesh","Arguments":["mesh_id","curve_id"],"Signature":"PullCurveToMesh (mesh_id, curve_id)","Description":"Pulls a curve to a mesh. The function makes a polyline approximation of\r\n        the input curve and gets the closest point on the mesh for each point on\r\n        the polyline. Then it \"connects the points\" to create a polyline on the mesh\r\n        Paramters:\r\n          mesh_id = identifier of mesh that pulls\r\n          curve_id = identifier of curve to pull\r\n        Returns:\r\n          Guid of new curve on success\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PullCurveToMesh in module rhinoscript.mesh:\r\n\r\nPullCurveToMesh(mesh_id, curve_id) |      Pulls a curve to a mesh. The function makes a polyline approximation of\r\n        the input curve and gets the closest point on the mesh for each point on\r\n        the polyline. Then it \"connects the points\" to create a polyline on the mesh\r\n        Paramters:\r\n          mesh_id = identifier of mesh that pulls\r\n          curve_id = identifier of curve to pull\r\n        Returns:\r\n          Guid of new curve on success\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"SplitDisjointMesh","Arguments":["object_id","delete_input=False"],"Signature":"SplitDisjointMesh (object_id, delete_input=False)","Description":"Splits up a mesh into its unconnected pieces\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\ndelete_input [opt] = delete the input object\r\n        ","Returns":"\r\nlist of Guids for the new meshes\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SplitDisjointMesh in module rhinoscript.mesh:\r\n\r\nSplitDisjointMesh(object_id, delete_input=False) |      Splits up a mesh into its unconnected pieces\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n          delete_input [opt] = delete the input object\r\n        Returns:\r\n          list of Guids for the new meshes","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"mesh","Name":"UnifyMeshNormals","Arguments":["object_id"],"Signature":"UnifyMeshNormals (object_id)","Description":"Fixes inconsistencies in the directions of faces of a mesh\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of a mesh object\r\n        ","Returns":"\r\nnumber of faces that were modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnifyMeshNormals in module rhinoscript.mesh:\r\n\r\nUnifyMeshNormals(object_id) |      Fixes inconsistencies in the directions of faces of a mesh\r\n        Parameters:\r\n          object_id = identifier of a mesh object\r\n        Returns:\r\n          number of faces that were modified","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"object","functions":[{"ModuleName":"object","Name":"CopyObject","Arguments":["object_id","translation=None"],"Signature":"CopyObject (object_id, translation=None)","Description":"Copies object from one location to another, or in-place.\r\n        ","ArgumentDesc":"\r\nobject_id: object to copy\r\ntranslation[opt]: translation vector to apply\r\n        ","Returns":"\r\nid for the copy if successful\r\nNone if not able to copy\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CopyObject in module rhinoscript.object:\r\n\r\nCopyObject(object_id, translation=None) |      Copies object from one location to another, or in-place.\r\n        Parameters:\r\n          object_id: object to copy\r\n          translation[opt]: translation vector to apply\r\n        Returns:\r\n          id for the copy if successful\r\n          None if not able to copy","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"CopyObjects","Arguments":["object_ids","translation=None"],"Signature":"CopyObjects (object_ids, translation=None)","Description":"Copies one or more objects from one location to another, or in-place.\r\n        ","ArgumentDesc":"\r\nobject_ids: list of objects to copy\r\ntranslation [opt]: list of three numbers or Vector3d representing\r\n                   translation vector to apply to copied set\r\n        ","Returns":"\r\nlist of identifiers for the copies if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CopyObjects in module rhinoscript.object:\r\n\r\nCopyObjects(object_ids, translation=None) |      Copies one or more objects from one location to another, or in-place.\r\n        Parameters:\r\n          object_ids: list of objects to copy\r\n          translation [opt]: list of three numbers or Vector3d representing\r\n                             translation vector to apply to copied set\r\n        Returns:\r\n          list of identifiers for the copies if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"DeleteObject","Arguments":["object_id"],"Signature":"DeleteObject (object_id)","Description":"Deletes a single object from the document\r\n        ","ArgumentDesc":"\r\nobject_id: identifier of object to delete\r\n        ","Returns":"\r\nTrue of False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteObject in module rhinoscript.object:\r\n\r\nDeleteObject(object_id) |      Deletes a single object from the document\r\n        Parameters:\r\n          object_id: identifier of object to delete\r\n        Returns:\r\n          True of False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"DeleteObjects","Arguments":["object_ids"],"Signature":"DeleteObjects (object_ids)","Description":"Deletes one or more objects from the document\r\n        ","ArgumentDesc":"\r\nobject_ids: identifiers of objects to delete\r\n        ","Returns":"\r\nNumber of objects deleted\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteObjects in module rhinoscript.object:\r\n\r\nDeleteObjects(object_ids) |      Deletes one or more objects from the document\r\n        Parameters:\r\n          object_ids: identifiers of objects to delete\r\n        Returns:\r\n          Number of objects deleted","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"FlashObject","Arguments":["object_ids","style=True"],"Signature":"FlashObject (object_ids, style=True)","Description":"Causes the selection state of one or more objects to change momentarily\r\n        so the object appears to flash on the screen\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of objects to flash\r\nstyle[opt] = If True, flash between object color and selection color.\r\n  If False, flash between visible and invisible\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function FlashObject in module rhinoscript.object:\r\n\r\nFlashObject(object_ids, style=True) |      Causes the selection state of one or more objects to change momentarily\r\n        so the object appears to flash on the screen\r\n        Parameters:\r\n          object_ids = identifiers of objects to flash\r\n          style[opt] = If True, flash between object color and selection color.\r\n            If False, flash between visible and invisible","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"HideObject","Arguments":["object_id"],"Signature":"HideObject (object_id)","Description":"Hides a single object\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid representing id of object to hide\r\n        ","Returns":"\r\nTrue of False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HideObject in module rhinoscript.object:\r\n\r\nHideObject(object_id) |      Hides a single object\r\n        Parameters:\r\n          object_id: String or Guid representing id of object to hide\r\n        Returns:\r\n          True of False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"HideObjects","Arguments":["object_ids"],"Signature":"HideObjects (object_ids)","Description":"Hides one or more objects\r\n        ","ArgumentDesc":"\r\nobject_ids: identifiers of objects to hide\r\n        ","Returns":"\r\nNumber of objects hidden\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HideObjects in module rhinoscript.object:\r\n\r\nHideObjects(object_ids) |      Hides one or more objects\r\n        Parameters:\r\n          object_ids: identifiers of objects to hide\r\n        Returns:\r\n          Number of objects hidden","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsLayoutObject","Arguments":["object_id"],"Signature":"IsLayoutObject (object_id)","Description":"Verifies that an object is in either page layout space or model space\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid representing id of an object\r\n        ","Returns":"\r\nTrue if the object is in page layout space\r\nFalse if the object is in model space\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayoutObject in module rhinoscript.object:\r\n\r\nIsLayoutObject(object_id) |      Verifies that an object is in either page layout space or model space\r\n        Parameters:\r\n          object_id: String or Guid representing id of an object\r\n        Returns:\r\n          True if the object is in page layout space\r\n          False if the object is in model space","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObject","Arguments":["object_id"],"Signature":"IsObject (object_id)","Description":"Verifies the existance of an object\r\n        ","ArgumentDesc":"\r\nobject_id: The identifier of an object\r\n        ","Returns":"\r\nTrue if the object exists\r\nFalse if the object does not exist\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObject in module rhinoscript.object:\r\n\r\nIsObject(object_id) |      Verifies the existance of an object\r\n        Parameters:\r\n          object_id: The identifier of an object\r\n        Returns:\r\n          True if the object exists\r\n          False if the object does not exist","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectHidden","Arguments":["object_id"],"Signature":"IsObjectHidden (object_id)","Description":"Verifies that an object is hidden. Hidden objects are not visible, cannot\r\n        be snapped to, and cannot be selected\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\n        ","Returns":"\r\nTrue if the object is hidden\r\nFalse if the object is not hidden\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectHidden in module rhinoscript.object:\r\n\r\nIsObjectHidden(object_id) |      Verifies that an object is hidden. Hidden objects are not visible, cannot\r\n        be snapped to, and cannot be selected\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n        Returns:\r\n          True if the object is hidden\r\n          False if the object is not hidden","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectInBox","Arguments":["object_id","box","test_mode=True"],"Signature":"IsObjectInBox (object_id, box, test_mode=True)","Description":"Verifies an object's bounding box is inside of another bounding box\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\nbox: bounding box to test for containment\r\ntest_mode[opt] = If True, the object's bounding box must be contained by box\r\n  If False, the object's bounding box must be contained by or intersect box\r\n        ","Returns":"\r\nTrue if object is inside box\r\nFalse is object is not inside box\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectInBox in module rhinoscript.object:\r\n\r\nIsObjectInBox(object_id, box, test_mode=True) |      Verifies an object's bounding box is inside of another bounding box\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n          box: bounding box to test for containment\r\n          test_mode[opt] = If True, the object's bounding box must be contained by box\r\n            If False, the object's bounding box must be contained by or intersect box\r\n        Returns:\r\n          True if object is inside box\r\n          False is object is not inside box","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectInGroup","Arguments":["object_id","group_name=None"],"Signature":"IsObjectInGroup (object_id, group_name=None)","Description":"Verifies that an object is a member of a group\r\n        ","ArgumentDesc":"\r\nobject_id: The identifier of an object\r\ngroup_name[opt]: The name of a group. If omitted, the function\r\n  verifies that the object is a member of any group\r\n        ","Returns":"\r\nTrue if the object is a member of the specified group. If a group_name\r\n  was not specified, the object is a member of some group.\r\nFalse if the object is not a member of the specified group. If a\r\n  group_name was not specified, the object is not a member of any group\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectInGroup in module rhinoscript.object:\r\n\r\nIsObjectInGroup(object_id, group_name=None) |      Verifies that an object is a member of a group\r\n        Parameters:\r\n          object_id: The identifier of an object\r\n          group_name[opt]: The name of a group. If omitted, the function\r\n            verifies that the object is a member of any group\r\n        Returns:\r\n          True if the object is a member of the specified group. If a group_name\r\n            was not specified, the object is a member of some group.\r\n          False if the object is not a member of the specified group. If a\r\n            group_name was not specified, the object is not a member of any group","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectLocked","Arguments":["object_id"],"Signature":"IsObjectLocked (object_id)","Description":"Verifies that an object is locked. Locked objects are visible, and can\r\n        be snapped to, but cannot be selected\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\n        ","Returns":"\r\nTrue if the object is locked\r\nFalse if the object is not locked\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectLocked in module rhinoscript.object:\r\n\r\nIsObjectLocked(object_id) |      Verifies that an object is locked. Locked objects are visible, and can\r\n        be snapped to, but cannot be selected\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n        Returns:\r\n          True if the object is locked\r\n          False if the object is not locked","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectNormal","Arguments":["object_id"],"Signature":"IsObjectNormal (object_id)","Description":"Verifies that an object is normal. Normal objects are visible, can be\r\n        snapped to, and can be selected\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\n        ","Returns":"\r\nTrue if the object is normal\r\nFalse if the object is not normal\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectNormal in module rhinoscript.object:\r\n\r\nIsObjectNormal(object_id) |      Verifies that an object is normal. Normal objects are visible, can be\r\n        snapped to, and can be selected\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n        Returns:\r\n          True if the object is normal\r\n          False if the object is not normal","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectReference","Arguments":["object_id"],"Signature":"IsObjectReference (object_id)","Description":"Verifies that an object is a reference object. Reference objects are\r\n        objects that are not part of the current document\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\n        ","Returns":"\r\nTrue if the object is a reference object\r\nFalse if the object is not a reference object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectReference in module rhinoscript.object:\r\n\r\nIsObjectReference(object_id) |      Verifies that an object is a reference object. Reference objects are\r\n        objects that are not part of the current document\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n        Returns:\r\n          True if the object is a reference object\r\n          False if the object is not a reference object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectSelectable","Arguments":["object_id"],"Signature":"IsObjectSelectable (object_id)","Description":"Verifies that an object can be selected\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectSelectable in module rhinoscript.object:\r\n\r\nIsObjectSelectable(object_id) |      Verifies that an object can be selected\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectSelected","Arguments":["object_id"],"Signature":"IsObjectSelected (object_id)","Description":"Verifies that an object is currently selected\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\n        ","Returns":"\r\nTrue if the object is selected\r\nFalse if the object is not selected\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectSelected in module rhinoscript.object:\r\n\r\nIsObjectSelected(object_id) |      Verifies that an object is currently selected\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n        Returns:\r\n          True if the object is selected\r\n          False if the object is not selected","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectSolid","Arguments":["object_id"],"Signature":"IsObjectSolid (object_id)","Description":"Determines if an object is closed, solid\r\n        ","ArgumentDesc":"\r\nobject_id: A string or Guid. The identifier of an object\r\n        ","Returns":"\r\nTrue if the object is solid, or a mesh is closed.\r\nFalse otherwise.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectSolid in module rhinoscript.object:\r\n\r\nIsObjectSolid(object_id) |      Determines if an object is closed, solid\r\n        Parameters:\r\n          object_id: A string or Guid. The identifier of an object\r\n        Returns:\r\n          True if the object is solid, or a mesh is closed.\r\n          False otherwise.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsObjectValid","Arguments":["object_id"],"Signature":"IsObjectValid (object_id)","Description":"Verifies an object's geometry is valid and without error\r\n        ","ArgumentDesc":"\r\nobject_id: The identifier of an object\r\n        ","Returns":"\r\nTrue if the object is valid\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsObjectValid in module rhinoscript.object:\r\n\r\nIsObjectValid(object_id) |      Verifies an object's geometry is valid and without error\r\n        Parameters:\r\n          object_id: The identifier of an object\r\n        Returns:\r\n          True if the object is valid","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"IsVisibleInView","Arguments":["object_id","view=None"],"Signature":"IsVisibleInView (object_id, view=None)","Description":"Verifies an object is visible in a view\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsVisibleInView in module rhinoscript.object:\r\n\r\nIsVisibleInView(object_id, view=None) |      Verifies an object is visible in a view","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"LockObject","Arguments":["object_id"],"Signature":"LockObject (object_id)","Description":"Locks a single object. Locked objects are visible, and they can be\r\n        snapped to. But, they cannot be selected.\r\n        ","ArgumentDesc":"\r\nobject_id: The identifier of an object\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LockObject in module rhinoscript.object:\r\n\r\nLockObject(object_id) |      Locks a single object. Locked objects are visible, and they can be\r\n        snapped to. But, they cannot be selected.\r\n        Parameters:\r\n          object_id: The identifier of an object\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"LockObjects","Arguments":["object_ids"],"Signature":"LockObjects (object_ids)","Description":"Locks one or more objects. Locked objects are visible, and they can be\r\n        snapped to. But, they cannot be selected.\r\n        ","ArgumentDesc":"\r\nobject_ids: list of Strings or Guids. The identifiers of objects\r\n        ","Returns":"\r\nnumber of objects locked\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LockObjects in module rhinoscript.object:\r\n\r\nLockObjects(object_ids) |      Locks one or more objects. Locked objects are visible, and they can be\r\n        snapped to. But, they cannot be selected.\r\n        Parameters:\r\n          object_ids: list of Strings or Guids. The identifiers of objects\r\n        Returns:\r\n          number of objects locked","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"MatchObjectAttributes","Arguments":["target_ids","source_id=None"],"Signature":"MatchObjectAttributes (target_ids, source_id=None)","Description":"Matches, or copies the attributes of a source object to a target object\r\n        ","ArgumentDesc":"\r\ntarget_ids = identifiers of objects to copy attributes to\r\nsource_id[opt] = identifier of object to copy attributes from. If None,\r\n  then the default attributes are copied to the target_ids\r\n        ","Returns":"\r\nnumber of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MatchObjectAttributes in module rhinoscript.object:\r\n\r\nMatchObjectAttributes(target_ids, source_id=None) |      Matches, or copies the attributes of a source object to a target object\r\n        Parameters:\r\n          target_ids = identifiers of objects to copy attributes to\r\n          source_id[opt] = identifier of object to copy attributes from. If None,\r\n            then the default attributes are copied to the target_ids\r\n        Returns:\r\n          number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"MirrorObject","Arguments":["object_id","start_point","end_point","copy=False"],"Signature":"MirrorObject (object_id, start_point, end_point, copy=False)","Description":"Mirrors a single object\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\nstart_point: start of the mirror plane\r\nend_point: end of the mirror plane\r\ncopy[opt] = copy the object\r\n        ","Returns":"\r\nIdentifier of the mirrored object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MirrorObject in module rhinoscript.object:\r\n\r\nMirrorObject(object_id, start_point, end_point, copy=False) |      Mirrors a single object\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n          start_point: start of the mirror plane\r\n          end_point: end of the mirror plane\r\n          copy[opt] = copy the object\r\n        Returns:\r\n          Identifier of the mirrored object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"MirrorObjects","Arguments":["object_ids","start_point","end_point","copy=False"],"Signature":"MirrorObjects (object_ids, start_point, end_point, copy=False)","Description":"Mirrors a list of objects\r\n        ","ArgumentDesc":"\r\nobject_ids: identifiers of objects to mirror\r\nstart_point: start of the mirror plane\r\nend_point: end of the mirror plane\r\ncopy[opt] = copy the objects\r\n        ","Returns":"\r\nList of identifiers of the mirrored objects if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MirrorObjects in module rhinoscript.object:\r\n\r\nMirrorObjects(object_ids, start_point, end_point, copy=False) |      Mirrors a list of objects\r\n        Parameters:\r\n          object_ids: identifiers of objects to mirror\r\n          start_point: start of the mirror plane\r\n          end_point: end of the mirror plane\r\n          copy[opt] = copy the objects\r\n        Returns:\r\n          List of identifiers of the mirrored objects if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"MoveObject","Arguments":["object_id","translation"],"Signature":"MoveObject (object_id, translation)","Description":"Moves a single object\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\ntranslation: list of 3 numbers or Vector3d\r\n        ","Returns":"\r\nIdentifier of the moved object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MoveObject in module rhinoscript.object:\r\n\r\nMoveObject(object_id, translation) |      Moves a single object\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n          translation: list of 3 numbers or Vector3d\r\n        Returns:\r\n          Identifier of the moved object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"MoveObjects","Arguments":["object_ids","translation"],"Signature":"MoveObjects (object_ids, translation)","Description":"Moves one or more objects\r\n        ","ArgumentDesc":"\r\nobject_ids: The identifiers objects to move\r\ntranslation: list of 3 numbers or Vector3d\r\n        ","Returns":"\r\nList of identifiers of the moved objects if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MoveObjects in module rhinoscript.object:\r\n\r\nMoveObjects(object_ids, translation) |      Moves one or more objects\r\n        Parameters:\r\n          object_ids: The identifiers objects to move\r\n          translation: list of 3 numbers or Vector3d\r\n        Returns:\r\n          List of identifiers of the moved objects if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectColor","Arguments":["object_ids","color=None"],"Signature":"ObjectColor (object_ids, color=None)","Description":"Returns of modifies the color of an object. Object colors are represented\r\n        as RGB colors. An RGB color specifies the relative intensity of red, green,\r\n        and blue to cause a specific color to be displayed\r\n        ","ArgumentDesc":"\r\nobject_ids = id or ids of object(s)\r\ncolor[opt] = the new color value. If omitted, then current object\r\n    color is returned. If object_ids is a list, color is required\r\n        ","Returns":"\r\nIf color value is not specified, the current color value\r\nIf color value is specified, the previous color value\r\nIf object_ids is a list, then the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectColor in module rhinoscript.object:\r\n\r\nObjectColor(object_ids, color=None) |      Returns of modifies the color of an object. Object colors are represented\r\n        as RGB colors. An RGB color specifies the relative intensity of red, green,\r\n        and blue to cause a specific color to be displayed\r\n        Parameters:\r\n            object_ids = id or ids of object(s)\r\n            color[opt] = the new color value. If omitted, then current object\r\n                color is returned. If object_ids is a list, color is required\r\n        Returns:\r\n            If color value is not specified, the current color value\r\n            If color value is specified, the previous color value\r\n            If object_ids is a list, then the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectColorSource","Arguments":["object_ids","source=None"],"Signature":"ObjectColorSource (object_ids, source=None)","Description":"Returns of modifies the color source of an object.\r\n        Paramters:\r\n          object_ids = single identifier of list of identifiers\r\n          source[opt] = new color source\r\n              0 = color from layer\r\n              1 = color from object\r\n              2 = color from material\r\n              3 = color from parent\r\n        Returns:\r\n          if color source is not specified, the current color source\r\n          is color source is specified, the previous color source\r\n          if color_ids is a list, then the number of objects modifief\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectColorSource in module rhinoscript.object:\r\n\r\nObjectColorSource(object_ids, source=None) |      Returns of modifies the color source of an object.\r\n        Paramters:\r\n          object_ids = single identifier of list of identifiers\r\n          source[opt] = new color source\r\n              0 = color from layer\r\n              1 = color from object\r\n              2 = color from material\r\n              3 = color from parent\r\n        Returns:\r\n          if color source is not specified, the current color source\r\n          is color source is specified, the previous color source\r\n          if color_ids is a list, then the number of objects modifief","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectDescription","Arguments":["object_id"],"Signature":"ObjectDescription (object_id)","Description":"Returns a short text description of an object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of an object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectDescription in module rhinoscript.object:\r\n\r\nObjectDescription(object_id) |      Returns a short text description of an object\r\n        Parameters:\r\n          object_id = identifier of an object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectGroups","Arguments":["object_id"],"Signature":"ObjectGroups (object_id)","Description":"Returns all of the group names that an object is assigned to\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of an object\r\n        ","Returns":"\r\nlist of group names on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectGroups in module rhinoscript.object:\r\n\r\nObjectGroups(object_id) |      Returns all of the group names that an object is assigned to\r\n        Parameters:\r\n          object_id = identifier of an object\r\n        Returns:\r\n          list of group names on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectLayer","Arguments":["object_id","layer=None"],"Signature":"ObjectLayer (object_id, layer=None)","Description":"Returns or modifies the layer of an object\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of the object(s)\r\nlayer[opt] = name of an existing layer\r\n        ","Returns":"\r\nIf a layer is not specified, the object's current layer\r\nIf a layer is specified, the object's previous layer\r\nIf object_id is a list or tuple, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectLayer in module rhinoscript.object:\r\n\r\nObjectLayer(object_id, layer=None) |      Returns or modifies the layer of an object\r\n        Parameters:\r\n          object_id = the identifier of the object(s)\r\n          layer[opt] = name of an existing layer\r\n        Returns:\r\n          If a layer is not specified, the object's current layer\r\n          If a layer is specified, the object's previous layer\r\n          If object_id is a list or tuple, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectLayout","Arguments":["object_id","layout=None","return_name=True"],"Signature":"ObjectLayout (object_id, layout=None, return_name=True)","Description":"Returns or changes the layout or model space of an object\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of the object\r\nlayout[opt] = to change, or move, an object from model space to page\r\n  layout space, or from one page layout to another, then specify the\r\n  title or identifier of an existing page layout view. To move an object\r\n  from page layout space to model space, just specify None\r\nreturn_name[opt] = If True, the name, or title, of the page layout view\r\n  is returned. If False, the identifier of the page layout view is returned\r\n        ","Returns":"\r\nif layout is not specified, the object's current page layout view\r\nif layout is specfied, the object's previous page layout view\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectLayout in module rhinoscript.object:\r\n\r\nObjectLayout(object_id, layout=None, return_name=True) |      Returns or changes the layout or model space of an object\r\n        Parameters:\r\n          object_id = identifier of the object\r\n          layout[opt] = to change, or move, an object from model space to page\r\n            layout space, or from one page layout to another, then specify the\r\n            title or identifier of an existing page layout view. To move an object\r\n            from page layout space to model space, just specify None\r\n          return_name[opt] = If True, the name, or title, of the page layout view\r\n            is returned. If False, the identifier of the page layout view is returned\r\n        Returns:\r\n          if layout is not specified, the object's current page layout view\r\n          if layout is specfied, the object's previous page layout view\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectLinetype","Arguments":["object_ids","linetype=None"],"Signature":"ObjectLinetype (object_ids, linetype=None)","Description":"Returns of modifies the linetype of an object\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of object(s)\r\nlinetype[opt] = name of an existing linetype. If omitted, the current\r\n  linetype is returned. If object_ids is a list of identifiers, this parameter\r\n  is required\r\n        ","Returns":"\r\nIf a linetype is not specified, the object's current linetype\r\nIf linetype is specified, the object's previous linetype\r\nIf object_ids is a list, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectLinetype in module rhinoscript.object:\r\n\r\nObjectLinetype(object_ids, linetype=None) |      Returns of modifies the linetype of an object\r\n        Parameters:\r\n          object_ids = identifiers of object(s)\r\n          linetype[opt] = name of an existing linetype. If omitted, the current\r\n            linetype is returned. If object_ids is a list of identifiers, this parameter\r\n            is required\r\n        Returns:\r\n          If a linetype is not specified, the object's current linetype\r\n          If linetype is specified, the object's previous linetype\r\n          If object_ids is a list, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectLinetypeSource","Arguments":["object_ids","source=None"],"Signature":"ObjectLinetypeSource (object_ids, source=None)","Description":"Returns of modifies the linetype source of an object\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of object(s)\r\nsource[opt] = new linetype source. If omitted, the current source is returned.\r\n  If object_ids is a list of identifiers, this parameter is required\r\n    0 = By Layer\r\n    1 = By Object\r\n    3 = By Parent\r\n        ","Returns":"\r\nIf a source is not specified, the object's current linetype source\r\nIf source is specified, the object's previous linetype source\r\nIf object_ids is a list, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectLinetypeSource in module rhinoscript.object:\r\n\r\nObjectLinetypeSource(object_ids, source=None) |      Returns of modifies the linetype source of an object\r\n        Parameters:\r\n          object_ids = identifiers of object(s)\r\n          source[opt] = new linetype source. If omitted, the current source is returned.\r\n            If object_ids is a list of identifiers, this parameter is required\r\n              0 = By Layer\r\n              1 = By Object\r\n              3 = By Parent\r\n        Returns:\r\n          If a source is not specified, the object's current linetype source\r\n          If source is specified, the object's previous linetype source\r\n          If object_ids is a list, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectMaterialIndex","Arguments":["object_id","material_index=None"],"Signature":"ObjectMaterialIndex (object_id, material_index=None)","Description":"Returns or changes the material index of an object. Rendering materials are stored in\r\n        Rhino's rendering material table. The table is conceptually an array. Render\r\n        materials associated with objects and layers are specified by zero based\r\n        indices into this array.\r\n        ","ArgumentDesc":"\r\nobject_id = identifier of an object\r\nindex = optional. the new material index\r\n        ","Returns":"\r\nIf the return value of ObjectMaterialSource is \"material by object\", then\r\nthe return value of this function is the index of the object's rendering\r\nmaterial. A material index of -1 indicates no material has been assigned,\r\nand that Rhino's internal default material has been assigned to the object.\r\nNone on failure      \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectMaterialIndex in module rhinoscript.object:\r\n\r\nObjectMaterialIndex(object_id, material_index=None) |      Returns or changes the material index of an object. Rendering materials are stored in\r\n        Rhino's rendering material table. The table is conceptually an array. Render\r\n        materials associated with objects and layers are specified by zero based\r\n        indices into this array.\r\n        Parameters:\r\n          object_id = identifier of an object\r\n          index = optional. the new material index\r\n        Returns:\r\n          If the return value of ObjectMaterialSource is \"material by object\", then\r\n          the return value of this function is the index of the object's rendering\r\n          material. A material index of -1 indicates no material has been assigned,\r\n          and that Rhino's internal default material has been assigned to the object.\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectMaterialSource","Arguments":["object_ids","source=None"],"Signature":"ObjectMaterialSource (object_ids, source=None)","Description":"Returns or modifies the rendering material source of an object.\r\n        ","ArgumentDesc":"\r\nobject_ids = one or more object identifiers\r\nsource [opt] = The new rendering material source. If omitted and a single\r\n  object is provided in object_ids, then the current material source is\r\n  returned. This parameter is required if multiple objects are passed in\r\n  object_ids\r\n  0 = Material from layer\r\n  1 = Material from object\r\n  3 = Material from parent\r\n        ","Returns":"\r\nIf source is not specified, the current rendering material source\r\nIf source is specified, the previous rendering material source\r\nIf object_ids refers to multiple objects, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectMaterialSource in module rhinoscript.object:\r\n\r\nObjectMaterialSource(object_ids, source=None) |      Returns or modifies the rendering material source of an object.\r\n        Parameters:\r\n          object_ids = one or more object identifiers\r\n          source [opt] = The new rendering material source. If omitted and a single\r\n            object is provided in object_ids, then the current material source is\r\n            returned. This parameter is required if multiple objects are passed in\r\n            object_ids\r\n            0 = Material from layer\r\n            1 = Material from object\r\n            3 = Material from parent\r\n        Returns:\r\n          If source is not specified, the current rendering material source\r\n          If source is specified, the previous rendering material source\r\n          If object_ids refers to multiple objects, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectName","Arguments":["object_id","name=None"],"Signature":"ObjectName (object_id, name=None)","Description":"Returns or modifies the name of an object\r\n        ","ArgumentDesc":"\r\nobject_id = id or ids of object(s)\r\nname[opt] = the new object name. If omitted, the current name is returned\r\n        ","Returns":"\r\nIf name is not specified, the current object name\r\nIf name is specified, the previous object name\r\nIf object_id is a list, the number of objects changed\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectName in module rhinoscript.object:\r\n\r\nObjectName(object_id, name=None) |      Returns or modifies the name of an object\r\n        Parameters:\r\n          object_id = id or ids of object(s)\r\n          name[opt] = the new object name. If omitted, the current name is returned\r\n        Returns:\r\n          If name is not specified, the current object name\r\n          If name is specified, the previous object name\r\n          If object_id is a list, the number of objects changed","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectPrintColor","Arguments":["object_ids","color=None"],"Signature":"ObjectPrintColor (object_ids, color=None)","Description":"Returns or modifies the print color of an object\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of object(s)\r\ncolor[opt] = new print color. If omitted, the current color is returned.\r\n        ","Returns":"\r\nIf color is not specified, the object's current print color\r\nIf color is specified, the object's previous print color\r\nIf object_ids is a list or tuple, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectPrintColor in module rhinoscript.object:\r\n\r\nObjectPrintColor(object_ids, color=None) |      Returns or modifies the print color of an object\r\n        Parameters:\r\n          object_ids = identifiers of object(s)\r\n          color[opt] = new print color. If omitted, the current color is returned.\r\n        Returns:\r\n          If color is not specified, the object's current print color\r\n          If color is specified, the object's previous print color\r\n          If object_ids is a list or tuple, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectPrintColorSource","Arguments":["object_ids","source=None"],"Signature":"ObjectPrintColorSource (object_ids, source=None)","Description":"Returns or modifies the print color source of an object\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of object(s)\r\nsource[opt] = new print color source\r\n  0 = print color by layer\r\n  1 = print color by object\r\n  3 = print color by parent\r\n        ","Returns":"\r\nIf source is not specified, the object's current print color source\r\nIf source is specified, the object's previous print color source\r\nIf object_ids is a list or tuple, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectPrintColorSource in module rhinoscript.object:\r\n\r\nObjectPrintColorSource(object_ids, source=None) |      Returns or modifies the print color source of an object\r\n        Parameters:\r\n          object_ids = identifiers of object(s)\r\n          source[opt] = new print color source\r\n            0 = print color by layer\r\n            1 = print color by object\r\n            3 = print color by parent\r\n        Returns:\r\n          If source is not specified, the object's current print color source\r\n          If source is specified, the object's previous print color source\r\n          If object_ids is a list or tuple, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectPrintWidth","Arguments":["object_ids","width=None"],"Signature":"ObjectPrintWidth (object_ids, width=None)","Description":"Returns or modifies the print width of an object\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of object(s)\r\nwidth[opt] = new print width value in millimeters, where width=0 means use\r\n  the default width, and width<0 means do not print (visible for screen display,\r\n  but does not show on print). If omitted, the current width is returned.\r\n        ","Returns":"\r\nIf width is not specified, the object's current print width\r\nIf width is specified, the object's previous print width\r\nIf object_ids is a list or tuple, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectPrintWidth in module rhinoscript.object:\r\n\r\nObjectPrintWidth(object_ids, width=None) |      Returns or modifies the print width of an object\r\n        Parameters:\r\n          object_ids = identifiers of object(s)\r\n          width[opt] = new print width value in millimeters, where width=0 means use\r\n            the default width, and width<0 means do not print (visible for screen display,\r\n            but does not show on print). If omitted, the current width is returned.\r\n        Returns:\r\n          If width is not specified, the object's current print width\r\n          If width is specified, the object's previous print width\r\n          If object_ids is a list or tuple, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectPrintWidthSource","Arguments":["object_ids","source=None"],"Signature":"ObjectPrintWidthSource (object_ids, source=None)","Description":"Returns or modifies the print width source of an object\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of object(s)\r\nsource[opt] = new print width source\r\n  0 = print width by layer\r\n  1 = print width by object\r\n  3 = print width by parent\r\n        ","Returns":"\r\nIf source is not specified, the object's current print width source\r\nIf source is specified, the object's previous print width source\r\nIf object_ids is a list or tuple, the number of objects modified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectPrintWidthSource in module rhinoscript.object:\r\n\r\nObjectPrintWidthSource(object_ids, source=None) |      Returns or modifies the print width source of an object\r\n        Parameters:\r\n          object_ids = identifiers of object(s)\r\n          source[opt] = new print width source\r\n            0 = print width by layer\r\n            1 = print width by object\r\n            3 = print width by parent\r\n        Returns:\r\n          If source is not specified, the object's current print width source\r\n          If source is specified, the object's previous print width source\r\n          If object_ids is a list or tuple, the number of objects modified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ObjectType","Arguments":["object_id"],"Signature":"ObjectType (object_id)","Description":"Returns the object type\r\n        ","ArgumentDesc":"\r\n          object_id = identifier of an object\r\n        Returns:\r\n          see help for values\r\n        \r\nHelp on object in module __builtin__\r\n\r\n    Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.\r\n    \r\n    object()\r\n    \r\n    \r\nData and other attributes defined here:\r\n\r\n    Equals(...)\r\n            Equals(objA: object, objB: object) -> bool\r\n            \r\n                Determines whether the specified object instances are considered equal.\r\n            \r\n                objA: The first object to compare.\r\n                objB: The second object to compare.\r\n                Returns: true if the objects are considered equal; otherwise, false. If both objA and \r\n                 objB are null, the method returns true.\r\n            \r\n            Equals(self: object, obj: object) -> bool\r\n            \r\n                Determines whether the specified System.Object is equal to the current \r\n                 System.Object.\r\n            \r\n            \r\n                obj: The object to compare with the current object.\r\n                Returns: true if the specified System.Object is equal to the current System.Object; \r\n                 otherwise, false.\r\n            \r\n            Equals(self: PythonType_1$1, obj: PythonType_1$1) -> bool\r\n            Equals(self: Object_2$2, obj: Object_2$2) -> bool\r\n            Equals(self: GetObject_3$3, obj: GetObject_3$3) -> bool\r\n            Equals(self: PythonProperty_4$4, obj: PythonProperty_4$4) -> bool\r\n            Equals(self: PythonDictionary_5$5, obj: PythonDictionary_5$5) -> bool\r\n            Equals(self: PythonTuple_6$6, obj: object) -> bool\r\n            Equals(self: _IOBase_7$7, obj: _IOBase_7$7) -> bool\r\n            Equals(self: _RawIOBase_8$8, obj: _RawIOBase_8$8) -> bool\r\n            Equals(self: _BufferedIOBase_9$9, obj: _BufferedIOBase_9$9) -> bool\r\n            Equals(self: _TextIOBase_10$10, obj: _TextIOBase_10$10) -> bool\r\n            \r\n    GetHashCode(...)\r\n            GetHashCode(self: object) -> int\r\n            \r\n                Serves as a hash function for a particular type.\r\n                Returns: A hash code for the current System.Object.\r\n            GetHashCode(self: PythonType_1$1) -> int\r\n            GetHashCode(self: Object_2$2) -> int\r\n            GetHashCode(self: GetObject_3$3) -> int\r\n            GetHashCode(self: PythonProperty_4$4) -> int\r\n            GetHashCode(self: PythonDictionary_5$5) -> int\r\n            GetHashCode(self: PythonTuple_6$6) -> int\r\n            GetHashCode(self: _IOBase_7$7) -> int\r\n            GetHashCode(self: _RawIOBase_8$8) -> int\r\n            GetHashCode(self: _BufferedIOBase_9$9) -> int\r\n            GetHashCode(self: _TextIOBase_10$10) -> int\r\n            \r\n    GetType(...)\r\n            GetType(self: object) -> Type\r\n            \r\n                Gets the System.Type of the current instance.\r\n                Returns: The exact runtime type of the current instance.\r\n            \r\n    MemberwiseClone(...)\r\n            MemberwiseClone(self: object) -> object\r\n            \r\n                Creates a shallow copy of the current System.Object.\r\n                Returns: A shallow copy of the current System.Object.\r\n            MemberwiseClone(self: PythonType_1$1) -> object\r\n            MemberwiseClone(self: Object_2$2) -> object\r\n            MemberwiseClone(self: GetObject_3$3) -> object\r\n            MemberwiseClone(self: PythonProperty_4$4) -> object\r\n            MemberwiseClone(self: PythonDictionary_5$5) -> object\r\n            MemberwiseClone(self: PythonTuple_6$6) -> object\r\n            MemberwiseClone(self: _IOBase_7$7) -> object\r\n            MemberwiseClone(self: _RawIOBase_8$8) -> object\r\n            MemberwiseClone(self: _BufferedIOBase_9$9) -> object\r\n            MemberwiseClone(self: _TextIOBase_10$10) -> object\r\n            \r\n    ReferenceEquals(...)\r\n            ReferenceEquals(objA: object, objB: object) -> bool\r\n            \r\n                Determines whether the specified System.Object instances are the same instance.\r\n            \r\n                objA: The first object to compare.\r\n                objB: The second object  to compare.\r\n                Returns: true if objA is the same instance as objB or if both are null; otherwise, false.\r\n            \r\n    ToString(...)\r\n            ToString(self: object) -> str\r\n            \r\n                Returns a string that represents the current object.\r\n                ","Returns":"A string that represents the current object.\r\n           ToString(self: PythonType_1$1) -> str\r\n           ToString(self: Object_2$2) -> str\r\n           ToString(self: GetObject_3$3) -> str\r\n           ToString(self: PythonProperty_4$4) -> str\r\n           ToString(self: PythonDictionary_5$5) -> str\r\n           ToString(self: PythonTuple_6$6) -> str\r\n           ToString(self: _IOBase_7$7) -> str\r\n           ToString(self: _RawIOBase_8$8) -> str\r\n           ToString(self: _BufferedIOBase_9$9) -> str\r\n           ToString(self: _TextIOBase_10$10) -> str\r\n            \r\n   __delattr__(...)\r\n           __delattr__(self: object, name: str)\r\n               Removes an attribute from the provided member\r\n            \r\n   __format__(...)\r\n           __format__(self: object, formatSpec: str) -> str\r\n            \r\n   __getattribute__(...)\r\n           __getattribute__(self: object, name: str) -> object\r\n            \r\n               Gets the specified attribute from the object without running any custom lookup \r\n                behavior\r\n                       (__getattr__ and __getattribute__)\r\n            \r\n            \r\n   __hash__(...)\r\n           x.__hash__() <==> hash(x)\r\n   __init__(...)\r\n           x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature\r\n   __new__(...)\r\n           __new__(cls: type, **kwargs�: dict, *args�: Array[object]) -> object\r\n           __new__(cls: type, *args�: Array[object]) -> object\r\n            \r\n               Creates a new instance of the type\r\n           __new__(cls: type) -> object\r\n            \r\n               Creates a new instance of the type\r\n            \r\n   __reduce__(...)\r\n           helper for pickle\r\n   __reduce_ex__(...)\r\n           helper for picklehelper for pickle\r\n   __repr__(...)\r\n           __repr__(self: object) -> str\r\n            \r\n               Returns the code representation of the object.  The default implementation \r\n                returns\r\n                       a string which consists of the type and a unique numerical \r\n                identifier.\r\n            \r\n            \r\n   __setattr__(...)\r\n           __setattr__(self: object, name: str, value: object)\r\n               Sets an attribute on the object without running any custom object defined \r\n                behavior.\r\n            \r\n            \r\n   __sizeof__(...)\r\n           __sizeof__(self: object) -> int\r\n            \r\n               Returns the number of bytes of memory required to allocate the object.\r\n            \r\n   __str__(...)\r\n           x.__str__() <==> str(x)\r\n   __subclasshook__(...)\r\n           __subclasshook__(*args: Array[object]) -> NotImplementedType\r\n            \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectType in module rhinoscript.object:\r\n\r\nObjectType(object_id) |      Returns the object type\r\n        Parameters:\r\n          object_id = identifier of an object\r\n        Returns:\r\n          see help for values\r\n        \r\nHelp on object in module __builtin__\r\n\r\n    Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.\r\n    \r\n    object()\r\n    \r\n    \r\nData and other attributes defined here:\r\n\r\n    Equals(...)\r\n            Equals(objA: object, objB: object) -> bool\r\n            \r\n                Determines whether the specified object instances are considered equal.\r\n            \r\n                objA: The first object to compare.\r\n                objB: The second object to compare.\r\n                Returns: true if the objects are considered equal; otherwise, false. If both objA and \r\n                 objB are null, the method returns true.\r\n            \r\n            Equals(self: object, obj: object) -> bool\r\n            \r\n                Determines whether the specified System.Object is equal to the current \r\n                 System.Object.\r\n            \r\n            \r\n                obj: The object to compare with the current object.\r\n                Returns: true if the specified System.Object is equal to the current System.Object; \r\n                 otherwise, false.\r\n            \r\n            Equals(self: PythonType_1$1, obj: PythonType_1$1) -> bool\r\n            Equals(self: Object_2$2, obj: Object_2$2) -> bool\r\n            Equals(self: GetObject_3$3, obj: GetObject_3$3) -> bool\r\n            Equals(self: PythonProperty_4$4, obj: PythonProperty_4$4) -> bool\r\n            Equals(self: PythonDictionary_5$5, obj: PythonDictionary_5$5) -> bool\r\n            Equals(self: PythonTuple_6$6, obj: object) -> bool\r\n            Equals(self: _IOBase_7$7, obj: _IOBase_7$7) -> bool\r\n            Equals(self: _RawIOBase_8$8, obj: _RawIOBase_8$8) -> bool\r\n            Equals(self: _BufferedIOBase_9$9, obj: _BufferedIOBase_9$9) -> bool\r\n            Equals(self: _TextIOBase_10$10, obj: _TextIOBase_10$10) -> bool\r\n            \r\n    GetHashCode(...)\r\n            GetHashCode(self: object) -> int\r\n            \r\n                Serves as a hash function for a particular type.\r\n                Returns: A hash code for the current System.Object.\r\n            GetHashCode(self: PythonType_1$1) -> int\r\n            GetHashCode(self: Object_2$2) -> int\r\n            GetHashCode(self: GetObject_3$3) -> int\r\n            GetHashCode(self: PythonProperty_4$4) -> int\r\n            GetHashCode(self: PythonDictionary_5$5) -> int\r\n            GetHashCode(self: PythonTuple_6$6) -> int\r\n            GetHashCode(self: _IOBase_7$7) -> int\r\n            GetHashCode(self: _RawIOBase_8$8) -> int\r\n            GetHashCode(self: _BufferedIOBase_9$9) -> int\r\n            GetHashCode(self: _TextIOBase_10$10) -> int\r\n            \r\n    GetType(...)\r\n            GetType(self: object) -> Type\r\n            \r\n                Gets the System.Type of the current instance.\r\n                Returns: The exact runtime type of the current instance.\r\n            \r\n    MemberwiseClone(...)\r\n            MemberwiseClone(self: object) -> object\r\n            \r\n                Creates a shallow copy of the current System.Object.\r\n                Returns: A shallow copy of the current System.Object.\r\n            MemberwiseClone(self: PythonType_1$1) -> object\r\n            MemberwiseClone(self: Object_2$2) -> object\r\n            MemberwiseClone(self: GetObject_3$3) -> object\r\n            MemberwiseClone(self: PythonProperty_4$4) -> object\r\n            MemberwiseClone(self: PythonDictionary_5$5) -> object\r\n            MemberwiseClone(self: PythonTuple_6$6) -> object\r\n            MemberwiseClone(self: _IOBase_7$7) -> object\r\n            MemberwiseClone(self: _RawIOBase_8$8) -> object\r\n            MemberwiseClone(self: _BufferedIOBase_9$9) -> object\r\n            MemberwiseClone(self: _TextIOBase_10$10) -> object\r\n            \r\n    ReferenceEquals(...)\r\n            ReferenceEquals(objA: object, objB: object) -> bool\r\n            \r\n                Determines whether the specified System.Object instances are the same instance.\r\n            \r\n                objA: The first object to compare.\r\n                objB: The second object  to compare.\r\n                Returns: true if objA is the same instance as objB or if both are null; otherwise, false.\r\n            \r\n    ToString(...)\r\n            ToString(self: object) -> str\r\n            \r\n                Returns a string that represents the current object.\r\n                Returns: A string that represents the current object.\r\n            ToString(self: PythonType_1$1) -> str\r\n            ToString(self: Object_2$2) -> str\r\n            ToString(self: GetObject_3$3) -> str\r\n            ToString(self: PythonProperty_4$4) -> str\r\n            ToString(self: PythonDictionary_5$5) -> str\r\n            ToString(self: PythonTuple_6$6) -> str\r\n            ToString(self: _IOBase_7$7) -> str\r\n            ToString(self: _RawIOBase_8$8) -> str\r\n            ToString(self: _BufferedIOBase_9$9) -> str\r\n            ToString(self: _TextIOBase_10$10) -> str\r\n            \r\n    __delattr__(...)\r\n            __delattr__(self: object, name: str)\r\n                Removes an attribute from the provided member\r\n            \r\n    __format__(...)\r\n            __format__(self: object, formatSpec: str) -> str\r\n            \r\n    __getattribute__(...)\r\n            __getattribute__(self: object, name: str) -> object\r\n            \r\n                Gets the specified attribute from the object without running any custom lookup \r\n                 behavior\r\n                        (__getattr__ and __getattribute__)\r\n            \r\n            \r\n    __hash__(...)\r\n            x.__hash__() <==> hash(x)\r\n    __init__(...)\r\n            x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature\r\n    __new__(...)\r\n            __new__(cls: type, **kwargs�: dict, *args�: Array[object]) -> object\r\n            __new__(cls: type, *args�: Array[object]) -> object\r\n            \r\n                Creates a new instance of the type\r\n            __new__(cls: type) -> object\r\n            \r\n                Creates a new instance of the type\r\n            \r\n    __reduce__(...)\r\n            helper for pickle\r\n    __reduce_ex__(...)\r\n            helper for picklehelper for pickle\r\n    __repr__(...)\r\n            __repr__(self: object) -> str\r\n            \r\n                Returns the code representation of the object.  The default implementation \r\n                 returns\r\n                        a string which consists of the type and a unique numerical \r\n                 identifier.\r\n            \r\n            \r\n    __setattr__(...)\r\n            __setattr__(self: object, name: str, value: object)\r\n                Sets an attribute on the object without running any custom object defined \r\n                 behavior.\r\n            \r\n            \r\n    __sizeof__(...)\r\n            __sizeof__(self: object) -> int\r\n            \r\n                Returns the number of bytes of memory required to allocate the object.\r\n            \r\n    __str__(...)\r\n            x.__str__() <==> str(x)\r\n    __subclasshook__(...)\r\n            __subclasshook__(*args: Array[object]) -> NotImplementedType","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"OrientObject","Arguments":["object_id","reference","target","flags=0"],"Signature":"OrientObject (object_id, reference, target, flags=0)","Description":"Orients a single object based on input points\r\n        ","ArgumentDesc":"\r\nobject_id = String or Guid. The identifier of an object\r\nreference = list of 3-D reference points\r\ntarget = list of 3-D target points\r\nflags[opt]: 1 = copy object\r\n            2 = scale object\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OrientObject in module rhinoscript.object:\r\n\r\nOrientObject(object_id, reference, target, flags=0) |      Orients a single object based on input points\r\n        Parameters:\r\n            object_id = String or Guid. The identifier of an object\r\n            reference = list of 3-D reference points\r\n            target = list of 3-D target points\r\n            flags[opt]: 1 = copy object\r\n                        2 = scale object","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"RotateObject","Arguments":["object_id","center_point","rotation_angle","axis=None","copy=False"],"Signature":"RotateObject (object_id, center_point, rotation_angle, axis=None, copy=False)","Description":"Rotates a single object\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\ncenter_point: the center of rotation\r\nrotation_angle: in degrees\r\naxis[opt] = axis of rotation, If omitted, the Z axis of the active\r\n  construction plane is used as the rotation axis\r\ncopy[opt] = copy the object\r\n        ","Returns":"\r\nIdentifier of the rotated object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RotateObject in module rhinoscript.object:\r\n\r\nRotateObject(object_id, center_point, rotation_angle, axis=None, copy=False) |      Rotates a single object\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n          center_point: the center of rotation\r\n          rotation_angle: in degrees\r\n          axis[opt] = axis of rotation, If omitted, the Z axis of the active\r\n            construction plane is used as the rotation axis\r\n          copy[opt] = copy the object\r\n        Returns:\r\n          Identifier of the rotated object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"RotateObjects","Arguments":["object_ids","center_point","rotation_angle","axis=None","copy=False"],"Signature":"RotateObjects (object_ids, center_point, rotation_angle, axis=None, copy=False)","Description":"Rotates multiple objects\r\n        ","ArgumentDesc":"\r\nobject_ids: Identifiers of objects to rotate\r\ncenter_point: the center of rotation\r\nrotation_angle: in degrees\r\naxis[opt] = axis of rotation, If omitted, the Z axis of the active\r\n  construction plane is used as the rotation axis\r\ncopy[opt] = copy the object\r\n        ","Returns":"\r\nList of identifiers of the rotated objects if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RotateObjects in module rhinoscript.object:\r\n\r\nRotateObjects(object_ids, center_point, rotation_angle, axis=None, copy=False) |      Rotates multiple objects\r\n        Parameters:\r\n          object_ids: Identifiers of objects to rotate\r\n          center_point: the center of rotation\r\n          rotation_angle: in degrees\r\n          axis[opt] = axis of rotation, If omitted, the Z axis of the active\r\n            construction plane is used as the rotation axis\r\n          copy[opt] = copy the object\r\n        Returns:\r\n          List of identifiers of the rotated objects if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ScaleObject","Arguments":["object_id","origin","scale","copy=False"],"Signature":"ScaleObject (object_id, origin, scale, copy=False)","Description":"Scales a single object. Can be used to perform a uniform or non-uniform\r\n        scale transformation. Scaling is based on the active construction plane.\r\n        ","ArgumentDesc":"\r\nobject_id: The identifier of an object\r\norigin: the origin of the scale transformation\r\nscale: three numbers that identify the X, Y, and Z axis scale factors to apply\r\ncopy[opt] = copy the object\r\n        ","Returns":"\r\nIdentifier of the scaled object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ScaleObject in module rhinoscript.object:\r\n\r\nScaleObject(object_id, origin, scale, copy=False) |      Scales a single object. Can be used to perform a uniform or non-uniform\r\n        scale transformation. Scaling is based on the active construction plane.\r\n        Parameters:\r\n          object_id: The identifier of an object\r\n          origin: the origin of the scale transformation\r\n          scale: three numbers that identify the X, Y, and Z axis scale factors to apply\r\n          copy[opt] = copy the object\r\n        Returns:\r\n          Identifier of the scaled object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ScaleObjects","Arguments":["object_ids","origin","scale","copy=False"],"Signature":"ScaleObjects (object_ids, origin, scale, copy=False)","Description":"Scales one or more objects. Can be used to perform a uniform or non-\r\n        uniform scale transformation. Scaling is based on the active construction plane.\r\n        ","ArgumentDesc":"\r\nobject_ids: Identifiers of objects to scale\r\norigin: the origin of the scale transformation\r\nscale: three numbers that identify the X, Y, and Z axis scale factors to apply\r\ncopy[opt] = copy the objects\r\n        ","Returns":"\r\nList of identifiers of the scaled objects if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ScaleObjects in module rhinoscript.object:\r\n\r\nScaleObjects(object_ids, origin, scale, copy=False) |      Scales one or more objects. Can be used to perform a uniform or non-\r\n        uniform scale transformation. Scaling is based on the active construction plane.\r\n        Parameters:\r\n          object_ids: Identifiers of objects to scale\r\n          origin: the origin of the scale transformation\r\n          scale: three numbers that identify the X, Y, and Z axis scale factors to apply\r\n          copy[opt] = copy the objects\r\n        Returns:\r\n          List of identifiers of the scaled objects if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"SelectObject","Arguments":["object_id","redraw=True"],"Signature":"SelectObject (object_id, redraw=True)","Description":"Selects a single object\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of the object to select\r\n        ","Returns":"\r\nTrue on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SelectObject in module rhinoscript.object:\r\n\r\nSelectObject(object_id, redraw=True) |      Selects a single object\r\n        Parameters:\r\n          object_id = the identifier of the object to select\r\n        Returns:\r\n          True on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"SelectObjects","Arguments":["object_ids"],"Signature":"SelectObjects (object_ids)","Description":"Selects one or more objects\r\n        ","ArgumentDesc":"\r\nobject_ids = list of Guids identifying the objects to select\r\n        ","Returns":"\r\nnumber of selected objects\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SelectObjects in module rhinoscript.object:\r\n\r\nSelectObjects(object_ids) |      Selects one or more objects\r\n        Parameters:\r\n          object_ids = list of Guids identifying the objects to select\r\n        Returns:\r\n          number of selected objects","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ShearObject","Arguments":["object_id","origin","reference_point","angle_degrees","copy=False"],"Signature":"ShearObject (object_id, origin, reference_point, angle_degrees, copy=False)","Description":"Perform a shear transformation on a single object\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid. The identifier of an object\r\norigin, reference_point: origin/reference point of the shear transformation\r\n        ","Returns":"\r\nIdentifier of the sheared object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShearObject in module rhinoscript.object:\r\n\r\nShearObject(object_id, origin, reference_point, angle_degrees, copy=False) |      Perform a shear transformation on a single object\r\n        Parameters:\r\n          object_id: String or Guid. The identifier of an object\r\n          origin, reference_point: origin/reference point of the shear transformation\r\n        Returns:\r\n          Identifier of the sheared object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ShearObjects","Arguments":["object_ids","origin","reference_point","angle_degrees","copy=False"],"Signature":"ShearObjects (object_ids, origin, reference_point, angle_degrees, copy=False)","Description":"Shears one or more objects\r\n        ","ArgumentDesc":"\r\nobject_ids: The identifiers objects to shear\r\norigin, reference_point: origin/reference point of the shear transformation\r\n        ","Returns":"\r\nList of identifiers of the sheared objects if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShearObjects in module rhinoscript.object:\r\n\r\nShearObjects(object_ids, origin, reference_point, angle_degrees, copy=False) |      Shears one or more objects\r\n        Parameters:\r\n          object_ids: The identifiers objects to shear\r\n          origin, reference_point: origin/reference point of the shear transformation\r\n        Returns:\r\n          List of identifiers of the sheared objects if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ShowObject","Arguments":["object_id"],"Signature":"ShowObject (object_id)","Description":"Shows a previously hidden object. Hidden objects are not visible, cannot\r\n        be snapped to and cannot be selected\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid representing id of object to show\r\n        ","Returns":"\r\nTrue of False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowObject in module rhinoscript.object:\r\n\r\nShowObject(object_id) |      Shows a previously hidden object. Hidden objects are not visible, cannot\r\n        be snapped to and cannot be selected\r\n        Parameters:\r\n          object_id: String or Guid representing id of object to show\r\n        Returns:\r\n          True of False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"ShowObjects","Arguments":["object_ids"],"Signature":"ShowObjects (object_ids)","Description":"Shows one or more objects. Hidden objects are not visible, cannot be\r\n        snapped to and cannot be selected\r\n        ","ArgumentDesc":"\r\nobject_ids: list of Strings or Guids representing ids of objects to show\r\n        ","Returns":"\r\nNumber of objects shown\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowObjects in module rhinoscript.object:\r\n\r\nShowObjects(object_ids) |      Shows one or more objects. Hidden objects are not visible, cannot be\r\n        snapped to and cannot be selected\r\n        Parameters:\r\n          object_ids: list of Strings or Guids representing ids of objects to show\r\n        Returns:\r\n          Number of objects shown","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"TransformObject","Arguments":["object_id","matrix","copy=False"],"Signature":"TransformObject (object_id, matrix, copy=False)","Description":"Moves, scales, or rotates an object given a 4x4 transformation matrix.\r\n        The matrix acts on the left.\r\n        ","ArgumentDesc":"\r\nobject = The identifier of the object.\r\nmatrix = The transformation matrix (4x4 array of numbers).\r\ncopy [opt] = Copy the object.\r\n        ","Returns":"\r\nThe identifier of the transformed object\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TransformObject in module rhinoscript.object:\r\n\r\nTransformObject(object_id, matrix, copy=False) |      Moves, scales, or rotates an object given a 4x4 transformation matrix.\r\n        The matrix acts on the left.\r\n        Parameters:\r\n          object = The identifier of the object.\r\n          matrix = The transformation matrix (4x4 array of numbers).\r\n          copy [opt] = Copy the object.\r\n        Returns:\r\n          The identifier of the transformed object\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"TransformObjects","Arguments":["object_ids","matrix","copy=False"],"Signature":"TransformObjects (object_ids, matrix, copy=False)","Description":"Moves, scales, or rotates a list of objects given a 4x4 transformation\r\n        matrix. The matrix acts on the left.\r\n        ","ArgumentDesc":"\r\nobject_ids = List of object identifiers.\r\nmatrix = The transformation matrix (4x4 array of numbers).\r\ncopy[opt] = Copy the objects\r\n        ","Returns":"\r\nList of ids identifying the newly transformed objects\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TransformObjects in module rhinoscript.object:\r\n\r\nTransformObjects(object_ids, matrix, copy=False) |      Moves, scales, or rotates a list of objects given a 4x4 transformation\r\n        matrix. The matrix acts on the left.\r\n        Parameters:\r\n          object_ids = List of object identifiers.\r\n          matrix = The transformation matrix (4x4 array of numbers).\r\n          copy[opt] = Copy the objects\r\n        Returns:\r\n          List of ids identifying the newly transformed objects","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"UnlockObject","Arguments":["object_id"],"Signature":"UnlockObject (object_id)","Description":"Unlocks an object. Locked objects are visible, and can be snapped to,\r\n        but they cannot be selected.\r\n        ","ArgumentDesc":"\r\nobject_id: The identifier of an object\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnlockObject in module rhinoscript.object:\r\n\r\nUnlockObject(object_id) |      Unlocks an object. Locked objects are visible, and can be snapped to,\r\n        but they cannot be selected.\r\n        Parameters:\r\n          object_id: The identifier of an object\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"UnlockObjects","Arguments":["object_ids"],"Signature":"UnlockObjects (object_ids)","Description":"Unlocks one or more objects. Locked objects are visible, and can be\r\n        snapped to, but they cannot be selected.\r\n        ","ArgumentDesc":"\r\nobject_ids: The identifiers of objects\r\n        ","Returns":"\r\nnumber of objects unlocked\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnlockObjects in module rhinoscript.object:\r\n\r\nUnlockObjects(object_ids) |      Unlocks one or more objects. Locked objects are visible, and can be\r\n        snapped to, but they cannot be selected.\r\n        Parameters:\r\n          object_ids: The identifiers of objects\r\n        Returns:\r\n          number of objects unlocked","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"UnselectObject","Arguments":["object_id"],"Signature":"UnselectObject (object_id)","Description":"Unselects a single selected object\r\n        ","ArgumentDesc":"\r\nobject_id: String or Guid representing id of object to unselect\r\n        ","Returns":"\r\nTrue of False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnselectObject in module rhinoscript.object:\r\n\r\nUnselectObject(object_id) |      Unselects a single selected object\r\n        Parameters:\r\n          object_id: String or Guid representing id of object to unselect\r\n        Returns:\r\n          True of False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"object","Name":"UnselectObjects","Arguments":["object_ids"],"Signature":"UnselectObjects (object_ids)","Description":"Unselects one or more selected objects.\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of the objects to unselect.\r\n        ","Returns":"\r\nThe number of objects unselected\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnselectObjects in module rhinoscript.object:\r\n\r\nUnselectObjects(object_ids) |      Unselects one or more selected objects.\r\n        Parameters:\r\n          object_ids = identifiers of the objects to unselect.\r\n        Returns:\r\n          The number of objects unselected","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"plane","functions":[{"ModuleName":"plane","Name":"DistanceToPlane","Arguments":["plane","point"],"Signature":"DistanceToPlane (plane, point)","Description":"Returns the distance from a 3D point to a plane\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DistanceToPlane in module rhinoscript.plane:\r\n\r\nDistanceToPlane(plane, point) |      Returns the distance from a 3D point to a plane","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"EvaluatePlane","Arguments":["plane","parameter"],"Signature":"EvaluatePlane (plane, parameter)","Description":"Evaluates a plane at a U,V parameter\r\n        ","ArgumentDesc":"\r\nplane = the plane to evaluate\r\nparameter = list of two numbers defining the U,V parameter to evaluate\r\n        ","Returns":"\r\nPoint3d on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EvaluatePlane in module rhinoscript.plane:\r\n\r\nEvaluatePlane(plane, parameter) |      Evaluates a plane at a U,V parameter\r\n        Parameters:\r\n          plane = the plane to evaluate\r\n          parameter = list of two numbers defining the U,V parameter to evaluate\r\n        Returns:\r\n          Point3d on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"IntersectPlanes","Arguments":["plane1","plane2","plane3"],"Signature":"IntersectPlanes (plane1, plane2, plane3)","Description":"Calculates the intersection of three planes\r\n        Returns:\r\n          Point3d on success\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IntersectPlanes in module rhinoscript.plane:\r\n\r\nIntersectPlanes(plane1, plane2, plane3) |      Calculates the intersection of three planes\r\n        Returns:\r\n          Point3d on success\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"MovePlane","Arguments":["plane","origin"],"Signature":"MovePlane (plane, origin)","Description":"Moves the origin of a plane\r\n        ","ArgumentDesc":"\r\nplane = Plane or ConstructionPlane\r\norigin = Point3d or list of three numbers\r\n        ","Returns":"\r\nmoved plane\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MovePlane in module rhinoscript.plane:\r\n\r\nMovePlane(plane, origin) |      Moves the origin of a plane\r\n        Parameters:\r\n          plane = Plane or ConstructionPlane\r\n          origin = Point3d or list of three numbers\r\n        Returns:\r\n          moved plane","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneClosestPoint","Arguments":["plane","point","return_point=True"],"Signature":"PlaneClosestPoint (plane, point, return_point=True)","Description":"Returns the point on a plane that is closest to a test point.\r\n        ","ArgumentDesc":"\r\nplane = The plane\r\npoint = The 3-D point to test.\r\nreturn_point [opt] = If omitted or True, then the point on the plane\r\n   that is closest to the test point is returned. If False, then the\r\n   parameter of the point on the plane that is closest to the test\r\n   point is returned.\r\n        ","Returns":"\r\nIf return_point is omitted or True, then the 3-D point\r\nIf return_point is False, then an array containing the U,V parameters\r\nof the point\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneClosestPoint in module rhinoscript.plane:\r\n\r\nPlaneClosestPoint(plane, point, return_point=True) |      Returns the point on a plane that is closest to a test point.\r\n        Parameters:\r\n          plane = The plane\r\n          point = The 3-D point to test.\r\n          return_point [opt] = If omitted or True, then the point on the plane\r\n             that is closest to the test point is returned. If False, then the\r\n             parameter of the point on the plane that is closest to the test\r\n             point is returned.\r\n        Returns:\r\n          If return_point is omitted or True, then the 3-D point\r\n          If return_point is False, then an array containing the U,V parameters\r\n          of the point\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneCurveIntersection","Arguments":["plane","curve","tolerance=None"],"Signature":"PlaneCurveIntersection (plane, curve, tolerance=None)","Description":"Intersect an infinite plane and a curve object\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneCurveIntersection in module rhinoscript.plane:\r\n\r\nPlaneCurveIntersection(plane, curve, tolerance=None) |      Intersect an infinite plane and a curve object","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneEquation","Arguments":["plane"],"Signature":"PlaneEquation (plane)","Description":"Returns the equation of a plane as a tuple of four numbers. The standard\r\n        equation of a plane with a non-zero vector is Ax+By+Cz+D=0\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneEquation in module rhinoscript.plane:\r\n\r\nPlaneEquation(plane) |      Returns the equation of a plane as a tuple of four numbers. The standard\r\n        equation of a plane with a non-zero vector is Ax+By+Cz+D=0","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneFitFromPoints","Arguments":["points"],"Signature":"PlaneFitFromPoints (points)","Description":"Returns a plane that was fit through an array of 3D points.\r\n        ","ArgumentDesc":"\r\npoints = An array of 3D points.\r\n        ","Returns":" \r\nThe plane if successful\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneFitFromPoints in module rhinoscript.plane:\r\n\r\nPlaneFitFromPoints(points) |      Returns a plane that was fit through an array of 3D points.\r\n        Parameters:\r\n        points = An array of 3D points.\r\n        Returns: \r\n          The plane if successful\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneFromFrame","Arguments":["origin","x_axis","y_axis"],"Signature":"PlaneFromFrame (origin, x_axis, y_axis)","Description":"Construct a plane from a point, and two vectors in the plane.\r\n        ","ArgumentDesc":"\r\norigin = A 3D point identifying the origin of the plane.\r\nx_axis = A non-zero 3D vector in the plane that determines the X axis\r\n         direction.\r\ny_axis = A non-zero 3D vector not parallel to x_axis that is used\r\n         to determine the Y axis direction. Note, y_axis does not\r\n         have to be perpendicular to x_axis.\r\n        ","Returns":"\r\nThe plane if successful. \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneFromFrame in module rhinoscript.plane:\r\n\r\nPlaneFromFrame(origin, x_axis, y_axis) |      Construct a plane from a point, and two vectors in the plane.\r\n        Parameters:\r\n          origin = A 3D point identifying the origin of the plane.\r\n          x_axis = A non-zero 3D vector in the plane that determines the X axis\r\n                   direction.\r\n          y_axis = A non-zero 3D vector not parallel to x_axis that is used\r\n                   to determine the Y axis direction. Note, y_axis does not\r\n                   have to be perpendicular to x_axis.\r\n        Returns:\r\n          The plane if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneFromNormal","Arguments":["origin","normal","xaxis=None"],"Signature":"PlaneFromNormal (origin, normal, xaxis=None)","Description":"Creates a plane from an origin point and a normal direction vector.\r\n        ","ArgumentDesc":"\r\norigin = A 3D point identifying the origin of the plane.\r\nnormal = A 3D vector identifying the normal direction of the plane.\r\nxaxis[opt] = optional vector defining the plane's x-axis\r\n        ","Returns":"\r\nThe plane if successful.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneFromNormal in module rhinoscript.plane:\r\n\r\nPlaneFromNormal(origin, normal, xaxis=None) |      Creates a plane from an origin point and a normal direction vector.\r\n        Parameters:\r\n          origin = A 3D point identifying the origin of the plane.\r\n          normal = A 3D vector identifying the normal direction of the plane.\r\n          xaxis[opt] = optional vector defining the plane's x-axis\r\n        Returns:\r\n          The plane if successful.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneFromPoints","Arguments":["origin","x","y"],"Signature":"PlaneFromPoints (origin, x, y)","Description":"Creates a plane from three non-colinear points\r\n        ","ArgumentDesc":"\r\norigin = origin point of the plane\r\nx, y = points on the plane's x and y axes\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneFromPoints in module rhinoscript.plane:\r\n\r\nPlaneFromPoints(origin, x, y) |      Creates a plane from three non-colinear points\r\n        Parameters:\r\n          origin = origin point of the plane\r\n          x, y = points on the plane's x and y axes","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlanePlaneIntersection","Arguments":["plane1","plane2"],"Signature":"PlanePlaneIntersection (plane1, plane2)","Description":"Calculates the intersection of two planes\r\n        Paramters:\r\n          plane1, plane2 = two planes\r\n        Returns:\r\n          two 3d points identifying the starting/ending points of the intersection\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlanePlaneIntersection in module rhinoscript.plane:\r\n\r\nPlanePlaneIntersection(plane1, plane2) |      Calculates the intersection of two planes\r\n        Paramters:\r\n          plane1, plane2 = two planes\r\n        Returns:\r\n          two 3d points identifying the starting/ending points of the intersection\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneSphereIntersection","Arguments":["plane","sphere_plane","sphere_radius"],"Signature":"PlaneSphereIntersection (plane, sphere_plane, sphere_radius)","Description":"Calculates the intersection of a plane and a sphere\r\n        ","ArgumentDesc":"\r\nplane = the plane to intersect\r\nsphere_plane = equitorial plane of the sphere. origin of the plane is\r\n  the center of the sphere\r\nsphere_radius = radius of the sphere\r\n        ","Returns":"\r\nlist of intersection results - see help\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneSphereIntersection in module rhinoscript.plane:\r\n\r\nPlaneSphereIntersection(plane, sphere_plane, sphere_radius) |      Calculates the intersection of a plane and a sphere\r\n        Parameters:\r\n          plane = the plane to intersect\r\n          sphere_plane = equitorial plane of the sphere. origin of the plane is\r\n            the center of the sphere\r\n          sphere_radius = radius of the sphere\r\n        Returns:\r\n          list of intersection results - see help\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"PlaneTransform","Arguments":["plane","xform"],"Signature":"PlaneTransform (plane, xform)","Description":"Transforms a plane\r\n        ","ArgumentDesc":"\r\nplane = Plane to transform\r\nxform = Transformation to apply\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PlaneTransform in module rhinoscript.plane:\r\n\r\nPlaneTransform(plane, xform) |      Transforms a plane\r\n        Parameters:\r\n          plane = Plane to transform\r\n          xform = Transformation to apply","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"plane","Name":"RotatePlane","Arguments":["plane","angle_degrees","axis"],"Signature":"RotatePlane (plane, angle_degrees, axis)","Description":"Rotates a plane\r\n        ","ArgumentDesc":"\r\nplane = Plane to rotate\r\nangle_degrees = rotation angle in degrees\r\naxis = Vector3d or list of three numbers\r\n        ","Returns":"\r\nrotated plane on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RotatePlane in module rhinoscript.plane:\r\n\r\nRotatePlane(plane, angle_degrees, axis) |      Rotates a plane\r\n        Parameters:\r\n          plane = Plane to rotate\r\n          angle_degrees = rotation angle in degrees\r\n          axis = Vector3d or list of three numbers\r\n        Returns:\r\n          rotated plane on success","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"pointvector","functions":[{"ModuleName":"pointvector","Name":"IsVectorParallelTo","Arguments":["vector1","vector2"],"Signature":"IsVectorParallelTo (vector1, vector2)","Description":"Compares two vectors to see if they are parallel\r\n        ","ArgumentDesc":"\r\nvector1, vector2 = the vectors to compare\r\n        ","Returns":"\r\n-1 = the vectors are anti-parallel\r\n0 = the vectors are not parallel\r\n1 = the vectors are parallel\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsVectorParallelTo in module rhinoscript.pointvector:\r\n\r\nIsVectorParallelTo(vector1, vector2) |      Compares two vectors to see if they are parallel\r\n        Parameters:\r\n          vector1, vector2 = the vectors to compare\r\n        Returns:\r\n          -1 = the vectors are anti-parallel\r\n          0 = the vectors are not parallel\r\n          1 = the vectors are parallel","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"IsVectorPerpendicularTo","Arguments":["vector1","vector2"],"Signature":"IsVectorPerpendicularTo (vector1, vector2)","Description":"Compares two vectors to see if they are perpendicular\r\n        ","ArgumentDesc":"\r\nvector1, vector2 = the vectors to compare\r\n        ","Returns":"\r\nTrue if vectors are perpendicular, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsVectorPerpendicularTo in module rhinoscript.pointvector:\r\n\r\nIsVectorPerpendicularTo(vector1, vector2) |      Compares two vectors to see if they are perpendicular\r\n        Parameters:\r\n          vector1, vector2 = the vectors to compare\r\n        Returns:\r\n          True if vectors are perpendicular, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"IsVectorTiny","Arguments":["vector"],"Signature":"IsVectorTiny (vector)","Description":"Verifies that a vector is very short. The X,Y,Z elements are <= 1.0e-12\r\n        ","ArgumentDesc":"\r\nvector - the vector to check\r\n        ","Returns":"\r\nTrue if the vector is tiny, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsVectorTiny in module rhinoscript.pointvector:\r\n\r\nIsVectorTiny(vector) |      Verifies that a vector is very short. The X,Y,Z elements are <= 1.0e-12\r\n        Parameters:\r\n          vector - the vector to check\r\n        Returns:\r\n          True if the vector is tiny, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"IsVectorZero","Arguments":["vector"],"Signature":"IsVectorZero (vector)","Description":"Verifies that a vector is zero, or tiny. The X,Y,Z elements are equal to 0.0\r\n        ","ArgumentDesc":"\r\nvector - the vector to check\r\n        ","Returns":"\r\nTrue if the vector is zero, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsVectorZero in module rhinoscript.pointvector:\r\n\r\nIsVectorZero(vector) |      Verifies that a vector is zero, or tiny. The X,Y,Z elements are equal to 0.0\r\n        Parameters:\r\n          vector - the vector to check\r\n        Returns:\r\n          True if the vector is zero, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointAdd","Arguments":["point1","point2"],"Signature":"PointAdd (point1, point2)","Description":"Adds a 3D point or a 3D vector to a 3D point\r\n        ","ArgumentDesc":"\r\npoint1, point2 = the points to add\r\n        ","Returns":"\r\nthe resulting 3D point if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointAdd in module rhinoscript.pointvector:\r\n\r\nPointAdd(point1, point2) |      Adds a 3D point or a 3D vector to a 3D point\r\n        Parameters:\r\n          point1, point2 = the points to add\r\n        Returns:\r\n          the resulting 3D point if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointArrayBoundingBox","Arguments":["points","view_or_plane=None","in_world_coords=True"],"Signature":"PointArrayBoundingBox (points, view_or_plane=None, in_world_coords=True)","Description":"Returns either a world axis-aligned or a construction plane axis-aligned \r\n        bounding box of an array of 3-D point locations.\r\n        ","ArgumentDesc":"\r\npoints = A list of 3-D points\r\nview_or_plane[opt] = Title or id of the view that contains the\r\n    construction plane to which the bounding box should be aligned -or-\r\n    user defined plane. If omitted, a world axis-aligned bounding box\r\n    will be calculated\r\nin_world_coords[opt] = return the bounding box as world coordinates or\r\n    construction plane coordinates. Note, this option does not apply to\r\n    world axis-aligned bounding boxes.\r\n        ","Returns":"\r\nEight 3D points that define the bounding box. Points returned in counter-\r\nclockwise order starting with the bottom rectangle of the box.\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointArrayBoundingBox in module rhinoscript.pointvector:\r\n\r\nPointArrayBoundingBox(points, view_or_plane=None, in_world_coords=True) |      Returns either a world axis-aligned or a construction plane axis-aligned \r\n        bounding box of an array of 3-D point locations.\r\n        Parameters:\r\n          points = A list of 3-D points\r\n          view_or_plane[opt] = Title or id of the view that contains the\r\n              construction plane to which the bounding box should be aligned -or-\r\n              user defined plane. If omitted, a world axis-aligned bounding box\r\n              will be calculated\r\n          in_world_coords[opt] = return the bounding box as world coordinates or\r\n              construction plane coordinates. Note, this option does not apply to\r\n              world axis-aligned bounding boxes.\r\n        Returns:\r\n          Eight 3D points that define the bounding box. Points returned in counter-\r\n          clockwise order starting with the bottom rectangle of the box.\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointArrayClosestPoint","Arguments":["points","test_point"],"Signature":"PointArrayClosestPoint (points, test_point)","Description":"Finds the point in a list of 3D points that is closest to a test point\r\n        ","ArgumentDesc":"\r\npoints = list of points\r\ntest_point = the point to compare against\r\n        ","Returns":"\r\nindex of the element in the point list that is closest to the test point\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointArrayClosestPoint in module rhinoscript.pointvector:\r\n\r\nPointArrayClosestPoint(points, test_point) |      Finds the point in a list of 3D points that is closest to a test point\r\n        Parameters:\r\n          points = list of points\r\n          test_point = the point to compare against\r\n        Returns:\r\n          index of the element in the point list that is closest to the test point","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointArrayTransform","Arguments":["points","xform"],"Signature":"PointArrayTransform (points, xform)","Description":"Transforms a list of 3D points\r\n        ","ArgumentDesc":"\r\npoints = list of 3D points\r\nxform = transformation to apply\r\n        ","Returns":"\r\nlist of transformed points on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointArrayTransform in module rhinoscript.pointvector:\r\n\r\nPointArrayTransform(points, xform) |      Transforms a list of 3D points\r\n        Parameters:\r\n          points = list of 3D points\r\n          xform = transformation to apply\r\n        Returns:\r\n          list of transformed points on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointClosestObject","Arguments":["point","object_ids"],"Signature":"PointClosestObject (point, object_ids)","Description":"Finds the object that is closest to a test point\r\n        ","ArgumentDesc":"\r\npoint = point to test\r\nobject_id = identifiers of one or more objects\r\n        ","Returns":"\r\n(closest object_id, point on object) on success\r\nNone on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointClosestObject in module rhinoscript.pointvector:\r\n\r\nPointClosestObject(point, object_ids) |      Finds the object that is closest to a test point\r\n        Parameters:\r\n          point = point to test\r\n          object_id = identifiers of one or more objects\r\n        Returns:\r\n          (closest object_id, point on object) on success\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointCompare","Arguments":["point1","point2","tolerance=None"],"Signature":"PointCompare (point1, point2, tolerance=None)","Description":"Compares two 3D points\r\n        ","ArgumentDesc":"\r\npoint1, point2 = the points to compare\r\ntolerance [opt] = tolerance to use for comparison. If omitted,\r\n  Rhino's internal zero tolerance is used\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointCompare in module rhinoscript.pointvector:\r\n\r\nPointCompare(point1, point2, tolerance=None) |      Compares two 3D points\r\n        Parameters:\r\n          point1, point2 = the points to compare\r\n          tolerance [opt] = tolerance to use for comparison. If omitted,\r\n            Rhino's internal zero tolerance is used\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointDivide","Arguments":["point","divide"],"Signature":"PointDivide (point, divide)","Description":"Divides a 3D point by a value\r\n        ","ArgumentDesc":"\r\npoint = the point to divide\r\ndivide = a non-zero value to divide\r\n        ","Returns":"\r\nresulting point\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointDivide in module rhinoscript.pointvector:\r\n\r\nPointDivide(point, divide) |      Divides a 3D point by a value\r\n        Parameters:\r\n          point = the point to divide\r\n          divide = a non-zero value to divide\r\n        Returns:\r\n          resulting point","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointScale","Arguments":["point","scale"],"Signature":"PointScale (point, scale)","Description":"Scales a 3D point by a value\r\n        ","ArgumentDesc":"\r\npoint = the point to divide\r\nscale = scale factor to apply\r\n        ","Returns":"\r\nresulting point on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointScale in module rhinoscript.pointvector:\r\n\r\nPointScale(point, scale) |      Scales a 3D point by a value\r\n        Parameters:\r\n          point = the point to divide\r\n          scale = scale factor to apply\r\n        Returns:\r\n          resulting point on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointSubtract","Arguments":["point1","point2"],"Signature":"PointSubtract (point1, point2)","Description":"Subtracts a 3D point or a 3D vector from a 3D point\r\n        ","ArgumentDesc":"\r\npoint1, point2 = the points to subtract\r\n        ","Returns":"\r\nthe resulting 3D point if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointSubtract in module rhinoscript.pointvector:\r\n\r\nPointSubtract(point1, point2) |      Subtracts a 3D point or a 3D vector from a 3D point\r\n        Parameters:\r\n          point1, point2 = the points to subtract\r\n        Returns:\r\n          the resulting 3D point if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointTransform","Arguments":["point","xform"],"Signature":"PointTransform (point, xform)","Description":"Transforms a 3D point\r\n        Paramters:\r\n          point = the point to transform\r\n          xform = a valid 4x4 transformation matrix\r\n        Returns:\r\n          transformed vector on success\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointTransform in module rhinoscript.pointvector:\r\n\r\nPointTransform(point, xform) |      Transforms a 3D point\r\n        Paramters:\r\n          point = the point to transform\r\n          xform = a valid 4x4 transformation matrix\r\n        Returns:\r\n          transformed vector on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PointsAreCoplanar","Arguments":["points","tolerance=9.9999999999999998e-13"],"Signature":"PointsAreCoplanar (points, tolerance=9.9999999999999998e-13)","Description":"Verifies that a list of 3D points are coplanar\r\n        ","ArgumentDesc":"\r\npoints = list of 3D points\r\ntolerance[opt] = tolerance to use when verifying\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PointsAreCoplanar in module rhinoscript.pointvector:\r\n\r\nPointsAreCoplanar(points, tolerance=9.9999999999999998e-13) |      Verifies that a list of 3D points are coplanar\r\n        Parameters:\r\n          points = list of 3D points\r\n          tolerance[opt] = tolerance to use when verifying\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"ProjectPointToMesh","Arguments":["points","mesh_ids","direction"],"Signature":"ProjectPointToMesh (points, mesh_ids, direction)","Description":"Projects one or more points onto one or more meshes\r\n        ","ArgumentDesc":"\r\npoints = one or more 3D points\r\nmesh_ids = identifiers of one or more meshes\r\ndirection = direction vector to project the points\r\n        ","Returns":"\r\nlist of projected points on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ProjectPointToMesh in module rhinoscript.pointvector:\r\n\r\nProjectPointToMesh(points, mesh_ids, direction) |      Projects one or more points onto one or more meshes\r\n        Parameters:\r\n          points = one or more 3D points\r\n          mesh_ids = identifiers of one or more meshes\r\n          direction = direction vector to project the points\r\n        Returns:\r\n         list of projected points on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"ProjectPointToSurface","Arguments":["points","surface_ids","direction"],"Signature":"ProjectPointToSurface (points, surface_ids, direction)","Description":"Projects one or more points onto one or more surfaces or polysurfaces\r\n        ","ArgumentDesc":"\r\npoints = one or more 3D points\r\nsurface_ids = identifiers of one or more surfaces/polysurfaces\r\ndirection = direction vector to project the points\r\n        ","Returns":"\r\nlist of projected points on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ProjectPointToSurface in module rhinoscript.pointvector:\r\n\r\nProjectPointToSurface(points, surface_ids, direction) |      Projects one or more points onto one or more surfaces or polysurfaces\r\n        Parameters:\r\n          points = one or more 3D points\r\n          surface_ids = identifiers of one or more surfaces/polysurfaces\r\n          direction = direction vector to project the points\r\n        Returns:\r\n         list of projected points on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"PullPoints","Arguments":["object_id","points"],"Signature":"PullPoints (object_id, points)","Description":"Pulls an array of points to a surface or mesh object. For more\r\n        information, see the Rhino help file Pull command\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of the surface or mesh object that pulls\r\npoints = list of 3D points\r\n        ","Returns":"\r\nlist of 3D points\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PullPoints in module rhinoscript.pointvector:\r\n\r\nPullPoints(object_id, points) |      Pulls an array of points to a surface or mesh object. For more\r\n        information, see the Rhino help file Pull command\r\n        Parameters:\r\n          object_id = the identifier of the surface or mesh object that pulls\r\n          points = list of 3D points\r\n        Returns:\r\n          list of 3D points","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorAdd","Arguments":["vector1","vector2"],"Signature":"VectorAdd (vector1, vector2)","Description":"Adds two 3D vectors\r\n        ","ArgumentDesc":"\r\nvector1, vector2 = the vectors to add\r\n        ","Returns":"\r\nthe resulting 3D vector if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorAdd in module rhinoscript.pointvector:\r\n\r\nVectorAdd(vector1, vector2) |      Adds two 3D vectors\r\n        Parameters:\r\n          vector1, vector2 = the vectors to add\r\n        Returns:\r\n          the resulting 3D vector if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorAngle","Arguments":["vector1","vector2"],"Signature":"VectorAngle (vector1, vector2)","Description":"Returns the angle, in degrees, between two 3-D vectors\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorAngle in module rhinoscript.pointvector:\r\n\r\nVectorAngle(vector1, vector2) |      Returns the angle, in degrees, between two 3-D vectors","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorCompare","Arguments":["vector1","vector2"],"Signature":"VectorCompare (vector1, vector2)","Description":"Compares two 3D vectors\r\n        ","ArgumentDesc":"\r\nvector1, vector2 = the vectors to compare\r\n        ","Returns":"\r\n-1 if vector1 is less than vector2\r\n0 if vector1 is equal to vector2\r\n1 if vector1 is greater than vector2\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorCompare in module rhinoscript.pointvector:\r\n\r\nVectorCompare(vector1, vector2) |      Compares two 3D vectors\r\n        Parameters:\r\n          vector1, vector2 = the vectors to compare\r\n        Returns:\r\n          -1 if vector1 is less than vector2\r\n          0 if vector1 is equal to vector2\r\n          1 if vector1 is greater than vector2","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorCreate","Arguments":["to_point","from_point"],"Signature":"VectorCreate (to_point, from_point)","Description":"Creates a vector from two 3D points\r\n        ","ArgumentDesc":"\r\nto_point, from_point = the points defining the vector\r\n        ","Returns":"\r\nthe resulting vector if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorCreate in module rhinoscript.pointvector:\r\n\r\nVectorCreate(to_point, from_point) |      Creates a vector from two 3D points\r\n        Parameters:\r\n          to_point, from_point = the points defining the vector\r\n        Returns:\r\n          the resulting vector if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorCrossProduct","Arguments":["vector1","vector2"],"Signature":"VectorCrossProduct (vector1, vector2)","Description":"Calculates the cross product of two 3D vectors\r\n        ","ArgumentDesc":"\r\nvector1, vector2 = the vectors to perform cross product on\r\n        ","Returns":"\r\nthe resulting vector if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorCrossProduct in module rhinoscript.pointvector:\r\n\r\nVectorCrossProduct(vector1, vector2) |      Calculates the cross product of two 3D vectors\r\n        Parameters:\r\n          vector1, vector2 = the vectors to perform cross product on\r\n        Returns:\r\n          the resulting vector if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorDivide","Arguments":["vector","divide"],"Signature":"VectorDivide (vector, divide)","Description":"Divides a 3D vector by a value\r\n        ","ArgumentDesc":"\r\nvector = the vector to divide\r\ndivide = a non-zero value to divide\r\n        ","Returns":"\r\nresulting vector on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorDivide in module rhinoscript.pointvector:\r\n\r\nVectorDivide(vector, divide) |      Divides a 3D vector by a value\r\n        Parameters:\r\n          vector = the vector to divide\r\n          divide = a non-zero value to divide\r\n        Returns:\r\n          resulting vector on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorDotProduct","Arguments":["vector1","vector2"],"Signature":"VectorDotProduct (vector1, vector2)","Description":"Calculates the dot product of two 3D vectors\r\n        ","ArgumentDesc":"\r\nvector1, vector2 = the vectors to perform the dot product on\r\n        ","Returns":"\r\nthe resulting dot product if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorDotProduct in module rhinoscript.pointvector:\r\n\r\nVectorDotProduct(vector1, vector2) |      Calculates the dot product of two 3D vectors\r\n        Parameters:\r\n          vector1, vector2 = the vectors to perform the dot product on\r\n        Returns:\r\n          the resulting dot product if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorLength","Arguments":["vector"],"Signature":"VectorLength (vector)","Description":"Returns the length of a 3D vector\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorLength in module rhinoscript.pointvector:\r\n\r\nVectorLength(vector) |      Returns the length of a 3D vector","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorMultiply","Arguments":["vector1","vector2"],"Signature":"VectorMultiply (vector1, vector2)","Description":"Multiplies two 3D vectors\r\n        ","ArgumentDesc":"\r\nvector1, vector2 = the vectors to multiply\r\n        ","Returns":"\r\nthe resulting inner (dot) product if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorMultiply in module rhinoscript.pointvector:\r\n\r\nVectorMultiply(vector1, vector2) |      Multiplies two 3D vectors\r\n        Parameters:\r\n          vector1, vector2 = the vectors to multiply\r\n        Returns:\r\n          the resulting inner (dot) product if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorReverse","Arguments":["vector"],"Signature":"VectorReverse (vector)","Description":"Reverses the direction of a 3D vector\r\n        ","ArgumentDesc":"\r\nvector = the vector to reverse\r\n        ","Returns":"\r\nreversed vector on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorReverse in module rhinoscript.pointvector:\r\n\r\nVectorReverse(vector) |      Reverses the direction of a 3D vector\r\n        Parameters:\r\n          vector = the vector to reverse\r\n        Returns:\r\n          reversed vector on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorRotate","Arguments":["vector","angle_degrees","axis"],"Signature":"VectorRotate (vector, angle_degrees, axis)","Description":"Rotates a 3D vector\r\n        ","ArgumentDesc":"\r\nvector = the vector to rotate\r\nangle_degrees = rotation angle\r\naxis = axis of rotation\r\n        ","Returns":"\r\nrotated vector on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorRotate in module rhinoscript.pointvector:\r\n\r\nVectorRotate(vector, angle_degrees, axis) |      Rotates a 3D vector\r\n        Parameters:\r\n          vector = the vector to rotate\r\n          angle_degrees = rotation angle\r\n          axis = axis of rotation\r\n        Returns:\r\n          rotated vector on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorScale","Arguments":["vector","scale"],"Signature":"VectorScale (vector, scale)","Description":"Scales a 3-D vector\r\n        ","ArgumentDesc":"\r\nvector = the vector to scale\r\nscale = scale factor to apply\r\n        ","Returns":"\r\nresulting vector on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorScale in module rhinoscript.pointvector:\r\n\r\nVectorScale(vector, scale) |      Scales a 3-D vector\r\n        Parameters:\r\n          vector = the vector to scale\r\n          scale = scale factor to apply\r\n        Returns:\r\n          resulting vector on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorSubtract","Arguments":["vector1","vector2"],"Signature":"VectorSubtract (vector1, vector2)","Description":"Subtracts two 3D vectors\r\n        ","ArgumentDesc":"\r\nvector1 = the vector to subtract from\r\nvector2 = the vector to subtract\r\n        ","Returns":"\r\nthe resulting 3D vector\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorSubtract in module rhinoscript.pointvector:\r\n\r\nVectorSubtract(vector1, vector2) |      Subtracts two 3D vectors\r\n        Parameters:\r\n          vector1 = the vector to subtract from\r\n          vector2 = the vector to subtract\r\n        Returns:\r\n          the resulting 3D vector","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorTransform","Arguments":["vector","xform"],"Signature":"VectorTransform (vector, xform)","Description":"Transforms a 3D vector\r\n        Paramters:\r\n          vector = the vector to transform\r\n          xform = a valid 4x4 transformation matrix\r\n        Returns:\r\n          transformed vector on success\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorTransform in module rhinoscript.pointvector:\r\n\r\nVectorTransform(vector, xform) |      Transforms a 3D vector\r\n        Paramters:\r\n          vector = the vector to transform\r\n          xform = a valid 4x4 transformation matrix\r\n        Returns:\r\n          transformed vector on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"pointvector","Name":"VectorUnitize","Arguments":["vector"],"Signature":"VectorUnitize (vector)","Description":"Unitizes, or normalizes a 3D vector. Note, zero vectors cannot be unitized\r\n        ","ArgumentDesc":"\r\nvector = the vector to unitize\r\n        ","Returns":"\r\nunitized vector on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VectorUnitize in module rhinoscript.pointvector:\r\n\r\nVectorUnitize(vector) |      Unitizes, or normalizes a 3D vector. Note, zero vectors cannot be unitized\r\n        Parameters:\r\n          vector = the vector to unitize\r\n        Returns:\r\n          unitized vector on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"selection","functions":[{"ModuleName":"selection","Name":"AllObjects","Arguments":["select=False","include_lights=False","include_grips=False","include_references=False"],"Signature":"AllObjects (select=False, include_lights=False, include_grips=False, include_references=False)","Description":"Returns identifiers of all objects in the document.\r\n        ","ArgumentDesc":"\r\nselect[opt] = Select the objects\r\ninclude_lights[opt] = Include light objects\r\ninclude_grips[opt] = Include grips objects\r\n        ","Returns":"\r\nList of Guids identifying the objects\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AllObjects in module rhinoscript.selection:\r\n\r\nAllObjects(select=False, include_lights=False, include_grips=False, include_references=False) |      Returns identifiers of all objects in the document.\r\n        Parameters:\r\n          select[opt] = Select the objects\r\n          include_lights[opt] = Include light objects\r\n          include_grips[opt] = Include grips objects\r\n        Returns:\r\n          List of Guids identifying the objects","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"FirstObject","Arguments":["select=False","include_lights=False","include_grips=False"],"Signature":"FirstObject (select=False, include_lights=False, include_grips=False)","Description":"Returns identifier of the first object in the document. The first\r\n        object is the last object created by the user.\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function FirstObject in module rhinoscript.selection:\r\n\r\nFirstObject(select=False, include_lights=False, include_grips=False) |      Returns identifier of the first object in the document. The first\r\n        object is the last object created by the user.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"GetCurveObject","Arguments":["message=None","preselect=False","select=False"],"Signature":"GetCurveObject (message=None, preselect=False, select=False)","Description":"Prompts user to pick or select a single curve object\r\n        ","ArgumentDesc":"\r\nmessage[opt] = a prompt or message.\r\npreselect[opt] = Allow for the selection of pre-selected objects.\r\nselect[opt] = Select the picked objects. If False, objects that\r\n  are picked are not selected.\r\n        ","Returns":"\r\nTuple containing the following information\r\n  element 0 = identifier of the curve object\r\n  element 1 = True if the curve was preselected, otherwise False\r\n  element 2 = selection method (see help)\r\n  element 3 = selection point\r\n  element 4 = the curve parameter of the selection point\r\n  element 5 = name of the view selection was made\r\nNone if no object picked\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetCurveObject in module rhinoscript.selection:\r\n\r\nGetCurveObject(message=None, preselect=False, select=False) |      Prompts user to pick or select a single curve object\r\n        Parameters:\r\n          message[opt] = a prompt or message.\r\n          preselect[opt] = Allow for the selection of pre-selected objects.\r\n          select[opt] = Select the picked objects. If False, objects that\r\n            are picked are not selected.\r\n        Returns:\r\n          Tuple containing the following information\r\n            element 0 = identifier of the curve object\r\n            element 1 = True if the curve was preselected, otherwise False\r\n            element 2 = selection method (see help)\r\n            element 3 = selection point\r\n            element 4 = the curve parameter of the selection point\r\n            element 5 = name of the view selection was made\r\n          None if no object picked","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"GetObject","Arguments":["message=None","filter=0","preselect=False","select=False","custom_filter=None","subobjects=False"],"Signature":"GetObject (message=None, filter=0, preselect=False, select=False, custom_filter=None, subobjects=False)","Description":"Prompts user to pick, or select, a single object.\r\n        ","ArgumentDesc":"\r\nmessage[opt] = a prompt or message.\r\nfilter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n    that can be selected. Object types can be added together to filter\r\n    several different kinds of geometry. use the filter class to get values\r\npreselect[opt] =  Allow for the selection of pre-selected objects.\r\nselect[opt] = Select the picked objects.  If False, the objects that are\r\n    picked are not selected.\r\nsubobjects[opt] = If True, subobjects can be selected. When this is the\r\n    case, an ObjRef is returned instead of a Guid to allow for tracking\r\n    of the subobject when passed into other functions\r\n        ","Returns":"\r\nIdentifier of the picked object\r\nNone if user did not pick an object\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetObject in module rhinoscript.selection:\r\n\r\nGetObject(message=None, filter=0, preselect=False, select=False, custom_filter=None, subobjects=False) |      Prompts user to pick, or select, a single object.\r\n        Parameters:\r\n          message[opt] = a prompt or message.\r\n          filter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n              that can be selected. Object types can be added together to filter\r\n              several different kinds of geometry. use the filter class to get values\r\n          preselect[opt] =  Allow for the selection of pre-selected objects.\r\n          select[opt] = Select the picked objects.  If False, the objects that are\r\n              picked are not selected.\r\n          subobjects[opt] = If True, subobjects can be selected. When this is the\r\n              case, an ObjRef is returned instead of a Guid to allow for tracking\r\n              of the subobject when passed into other functions\r\n        Returns:\r\n          Identifier of the picked object\r\n          None if user did not pick an object","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"GetObjectEx","Arguments":["message=None","filter=0","preselect=False","select=False","objects=None"],"Signature":"GetObjectEx (message=None, filter=0, preselect=False, select=False, objects=None)","Description":"Prompts user to pick, or select a single object\r\n        ","ArgumentDesc":"\r\nmessage[opt] = a prompt or message.\r\nfilter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n    that can be selected. Object types can be added together to filter\r\n    several different kinds of geometry. use the filter class to get values\r\npreselect[opt] =  Allow for the selection of pre-selected objects.\r\nselect[opt] = Select the picked objects.  If False, the objects that are\r\n    picked are not selected.\r\nobjects[opt] = list of object identifiers specifying objects that are\r\n    allowed to be selected\r\n        ","Returns":"\r\nTuple of information containing the following information\r\n  element 0 = identifier of the object\r\n  element 1 = True if the object was preselected, otherwise False\r\n  element 2 = selection method (see help)\r\n  element 3 = selection point\r\n  element 4 = name of the view selection was made\r\nNone if no object selected\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetObjectEx in module rhinoscript.selection:\r\n\r\nGetObjectEx(message=None, filter=0, preselect=False, select=False, objects=None) |      Prompts user to pick, or select a single object\r\n        Parameters:\r\n          message[opt] = a prompt or message.\r\n          filter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n              that can be selected. Object types can be added together to filter\r\n              several different kinds of geometry. use the filter class to get values\r\n          preselect[opt] =  Allow for the selection of pre-selected objects.\r\n          select[opt] = Select the picked objects.  If False, the objects that are\r\n              picked are not selected.\r\n          objects[opt] = list of object identifiers specifying objects that are\r\n              allowed to be selected\r\n        Returns:\r\n          Tuple of information containing the following information\r\n            element 0 = identifier of the object\r\n            element 1 = True if the object was preselected, otherwise False\r\n            element 2 = selection method (see help)\r\n            element 3 = selection point\r\n            element 4 = name of the view selection was made\r\n          None if no object selected","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"GetObjects","Arguments":["message=None","filter=0","group=True","preselect=False","select=False","objects=None","minimum_count=1","maximum_count=0","custom_filter=None"],"Signature":"GetObjects (message=None, filter=0, group=True, preselect=False, select=False, objects=None, minimum_count=1, maximum_count=0, custom_filter=None)","Description":"Prompts user to pick or select one or more objects.\r\n        ","ArgumentDesc":"\r\n  message[opt] = a prompt or message.\r\n  filter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n      that can be selected. Object types can be added together to filter\r\n      several different kinds of geometry. use the filter class to get values\r\n  group[opt] = Honor object grouping.  If omitted and the user picks a group,\r\n      the entire group will be picked (True). Note, if filter is set to a\r\n      value other than 0 (All objects), then group selection will be disabled.\r\n  preselect[opt] =  Allow for the selection of pre-selected objects.\r\n  select[opt] = Select the picked objects.  If False, the objects that are\r\n      picked are not selected.\r\n  objects[opt] = list of objects that are allowed to be selected\r\n  mimimum_count, maximum_count[out] = limits on number of objects allowed to be selected\r\nReturns\r\n  list of Guids identifying the picked objects\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetObjects in module rhinoscript.selection:\r\n\r\nGetObjects(message=None, filter=0, group=True, preselect=False, select=False, objects=None, minimum_count=1, maximum_count=0, custom_filter=None) |      Prompts user to pick or select one or more objects.\r\n        Parameters:\r\n          message[opt] = a prompt or message.\r\n          filter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n              that can be selected. Object types can be added together to filter\r\n              several different kinds of geometry. use the filter class to get values\r\n          group[opt] = Honor object grouping.  If omitted and the user picks a group,\r\n              the entire group will be picked (True). Note, if filter is set to a\r\n              value other than 0 (All objects), then group selection will be disabled.\r\n          preselect[opt] =  Allow for the selection of pre-selected objects.\r\n          select[opt] = Select the picked objects.  If False, the objects that are\r\n              picked are not selected.\r\n          objects[opt] = list of objects that are allowed to be selected\r\n          mimimum_count, maximum_count[out] = limits on number of objects allowed to be selected\r\n        Returns\r\n          list of Guids identifying the picked objects","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"GetObjectsEx","Arguments":["message=None","filter=0","group=True","preselect=False","select=False","objects=None"],"Signature":"GetObjectsEx (message=None, filter=0, group=True, preselect=False, select=False, objects=None)","Description":"Prompts user to pick, or select one or more objects\r\n        ","ArgumentDesc":"\r\nmessage[opt] = a prompt or message.\r\nfilter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n    that can be selected. Object types can be added together to filter\r\n    several different kinds of geometry. use the filter class to get values\r\ngroup[opt] = Honor object grouping.  If omitted and the user picks a group,\r\n    the entire group will be picked (True). Note, if filter is set to a\r\n    value other than 0 (All objects), then group selection will be disabled.\r\npreselect[opt] =  Allow for the selection of pre-selected objects.\r\nselect[opt] = Select the picked objects. If False, the objects that are\r\n    picked are not selected.\r\nobjects[opt] = list of object identifiers specifying objects that are\r\n    allowed to be selected\r\n        ","Returns":"\r\nA list of tuples containing the following information\r\n  element 0 = identifier of the object\r\n  element 1 = True if the object was preselected, otherwise False\r\n  element 2 = selection method (see help)\r\n  element 3 = selection point\r\n  element 4 = name of the view selection was made\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetObjectsEx in module rhinoscript.selection:\r\n\r\nGetObjectsEx(message=None, filter=0, group=True, preselect=False, select=False, objects=None) |      Prompts user to pick, or select one or more objects\r\n        Parameters:\r\n          message[opt] = a prompt or message.\r\n          filter[opt] = The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n              that can be selected. Object types can be added together to filter\r\n              several different kinds of geometry. use the filter class to get values\r\n          group[opt] = Honor object grouping.  If omitted and the user picks a group,\r\n              the entire group will be picked (True). Note, if filter is set to a\r\n              value other than 0 (All objects), then group selection will be disabled.\r\n          preselect[opt] =  Allow for the selection of pre-selected objects.\r\n          select[opt] = Select the picked objects. If False, the objects that are\r\n              picked are not selected.\r\n          objects[opt] = list of object identifiers specifying objects that are\r\n              allowed to be selected\r\n        Returns:\r\n          A list of tuples containing the following information\r\n            element 0 = identifier of the object\r\n            element 1 = True if the object was preselected, otherwise False\r\n            element 2 = selection method (see help)\r\n            element 3 = selection point\r\n            element 4 = name of the view selection was made","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"GetPointCoordinates","Arguments":["message='select points'","preselect=False"],"Signature":"GetPointCoordinates (message='select points', preselect=False)","Description":"Prompts the user to select one or more point objects.\r\n        Returns:\r\n          list of 3d coordinates on success\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetPointCoordinates in module rhinoscript.selection:\r\n\r\nGetPointCoordinates(message='select points', preselect=False) |      Prompts the user to select one or more point objects.\r\n        Returns:\r\n          list of 3d coordinates on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"GetSurfaceObject","Arguments":["message='select surface'","preselect=False","select=False"],"Signature":"GetSurfaceObject (message='select surface', preselect=False, select=False)","Description":"Prompts the user to select a single surface\r\n        ","ArgumentDesc":"\r\nmessage[opt] = prompt displayed\r\npreselect[opt] = allow for preselected objects\r\nselect[opt] = select the picked object\r\n        ","Returns":"\r\ntuple of information on success\r\n  element 0 = identifier of the surface\r\n  element 1 = True if the surface was preselected, otherwise False\r\n  element 2 = selection method ( see help )\r\n  element 3 = selection point\r\n  element 4 = u,v surface parameter of the selection point\r\n  element 5 = name of the view in which the selection was made\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetSurfaceObject in module rhinoscript.selection:\r\n\r\nGetSurfaceObject(message='select surface', preselect=False, select=False) |      Prompts the user to select a single surface\r\n        Parameters:\r\n          message[opt] = prompt displayed\r\n          preselect[opt] = allow for preselected objects\r\n          select[opt] = select the picked object\r\n        Returns:\r\n          tuple of information on success\r\n            element 0 = identifier of the surface\r\n            element 1 = True if the surface was preselected, otherwise False\r\n            element 2 = selection method ( see help )\r\n            element 3 = selection point\r\n            element 4 = u,v surface parameter of the selection point\r\n            element 5 = name of the view in which the selection was made\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"HiddenObjects","Arguments":["include_lights=False","include_grips=False","include_references=False"],"Signature":"HiddenObjects (include_lights=False, include_grips=False, include_references=False)","Description":"Returns identifiers of all hidden objects in the document. Hidden objects\r\n        are not visible, cannot be snapped to, and cannot be selected\r\n        ","ArgumentDesc":"\r\ninclude_lights[opt] = include light objects\r\ninclude_grips[opt] = include grip objects\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HiddenObjects in module rhinoscript.selection:\r\n\r\nHiddenObjects(include_lights=False, include_grips=False, include_references=False) |      Returns identifiers of all hidden objects in the document. Hidden objects\r\n        are not visible, cannot be snapped to, and cannot be selected\r\n        Parameters:\r\n          include_lights[opt] = include light objects\r\n          include_grips[opt] = include grip objects","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"InvertSelectedObjects","Arguments":["include_lights=False","include_grips=False","include_references=False"],"Signature":"InvertSelectedObjects (include_lights=False, include_grips=False, include_references=False)","Description":"Inverts the current object selection. The identifiers of the newly\r\n        selected objects are returned\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function InvertSelectedObjects in module rhinoscript.selection:\r\n\r\nInvertSelectedObjects(include_lights=False, include_grips=False, include_references=False) |      Inverts the current object selection. The identifiers of the newly\r\n        selected objects are returned","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"LastCreatedObjects","Arguments":["select=False"],"Signature":"LastCreatedObjects (select=False)","Description":"Returns identifiers of the objects that were most recently created or changed\r\n        by scripting a Rhino command using the Command function. It is important to\r\n        call this function immediately after calling the Command function as only the\r\n        most recently created or changed object identifiers will be returned\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LastCreatedObjects in module rhinoscript.selection:\r\n\r\nLastCreatedObjects(select=False) |      Returns identifiers of the objects that were most recently created or changed\r\n        by scripting a Rhino command using the Command function. It is important to\r\n        call this function immediately after calling the Command function as only the\r\n        most recently created or changed object identifiers will be returned","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"LastObject","Arguments":["select=False","include_lights=False","include_grips=False"],"Signature":"LastObject (select=False, include_lights=False, include_grips=False)","Description":"Returns the identifier of the last object in the document. The last object\r\n        in the document is the first object created by the user\r\n        ","ArgumentDesc":"\r\nselect[opt] = select the object\r\ninclude_lights[opt] = include lights in the potential set\r\ninclude_grips[opt] = include grips in the potential set\r\n        ","Returns":"\r\nidentifier of the object on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LastObject in module rhinoscript.selection:\r\n\r\nLastObject(select=False, include_lights=False, include_grips=False) |      Returns the identifier of the last object in the document. The last object\r\n        in the document is the first object created by the user\r\n        Parameters:\r\n          select[opt] = select the object\r\n          include_lights[opt] = include lights in the potential set\r\n          include_grips[opt] = include grips in the potential set\r\n        Returns:\r\n          identifier of the object on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"LockedObjects","Arguments":["include_lights=False","include_grips=False","include_references=False"],"Signature":"LockedObjects (include_lights=False, include_grips=False, include_references=False)","Description":"Returns identifiers of all locked objects in the document. Locked objects\r\n        cannot be snapped to, and cannot be selected\r\n        ","ArgumentDesc":"\r\ninclude_lights[opt] = include light objects\r\ninclude_grips[opt] = include grip objects\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function LockedObjects in module rhinoscript.selection:\r\n\r\nLockedObjects(include_lights=False, include_grips=False, include_references=False) |      Returns identifiers of all locked objects in the document. Locked objects\r\n        cannot be snapped to, and cannot be selected\r\n        Parameters:\r\n          include_lights[opt] = include light objects\r\n          include_grips[opt] = include grip objects","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"NextObject","Arguments":["object_id","select=False","include_lights=False","include_grips=False"],"Signature":"NextObject (object_id, select=False, include_lights=False, include_grips=False)","Description":"Returns the identifier of the next object in the document\r\n        ","ArgumentDesc":"\r\nobject_id = the identifier of the object from which to get the next object\r\nselect[opt] = select the object\r\ninclude_lights[opt] = include lights in the potential set\r\ninclude_grips[opt] = include grips in the potential set\r\n        ","Returns":"\r\nidentifier of the object on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function NextObject in module rhinoscript.selection:\r\n\r\nNextObject(object_id, select=False, include_lights=False, include_grips=False) |      Returns the identifier of the next object in the document\r\n        Parameters:\r\n          object_id = the identifier of the object from which to get the next object\r\n          select[opt] = select the object\r\n          include_lights[opt] = include lights in the potential set\r\n          include_grips[opt] = include grips in the potential set\r\n        Returns:\r\n          identifier of the object on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"NormalObjects","Arguments":["include_lights=False","include_grips=False"],"Signature":"NormalObjects (include_lights=False, include_grips=False)","Description":"Returns identifiers of all normal objects in the document. Normal objects\r\n        are visible, can be snapped to, and are independent of selection state\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function NormalObjects in module rhinoscript.selection:\r\n\r\nNormalObjects(include_lights=False, include_grips=False) |      Returns identifiers of all normal objects in the document. Normal objects\r\n        are visible, can be snapped to, and are independent of selection state","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"ObjectsByColor","Arguments":["color","select=False","include_lights=False"],"Signature":"ObjectsByColor (color, select=False, include_lights=False)","Description":"Returns identifiers of all objects based on color\r\n        ","ArgumentDesc":"\r\ncolor = color to get objects by\r\nselect[opt] = select the objects\r\ninclude_lights[opt] = include lights in the set\r\n        ","Returns":"\r\nlist of identifiers\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectsByColor in module rhinoscript.selection:\r\n\r\nObjectsByColor(color, select=False, include_lights=False) |      Returns identifiers of all objects based on color\r\n        Parameters:\r\n          color = color to get objects by\r\n          select[opt] = select the objects\r\n          include_lights[opt] = include lights in the set\r\n        Returns:\r\n          list of identifiers","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"ObjectsByGroup","Arguments":["group_name","select=False"],"Signature":"ObjectsByGroup (group_name, select=False)","Description":"Returns identifiers of all objects based on the objects' group name\r\n        ","ArgumentDesc":"\r\ngroup_name = name of the group\r\nselect [opt] = select the objects\r\n        ","Returns":"\r\nlist of identifiers on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectsByGroup in module rhinoscript.selection:\r\n\r\nObjectsByGroup(group_name, select=False) |      Returns identifiers of all objects based on the objects' group name\r\n        Parameters:\r\n          group_name = name of the group\r\n          select [opt] = select the objects\r\n        Returns:\r\n          list of identifiers on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"ObjectsByLayer","Arguments":["layer_name","select=False"],"Signature":"ObjectsByLayer (layer_name, select=False)","Description":"Returns identifiers of all objects based on the objects' layer name\r\n        ","ArgumentDesc":"\r\nlayer_name = name of the layer\r\nselect [opt] = select the objects\r\n        ","Returns":"\r\nlist of identifiers\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectsByLayer in module rhinoscript.selection:\r\n\r\nObjectsByLayer(layer_name, select=False) |      Returns identifiers of all objects based on the objects' layer name\r\n        Parameters:\r\n          layer_name = name of the layer\r\n          select [opt] = select the objects\r\n        Returns:\r\n          list of identifiers","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"ObjectsByName","Arguments":["name","select=False","include_lights=False","include_references=False"],"Signature":"ObjectsByName (name, select=False, include_lights=False, include_references=False)","Description":"Returns identifiers of all objects based on user-assigned name\r\n        ","ArgumentDesc":"\r\nname = name of the object or objects\r\nselect[opt] = select the objects\r\ninclude_lights[opt] = include light objects\r\n        ","Returns":"\r\nlist of identifiers\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectsByName in module rhinoscript.selection:\r\n\r\nObjectsByName(name, select=False, include_lights=False, include_references=False) |      Returns identifiers of all objects based on user-assigned name\r\n        Parameters:\r\n          name = name of the object or objects\r\n          select[opt] = select the objects\r\n          include_lights[opt] = include light objects\r\n        Returns:\r\n          list of identifiers","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"ObjectsByType","Arguments":["geometry_type","select=False","state=0"],"Signature":"ObjectsByType (geometry_type, select=False, state=0)","Description":"Returns identifiers of all objects based on the objects' geometry type.\r\n        ","ArgumentDesc":"\r\ngeometry_type = The type(s) of geometry objects (points, curves, surfaces,\r\n       meshes, etc.) that can be selected. Object types can be\r\n       added together to filter several different kinds of geometry.\r\n        Value        Description\r\n         0           All objects\r\n         1           Point\r\n         2           Point cloud\r\n         4           Curve\r\n         8           Surface or single-face brep\r\n         16          Polysurface or multiple-face\r\n         32          Mesh\r\n         256         Light\r\n         512         Annotation\r\n         4096        Instance or block reference\r\n         8192        Text dot object\r\n         16384       Grip object\r\n         32768       Detail\r\n         65536       Hatch\r\n         131072      Morph control\r\n         134217728   Cage\r\n         268435456   Phantom\r\n         536870912   Clipping plane\r\nselect[opt] = Select the objects\r\nstate[opt] = Object state. See help\r\n        ","Returns":"\r\nA list of Guids identifying the objects.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ObjectsByType in module rhinoscript.selection:\r\n\r\nObjectsByType(geometry_type, select=False, state=0) |      Returns identifiers of all objects based on the objects' geometry type.\r\n        Parameters:\r\n          geometry_type = The type(s) of geometry objects (points, curves, surfaces,\r\n                 meshes, etc.) that can be selected. Object types can be\r\n                 added together to filter several different kinds of geometry.\r\n                  Value        Description\r\n                   0           All objects\r\n                   1           Point\r\n                   2           Point cloud\r\n                   4           Curve\r\n                   8           Surface or single-face brep\r\n                   16          Polysurface or multiple-face\r\n                   32          Mesh\r\n                   256         Light\r\n                   512         Annotation\r\n                   4096        Instance or block reference\r\n                   8192        Text dot object\r\n                   16384       Grip object\r\n                   32768       Detail\r\n                   65536       Hatch\r\n                   131072      Morph control\r\n                   134217728   Cage\r\n                   268435456   Phantom\r\n                   536870912   Clipping plane\r\n          select[opt] = Select the objects\r\n          state[opt] = Object state. See help\r\n        Returns:\r\n          A list of Guids identifying the objects.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"SelectedObjects","Arguments":["include_lights=False","include_grips=False"],"Signature":"SelectedObjects (include_lights=False, include_grips=False)","Description":"Returns the identifiers of all objects that are currently selected\r\n        ","ArgumentDesc":"\r\ninclude_lights [opt] = include light objects\r\ninclude_grips [opt] = include grip objects\r\n        ","Returns":"\r\nlist of Guids identifying the objects\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SelectedObjects in module rhinoscript.selection:\r\n\r\nSelectedObjects(include_lights=False, include_grips=False) |      Returns the identifiers of all objects that are currently selected\r\n        Parameters:\r\n          include_lights [opt] = include light objects\r\n          include_grips [opt] = include grip objects\r\n        Returns:\r\n          list of Guids identifying the objects","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"VisibleObjects","Arguments":["view=None","select=False","include_lights=False","include_grips=False"],"Signature":"VisibleObjects (view=None, select=False, include_lights=False, include_grips=False)","Description":"Return identifiers of all objects that are visible in a specified view\r\n        ","ArgumentDesc":"\r\nview [opt] = the view to use. If omitted, the current active view is used\r\nselect [opt] = Select the objects\r\ninclude_lights [opt] = include light objects\r\ninclude_grips [opt] = include grip objects\r\n        ","Returns":"\r\nlist of Guids identifying the objects\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function VisibleObjects in module rhinoscript.selection:\r\n\r\nVisibleObjects(view=None, select=False, include_lights=False, include_grips=False) |      Return identifiers of all objects that are visible in a specified view\r\n        Parameters:\r\n          view [opt] = the view to use. If omitted, the current active view is used\r\n          select [opt] = Select the objects\r\n          include_lights [opt] = include light objects\r\n          include_grips [opt] = include grip objects\r\n        Returns:\r\n          list of Guids identifying the objects","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"selection","Name":"WindowPick","Arguments":["corner1","corner2","view=None","select=False","in_window=True"],"Signature":"WindowPick (corner1, corner2, view=None, select=False, in_window=True)","Description":"Picks objects using either a window or crossing selection\r\n        ","ArgumentDesc":"\r\ncorner1, corner2 = corners of selection window\r\nview[opt] = view to perform the selection in\r\nselect[opt] = select picked objects\r\nin_window[opt] = if False, then a crossing window selection is performed\r\n        ","Returns":"\r\nlist of object ids on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function WindowPick in module rhinoscript.selection:\r\n\r\nWindowPick(corner1, corner2, view=None, select=False, in_window=True) |      Picks objects using either a window or crossing selection\r\n        Parameters:\r\n          corner1, corner2 = corners of selection window\r\n          view[opt] = view to perform the selection in\r\n          select[opt] = select picked objects\r\n          in_window[opt] = if False, then a crossing window selection is performed\r\n        Returns:\r\n          list of object ids on success","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"surface","functions":[{"ModuleName":"surface","Name":"AddBox","Arguments":["corners"],"Signature":"AddBox (corners)","Description":"Adds a box shaped polysurface to the document\r\n        ","ArgumentDesc":"\r\ncorners = 8 3D points that define the corners of the box. Points need to\r\n  be in counter-clockwise order starting with the bottom rectangle of the box\r\n        ","Returns":"\r\nidentifier of the new object on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddBox in module rhinoscript.surface:\r\n\r\nAddBox(corners) |      Adds a box shaped polysurface to the document\r\n        Parameters:\r\n          corners = 8 3D points that define the corners of the box. Points need to\r\n            be in counter-clockwise order starting with the bottom rectangle of the box\r\n        Returns:\r\n          identifier of the new object on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddCone","Arguments":["base","height","radius","cap=True"],"Signature":"AddCone (base, height, radius, cap=True)","Description":"Adds a cone shaped polysurface to the document\r\n        ","ArgumentDesc":"\r\nbase = 3D origin point of the cone or a plane with an apex at the origin\r\n    and normal along the plane's z-axis\r\nheight = 3D height point of the cone if base is a 3D point. The height\r\n    point defines the height and direction of the cone. If base is a\r\n    plane, height is a numeric value\r\nradius = the radius at the base of the cone\r\ncap [opt] = cap base of the cone\r\n        ","Returns":"\r\nidentifier of the new object on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddCone in module rhinoscript.surface:\r\n\r\nAddCone(base, height, radius, cap=True) |      Adds a cone shaped polysurface to the document\r\n        Parameters:\r\n          base = 3D origin point of the cone or a plane with an apex at the origin\r\n              and normal along the plane's z-axis\r\n          height = 3D height point of the cone if base is a 3D point. The height\r\n              point defines the height and direction of the cone. If base is a\r\n              plane, height is a numeric value\r\n          radius = the radius at the base of the cone\r\n          cap [opt] = cap base of the cone\r\n        Returns:\r\n          identifier of the new object on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddCutPlane","Arguments":["object_ids","start_point","end_point","normal=None"],"Signature":"AddCutPlane (object_ids, start_point, end_point, normal=None)","Description":"Adds a planar surface through objects at a designated location. For more\r\n        information, see the Rhino help file for the CutPlane command\r\n        ","ArgumentDesc":"\r\nobjects_ids = identifiers of objects that the cutting plane will\r\n    pass through\r\nstart_point, end_point = line that defines the cutting plane\r\nnormal[opt] = vector that will be contained in the returned planar\r\n    surface. In the case of Rhino's CutPlane command, this is the\r\n    normal to, or Z axis of, the active view's construction plane.\r\n    If omitted, the world Z axis is used\r\n        ","Returns":"\r\nidentifier of new object on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddCutPlane in module rhinoscript.surface:\r\n\r\nAddCutPlane(object_ids, start_point, end_point, normal=None) |      Adds a planar surface through objects at a designated location. For more\r\n        information, see the Rhino help file for the CutPlane command\r\n        Parameters:\r\n          objects_ids = identifiers of objects that the cutting plane will\r\n              pass through\r\n          start_point, end_point = line that defines the cutting plane\r\n          normal[opt] = vector that will be contained in the returned planar\r\n              surface. In the case of Rhino's CutPlane command, this is the\r\n              normal to, or Z axis of, the active view's construction plane.\r\n              If omitted, the world Z axis is used\r\n        Returns:\r\n          identifier of new object on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddCylinder","Arguments":["base","height","radius","cap=True"],"Signature":"AddCylinder (base, height, radius, cap=True)","Description":"Adds a cylinder-shaped polysurface to the document\r\n        ","ArgumentDesc":"\r\nbase = The 3D base point of the cylinder or the base plane of the cylinder\r\nheight = if base is a point, then height is a 3D height point of the\r\n  cylinder. The height point defines the height and direction of the\r\n  cylinder. If base is a plane, then height is the numeric height value\r\n  of the cylinder\r\nradius = radius of the cylinder\r\ncap[opt] = cap the cylinder\r\n        ","Returns":"\r\nidentifier of new object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddCylinder in module rhinoscript.surface:\r\n\r\nAddCylinder(base, height, radius, cap=True) |      Adds a cylinder-shaped polysurface to the document\r\n        Parameters:\r\n          base = The 3D base point of the cylinder or the base plane of the cylinder\r\n          height = if base is a point, then height is a 3D height point of the\r\n            cylinder. The height point defines the height and direction of the\r\n            cylinder. If base is a plane, then height is the numeric height value\r\n            of the cylinder\r\n          radius = radius of the cylinder\r\n          cap[opt] = cap the cylinder\r\n        Returns:\r\n          identifier of new object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddEdgeSrf","Arguments":["curve_ids"],"Signature":"AddEdgeSrf (curve_ids)","Description":"Creates a surface from 2, 3, or 4 edge curves\r\n        ","ArgumentDesc":"\r\ncurve_ids = list or tuple of curves\r\n        ","Returns":"\r\nidentifier of new object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddEdgeSrf in module rhinoscript.surface:\r\n\r\nAddEdgeSrf(curve_ids) |      Creates a surface from 2, 3, or 4 edge curves\r\n        Parameters:\r\n          curve_ids = list or tuple of curves\r\n        Returns:\r\n          identifier of new object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddLoftSrf","Arguments":["object_ids","start=None","end=None","loft_type=0","simplify_method=0","value=0","closed=False"],"Signature":"AddLoftSrf (object_ids, start=None, end=None, loft_type=0, simplify_method=0, value=0, closed=False)","Description":"Adds a surface created by lofting curves to the document.\r\n        - no curve sorting performed. pass in curves in the order you want them sorted\r\n        - directions of open curves not adjusted. Use CurveDirectionsMatch and\r\n          ReverseCurve to adjust the directions of open curves\r\n        - seams of closed curves are not adjusted. Use CurveSeam to adjust the seam\r\n          of closed curves\r\n        ","ArgumentDesc":"\r\nobject_ids = ordered list of the curves to loft through\r\nstart [opt] = starting point of the loft\r\nend [opt] = ending point of the loft\r\nloft_type [opt] = type of loft. Possible options are:\r\n  0 = Normal. Uses chord-length parameterization in the loft direction\r\n  1 = Loose. The surface is allowed to move away from the original curves\r\n      to make a smoother surface. The surface control points are created\r\n      at the same locations as the control points of the loft input curves.\r\n  2 = Straight. The sections between the curves are straight. This is\r\n      also known as a ruled surface.\r\n  3 = Tight. The surface sticks closely to the original curves. Uses square\r\n      root of chord-length parameterization in the loft direction\r\n  4 = Developable. Creates a separate developable surface or polysurface\r\n      from each pair of curves.\r\nsimplify_method [opt] = Possible options are:\r\n  0 = None. Does not simplify.\r\n  1 = Rebuild. Rebuilds the shape curves before lofting.\r\n  2 = Refit. Refits the shape curves to a specified tolerance\r\nvalue [opt] = A value based on the specified style.\r\n  style=1 (Rebuild), then value is the number of control point used to rebuild\r\n  style=1 is specified and this argument is omitted, then curves will be\r\n  rebuilt using 10 control points.\r\n  style=2 (Refit), then value is the tolerance used to rebuild.\r\n  style=2 is specified and this argument is omitted, then the document's\r\n  absolute tolerance us used for refitting.\r\n        ","Returns":"\r\nArray containing the identifiers of the new surface objects if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddLoftSrf in module rhinoscript.surface:\r\n\r\nAddLoftSrf(object_ids, start=None, end=None, loft_type=0, simplify_method=0, value=0, closed=False) |      Adds a surface created by lofting curves to the document.\r\n        - no curve sorting performed. pass in curves in the order you want them sorted\r\n        - directions of open curves not adjusted. Use CurveDirectionsMatch and\r\n          ReverseCurve to adjust the directions of open curves\r\n        - seams of closed curves are not adjusted. Use CurveSeam to adjust the seam\r\n          of closed curves\r\n        Parameters:\r\n          object_ids = ordered list of the curves to loft through\r\n          start [opt] = starting point of the loft\r\n          end [opt] = ending point of the loft\r\n          loft_type [opt] = type of loft. Possible options are:\r\n            0 = Normal. Uses chord-length parameterization in the loft direction\r\n            1 = Loose. The surface is allowed to move away from the original curves\r\n                to make a smoother surface. The surface control points are created\r\n                at the same locations as the control points of the loft input curves.\r\n            2 = Straight. The sections between the curves are straight. This is\r\n                also known as a ruled surface.\r\n            3 = Tight. The surface sticks closely to the original curves. Uses square\r\n                root of chord-length parameterization in the loft direction\r\n            4 = Developable. Creates a separate developable surface or polysurface\r\n                from each pair of curves.\r\n          simplify_method [opt] = Possible options are:\r\n            0 = None. Does not simplify.\r\n            1 = Rebuild. Rebuilds the shape curves before lofting.\r\n            2 = Refit. Refits the shape curves to a specified tolerance\r\n          value [opt] = A value based on the specified style.\r\n            style=1 (Rebuild), then value is the number of control point used to rebuild\r\n            style=1 is specified and this argument is omitted, then curves will be\r\n            rebuilt using 10 control points.\r\n            style=2 (Refit), then value is the tolerance used to rebuild.\r\n            style=2 is specified and this argument is omitted, then the document's\r\n            absolute tolerance us used for refitting.\r\n        Returns:\r\n          Array containing the identifiers of the new surface objects if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddNetworkSrf","Arguments":["curves","continuity=1","edge_tolerance=0","interior_tolerance=0","angle_tolerance=0"],"Signature":"AddNetworkSrf (curves, continuity=1, edge_tolerance=0, interior_tolerance=0, angle_tolerance=0)","Description":"Creates a surface from a network of crossing curves\r\n        ","ArgumentDesc":"\r\ncurves = curves from which to create the surface\r\ncontinuity[opt] = how the edges match the input geometry\r\n  0=loose, 1=position, 2=tangency, 3=curvature\r\n        ","Returns":"\r\nidentifier of new object if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddNetworkSrf in module rhinoscript.surface:\r\n\r\nAddNetworkSrf(curves, continuity=1, edge_tolerance=0, interior_tolerance=0, angle_tolerance=0) |      Creates a surface from a network of crossing curves\r\n        Parameters:\r\n          curves = curves from which to create the surface\r\n          continuity[opt] = how the edges match the input geometry\r\n            0=loose, 1=position, 2=tangency, 3=curvature\r\n        Returns:\r\n          identifier of new object if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddNurbsSurface","Arguments":["point_count","points","knots_u","knots_v","degree","weights=None"],"Signature":"AddNurbsSurface (point_count, points, knots_u, knots_v, degree, weights=None)","Description":"Adds a NURBS surface object to the document\r\n        ","ArgumentDesc":"\r\npoint_count = number of control points in the u and v direction\r\npoints = list of 3D points\r\nknots_u = knot values for the surface in the u direction.\r\n          Must contain point_count[0]+degree[0]-1 elements\r\nknots_v = knot values for the surface in the v direction.\r\n          Must contain point_count[1]+degree[1]-1 elements\r\ndegree = degree of the surface in the u and v directions.\r\nweights[opt] = weight values for the surface. The number of elements in\r\n  weights must equal the number of elements in points. Values must be\r\n  greater than zero.\r\n        ","Returns":"\r\nidentifier of new object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddNurbsSurface in module rhinoscript.surface:\r\n\r\nAddNurbsSurface(point_count, points, knots_u, knots_v, degree, weights=None) |      Adds a NURBS surface object to the document\r\n        Parameters:\r\n          point_count = number of control points in the u and v direction\r\n          points = list of 3D points\r\n          knots_u = knot values for the surface in the u direction.\r\n                    Must contain point_count[0]+degree[0]-1 elements\r\n          knots_v = knot values for the surface in the v direction.\r\n                    Must contain point_count[1]+degree[1]-1 elements\r\n          degree = degree of the surface in the u and v directions.\r\n          weights[opt] = weight values for the surface. The number of elements in\r\n            weights must equal the number of elements in points. Values must be\r\n            greater than zero.\r\n        Returns:\r\n          identifier of new object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddPatch","Arguments":["object_ids","uv_spans_tuple_OR_surface_object_id","tolerance=None","trim=True","point_spacing=0.10000000000000001","flexibility=1.0","surface_pull=1.0","fix_edges=False"],"Signature":"AddPatch (object_ids, uv_spans_tuple_OR_surface_object_id, tolerance=None, trim=True, point_spacing=0.10000000000000001, flexibility=1.0, surface_pull=1.0, fix_edges=False)","Description":"Fits a surface through curve, point, point cloud, and mesh objects.\r\n        ","ArgumentDesc":"\r\nobject_ids = a list of object identifiers that indicate the objects to use for the patch fitting. \r\n    Acceptable object types include curves, points, point clouds, and meshes.\r\nuv_spans_tuple_OR_surface_object_id =  the U and V direction span counts for the automatically generated surface OR \r\n    The identifier of the starting surface.  It is best if you create a starting surface that is similar in shape \r\n    to the surface you are trying to create.\r\ntolerance[opt] = The tolerance used by input analysis functions. If omitted, Rhino's document absolute tolerance is used.\r\ntrim[opt] = Try to find an outside curve and trims the surface to it.  The default value is True.\r\npoint_spacing[opt] = The basic distance between points sampled from input curves.  The default value is 0.1.\r\nflexibility[opt] = Determines the behavior of the surface in areas where its not otherwise controlled by the input.\r\n    Lower numbers make the surface behave more like a stiff material, higher, more like a flexible material.  \r\n    That is, each span is made to more closely match the spans adjacent to it if there is no input geometry \r\n    mapping to that area of the surface when the flexibility value is low.  The scale is logarithmic.  \r\n    For example, numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100 \r\n    make the surface flexible.  The default value is 1.0.\r\nsurface_pull[opt] = Similar to stiffness, but applies to the starting surface. The bigger the pull, the closer \r\n    the resulting surface shape will be to the starting surface.  The default value is 1.0.\r\nfix_edges[opt] = Clamps the edges of the starting surface in place. This option is useful if you are using a \r\n    curve or points for deforming an existing surface, and you do not want the edges of the starting surface \r\n    to move.  The default if False.\r\n        ","Returns":"\r\nIdentifier of the new surface object if successful.\r\nNone on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPatch in module rhinoscript.surface:\r\n\r\nAddPatch(object_ids, uv_spans_tuple_OR_surface_object_id, tolerance=None, trim=True, point_spacing=0.10000000000000001, flexibility=1.0, surface_pull=1.0, fix_edges=False) |      Fits a surface through curve, point, point cloud, and mesh objects.\r\n        Parameters:\r\n          object_ids = a list of object identifiers that indicate the objects to use for the patch fitting. \r\n              Acceptable object types include curves, points, point clouds, and meshes.\r\n          uv_spans_tuple_OR_surface_object_id =  the U and V direction span counts for the automatically generated surface OR \r\n              The identifier of the starting surface.  It is best if you create a starting surface that is similar in shape \r\n              to the surface you are trying to create.\r\n          tolerance[opt] = The tolerance used by input analysis functions. If omitted, Rhino's document absolute tolerance is used.\r\n          trim[opt] = Try to find an outside curve and trims the surface to it.  The default value is True.\r\n          point_spacing[opt] = The basic distance between points sampled from input curves.  The default value is 0.1.\r\n          flexibility[opt] = Determines the behavior of the surface in areas where its not otherwise controlled by the input.\r\n              Lower numbers make the surface behave more like a stiff material, higher, more like a flexible material.  \r\n              That is, each span is made to more closely match the spans adjacent to it if there is no input geometry \r\n              mapping to that area of the surface when the flexibility value is low.  The scale is logarithmic.  \r\n              For example, numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100 \r\n              make the surface flexible.  The default value is 1.0.\r\n          surface_pull[opt] = Similar to stiffness, but applies to the starting surface. The bigger the pull, the closer \r\n              the resulting surface shape will be to the starting surface.  The default value is 1.0.\r\n          fix_edges[opt] = Clamps the edges of the starting surface in place. This option is useful if you are using a \r\n              curve or points for deforming an existing surface, and you do not want the edges of the starting surface \r\n              to move.  The default if False.\r\n        Returns:\r\n          Identifier of the new surface object if successful.\r\n          None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddPipe","Arguments":["curve_id","parameters","radii","blend_type=0","cap=0","fit=False"],"Signature":"AddPipe (curve_id, parameters, radii, blend_type=0, cap=0, fit=False)","Description":"Creates a single walled surface with a circular profile around a curve\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of rail curve\r\nparameters, radii = list of radius values at normalized curve parameters\r\nblend_type = 0(local) or 1(global)\r\ncap = 0(none), 1(flat), 2(round)\r\nfit = attempt to fit a single surface\r\n        ","Returns":"\r\nList of identifiers of new objects created\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPipe in module rhinoscript.surface:\r\n\r\nAddPipe(curve_id, parameters, radii, blend_type=0, cap=0, fit=False) |      Creates a single walled surface with a circular profile around a curve\r\n        Parameters:\r\n          curve_id = identifier of rail curve\r\n          parameters, radii = list of radius values at normalized curve parameters\r\n          blend_type = 0(local) or 1(global)\r\n          cap = 0(none), 1(flat), 2(round)\r\n          fit = attempt to fit a single surface\r\n        Returns:\r\n          List of identifiers of new objects created","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddPlanarSrf","Arguments":["object_ids"],"Signature":"AddPlanarSrf (object_ids)","Description":"Creates one or more surfaces from planar curves\r\n        ","ArgumentDesc":"\r\nobject_ids = curves to use for creating planar surfaces\r\n        ","Returns":"\r\nlist of surfaces created on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPlanarSrf in module rhinoscript.surface:\r\n\r\nAddPlanarSrf(object_ids) |      Creates one or more surfaces from planar curves\r\n        Parameters:\r\n          object_ids = curves to use for creating planar surfaces\r\n        Returns:\r\n          list of surfaces created on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddPlaneSurface","Arguments":["plane","u_dir","v_dir"],"Signature":"AddPlaneSurface (plane, u_dir, v_dir)","Description":"Create a plane surface and add it to the document.\r\n        ","ArgumentDesc":"\r\nplane = The plane.\r\nu_dir = The magnitude in the U direction.\r\nv_dir = The magnitude in the V direction.\r\n        ","Returns":"\r\nThe identifier of the new object if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddPlaneSurface in module rhinoscript.surface:\r\n\r\nAddPlaneSurface(plane, u_dir, v_dir) |      Create a plane surface and add it to the document.\r\n        Parameters:\r\n          plane = The plane.\r\n          u_dir = The magnitude in the U direction.\r\n          v_dir = The magnitude in the V direction.\r\n        Returns:\r\n          The identifier of the new object if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddRevSrf","Arguments":["curve_id","axis","start_angle=0.0","end_angle=360.0"],"Signature":"AddRevSrf (curve_id, axis, start_angle=0.0, end_angle=360.0)","Description":"Create a surface by revolving a curve around an axis\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of profile curve\r\naxis = line for the rail revolve axis\r\nstart_angle[opt], end_angle[opt] = start and end angles of revolve\r\n        ","Returns":"\r\nidentifier of new object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddRevSrf in module rhinoscript.surface:\r\n\r\nAddRevSrf(curve_id, axis, start_angle=0.0, end_angle=360.0) |      Create a surface by revolving a curve around an axis\r\n        Parameters:\r\n          curve_id = identifier of profile curve\r\n          axis = line for the rail revolve axis\r\n          start_angle[opt], end_angle[opt] = start and end angles of revolve\r\n        Returns:\r\n          identifier of new object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddSphere","Arguments":["center_or_plane","radius"],"Signature":"AddSphere (center_or_plane, radius)","Description":"Add a spherical surface to the document\r\n        ","ArgumentDesc":"\r\ncenter_or_plane = center point of the sphere. If a plane is input,\r\n  the origin of the plane will be the center of the sphere\r\nradius = radius of the sphere in the current model units\r\n        ","Returns":"\r\nintentifier of the new object on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSphere in module rhinoscript.surface:\r\n\r\nAddSphere(center_or_plane, radius) |      Add a spherical surface to the document\r\n        Parameters:\r\n          center_or_plane = center point of the sphere. If a plane is input,\r\n            the origin of the plane will be the center of the sphere\r\n          radius = radius of the sphere in the current model units\r\n        Returns:\r\n          intentifier of the new object on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddSrfContourCrvs","Arguments":["object_id","points_or_plane","interval=None"],"Signature":"AddSrfContourCrvs (object_id, points_or_plane, interval=None)","Description":"Adds a spaced series of planar curves resulting from the intersection of\r\n        defined cutting planes through a surface or polysurface. For more\r\n        information, see Rhino help for details on the Contour command\r\n        ","ArgumentDesc":"\r\nobject_id = object identifier\r\npoints_or_plane = either a list/tuple of two points or a plane\r\n  if two points, they define the start and end points of a center line\r\n  if a plane, the plane defines the cutting plane\r\ninterval[opt] = distance beween contour curves.\r\n        ","Returns":"\r\nids of new curves on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSrfContourCrvs in module rhinoscript.surface:\r\n\r\nAddSrfContourCrvs(object_id, points_or_plane, interval=None) |      Adds a spaced series of planar curves resulting from the intersection of\r\n        defined cutting planes through a surface or polysurface. For more\r\n        information, see Rhino help for details on the Contour command\r\n        Parameters:\r\n          object_id = object identifier\r\n          points_or_plane = either a list/tuple of two points or a plane\r\n            if two points, they define the start and end points of a center line\r\n            if a plane, the plane defines the cutting plane\r\n          interval[opt] = distance beween contour curves.\r\n        Returns:\r\n          ids of new curves on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddSrfPt","Arguments":["points"],"Signature":"AddSrfPt (points)","Description":"Creates a new surface from either 3 or 4 corner points.\r\n        ","ArgumentDesc":"\r\n  points = list of either 3 or 4 corner points\r\nReturns\r\n  The identifier of the new object if successful.\r\n  None if not successful, or on error.\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSrfPt in module rhinoscript.surface:\r\n\r\nAddSrfPt(points) |      Creates a new surface from either 3 or 4 corner points.\r\n        Parameters:\r\n          points = list of either 3 or 4 corner points\r\n        Returns\r\n          The identifier of the new object if successful.\r\n          None if not successful, or on error.","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddSweep1","Arguments":["rail","shapes","closed=False"],"Signature":"AddSweep1 (rail, shapes, closed=False)","Description":"Adds a surface created through profile curves that define the surface\r\n        shape and one curve that defines a surface edge.\r\n        ","ArgumentDesc":"\r\nrail = identifier of the rail curve\r\nshapes = one or more cross section shape curves\r\nclosed[opt] = If True, then create a closed surface\r\n        ","Returns":"\r\nList of new surface objects if successful\r\nNone if not successfule, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSweep1 in module rhinoscript.surface:\r\n\r\nAddSweep1(rail, shapes, closed=False) |      Adds a surface created through profile curves that define the surface\r\n        shape and one curve that defines a surface edge.\r\n        Parameters:\r\n          rail = identifier of the rail curve\r\n          shapes = one or more cross section shape curves\r\n          closed[opt] = If True, then create a closed surface\r\n        Returns:\r\n          List of new surface objects if successful\r\n          None if not successfule, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddSweep2","Arguments":["rails","shapes","closed=False"],"Signature":"AddSweep2 (rails, shapes, closed=False)","Description":"Adds a surface created through profile curves that define the surface\r\n        shape and two curves that defines a surface edge.\r\n        ","ArgumentDesc":"\r\nrails = identifiers of the two rail curve\r\nshapes = one or more cross section shape curves\r\nclosed[opt] = If True, then create a closed surface\r\n        ","Returns":"\r\nList of new surface objects if successful\r\nNone if not successfule, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddSweep2 in module rhinoscript.surface:\r\n\r\nAddSweep2(rails, shapes, closed=False) |      Adds a surface created through profile curves that define the surface\r\n        shape and two curves that defines a surface edge.\r\n        Parameters:\r\n          rails = identifiers of the two rail curve\r\n          shapes = one or more cross section shape curves\r\n          closed[opt] = If True, then create a closed surface\r\n        Returns:\r\n          List of new surface objects if successful\r\n          None if not successfule, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"AddTorus","Arguments":["base","major_radius","minor_radius","direction=None"],"Signature":"AddTorus (base, major_radius, minor_radius, direction=None)","Description":"Adds a torus shaped revolved surface to the document\r\n        ","ArgumentDesc":"\r\nbase = 3D origin point of the torus or the base plane of the torus\r\nmajor_radius, minor_radius = the two radii of the torus\r\ndirections[opt] = A point that defines the direction of the torus when base is a point.\r\n  If omitted, a torus that is parallel to the world XY plane is created\r\n        ","Returns":"\r\nThe identifier of the new object if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddTorus in module rhinoscript.surface:\r\n\r\nAddTorus(base, major_radius, minor_radius, direction=None) |      Adds a torus shaped revolved surface to the document\r\n        Parameters:\r\n          base = 3D origin point of the torus or the base plane of the torus\r\n          major_radius, minor_radius = the two radii of the torus\r\n          directions[opt] = A point that defines the direction of the torus when base is a point.\r\n            If omitted, a torus that is parallel to the world XY plane is created\r\n        Returns:\r\n          The identifier of the new object if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"BooleanDifference","Arguments":["input0","input1","delete_input=True"],"Signature":"BooleanDifference (input0, input1, delete_input=True)","Description":"Performs a boolean difference operation on two sets of input surfaces\r\n        and polysurfaces. For more details, see the BooleanDifference command in\r\n        the Rhino help file\r\n        ","ArgumentDesc":"\r\ninput0 = list of surfaces to subtract from\r\ninput1 = list of surfaces to be subtracted\r\ndelete_input[opt] = delete all input objects\r\n        ","Returns":"\r\nlist of identifiers of newly created objects on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BooleanDifference in module rhinoscript.surface:\r\n\r\nBooleanDifference(input0, input1, delete_input=True) |      Performs a boolean difference operation on two sets of input surfaces\r\n        and polysurfaces. For more details, see the BooleanDifference command in\r\n        the Rhino help file\r\n        Parameters:\r\n            input0 = list of surfaces to subtract from\r\n            input1 = list of surfaces to be subtracted\r\n            delete_input[opt] = delete all input objects\r\n        Returns:\r\n            list of identifiers of newly created objects on success\r\n            None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"BooleanIntersection","Arguments":["input0","input1","delete_input=True"],"Signature":"BooleanIntersection (input0, input1, delete_input=True)","Description":"Performs a boolean intersection operation on two sets of input surfaces\r\n        and polysurfaces. For more details, see the BooleanIntersection command in\r\n        the Rhino help file\r\n        ","ArgumentDesc":"\r\ninput0 = list of surfaces\r\ninput1 = list of surfaces\r\ndelete_input[opt] = delete all input objects\r\n        ","Returns":"\r\nlist of identifiers of newly created objects on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BooleanIntersection in module rhinoscript.surface:\r\n\r\nBooleanIntersection(input0, input1, delete_input=True) |      Performs a boolean intersection operation on two sets of input surfaces\r\n        and polysurfaces. For more details, see the BooleanIntersection command in\r\n        the Rhino help file\r\n        Parameters:\r\n            input0 = list of surfaces\r\n            input1 = list of surfaces\r\n            delete_input[opt] = delete all input objects\r\n        Returns:\r\n            list of identifiers of newly created objects on success\r\n            None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"BooleanUnion","Arguments":["input","delete_input=True"],"Signature":"BooleanUnion (input, delete_input=True)","Description":"Performs a boolean union operation on a set of input surfaces and\r\n        polysurfaces. For more details, see the BooleanUnion command in the\r\n        Rhino help file\r\n        ","ArgumentDesc":"\r\ninput = list of surfaces to union\r\ndelete_input[opt] = delete all input objects\r\n        ","Returns":"\r\nlist of identifiers of newly created objects on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BooleanUnion in module rhinoscript.surface:\r\n\r\nBooleanUnion(input, delete_input=True) |      Performs a boolean union operation on a set of input surfaces and\r\n        polysurfaces. For more details, see the BooleanUnion command in the\r\n        Rhino help file\r\n        Parameters:\r\n            input = list of surfaces to union\r\n            delete_input[opt] = delete all input objects\r\n        Returns:\r\n            list of identifiers of newly created objects on success\r\n            None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"BrepClosestPoint","Arguments":["object_id","point"],"Signature":"BrepClosestPoint (object_id, point)","Description":"Returns the point on a surface or polysurface that is closest to a test\r\n        point. This function works on both untrimmed and trimmed surfaces.\r\n        ","ArgumentDesc":"\r\nobject_id = The object's identifier.\r\npoint = The test, or sampling point.\r\n        ","Returns":"\r\nA tuple of closest point information if successful. The list will\r\ncontain the following information:\r\nElement     Type             Description\r\n   0        Point3d          The 3-D point at the parameter value of the \r\n                             closest point.\r\n   1        (U, V)           Parameter values of closest point. Note, V \r\n                             is 0 if the component index type is brep_edge\r\n                             or brep_vertex. \r\n   2        (type, index)    The type and index of the brep component that\r\n                             contains the closest point. Possible types are\r\n                             brep_face, brep_edge or brep_vertex.\r\n   3        Vector3d         The normal to the brep_face, or the tangent\r\n                             to the brep_edge.  \r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BrepClosestPoint in module rhinoscript.surface:\r\n\r\nBrepClosestPoint(object_id, point) |      Returns the point on a surface or polysurface that is closest to a test\r\n        point. This function works on both untrimmed and trimmed surfaces.\r\n        Parameters:\r\n          object_id = The object's identifier.\r\n          point = The test, or sampling point.\r\n        Returns:\r\n          A tuple of closest point information if successful. The list will\r\n          contain the following information:\r\n          Element     Type             Description\r\n             0        Point3d          The 3-D point at the parameter value of the \r\n                                       closest point.\r\n             1        (U, V)           Parameter values of closest point. Note, V \r\n                                       is 0 if the component index type is brep_edge\r\n                                       or brep_vertex. \r\n             2        (type, index)    The type and index of the brep component that\r\n                                       contains the closest point. Possible types are\r\n                                       brep_face, brep_edge or brep_vertex.\r\n             3        Vector3d         The normal to the brep_face, or the tangent\r\n                                       to the brep_edge.  \r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"CapPlanarHoles","Arguments":["surface_id"],"Signature":"CapPlanarHoles (surface_id)","Description":"Caps planar holes in a surface or polysurface\r\n        Returns:\r\n          True or False indicating success or failure\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CapPlanarHoles in module rhinoscript.surface:\r\n\r\nCapPlanarHoles(surface_id) |      Caps planar holes in a surface or polysurface\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ChangeSurfaceDegree","Arguments":["object_id","degree"],"Signature":"ChangeSurfaceDegree (object_id, degree)","Description":"Changes the degree of a surface object.  For more information see the Rhino help file for the ChangeDegree command.\r\n      ","ArgumentDesc":"\r\nobject_id = the object's identifier.\r\ndegree = list, of two integers, specifying the degrees for the U  V directions\r\n      ","Returns":"\r\nTrue of False indicating success or failure.\r\nNone on failure.\r\n      \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ChangeSurfaceDegree in module rhinoscript.surface:\r\n\r\nChangeSurfaceDegree(object_id, degree) |      Changes the degree of a surface object.  For more information see the Rhino help file for the ChangeDegree command.\r\n      Parameters:\r\n        object_id = the object's identifier.\r\n        degree = list, of two integers, specifying the degrees for the U  V directions\r\n      Returns:\r\n        True of False indicating success or failure.\r\n        None on failure.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"DuplicateEdgeCurves","Arguments":["object_id","select=False"],"Signature":"DuplicateEdgeCurves (object_id, select=False)","Description":"Duplicates the edge curves of a surface or polysurface. For more\r\n        information, see the Rhino help file for information on the DupEdge\r\n        command.\r\n        ","ArgumentDesc":"\r\nobject_id = The identifier of the surface or polysurface object.\r\nselect [opt] = Select the duplicated edge curves. The default is not\r\nto select (False).\r\n        ","Returns":"\r\nA list of Guids identifying the newly created curve objects if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DuplicateEdgeCurves in module rhinoscript.surface:\r\n\r\nDuplicateEdgeCurves(object_id, select=False) |      Duplicates the edge curves of a surface or polysurface. For more\r\n        information, see the Rhino help file for information on the DupEdge\r\n        command.\r\n        Parameters:\r\n          object_id = The identifier of the surface or polysurface object.\r\n          select [opt] = Select the duplicated edge curves. The default is not\r\n          to select (False).\r\n        Returns:\r\n          A list of Guids identifying the newly created curve objects if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"DuplicateSurfaceBorder","Arguments":["surface_id","type=0"],"Signature":"DuplicateSurfaceBorder (surface_id, type=0)","Description":"Create curves that duplicate a surface or polysurface border\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface\r\ntype[opt] = the border curves to return (0=both exterior and interior,\r\n    1=exterior, 2=interior\r\n        ","Returns":"\r\nlist of curve ids on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DuplicateSurfaceBorder in module rhinoscript.surface:\r\n\r\nDuplicateSurfaceBorder(surface_id, type=0) |      Create curves that duplicate a surface or polysurface border\r\n        Parameters:\r\n          surface_id = identifier of a surface\r\n          type[opt] = the border curves to return (0=both exterior and interior,\r\n              1=exterior, 2=interior\r\n        Returns:\r\n          list of curve ids on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"EvaluateSurface","Arguments":["surface_id","u","v"],"Signature":"EvaluateSurface (surface_id, u, v)","Description":"Evaluates a surface at a U,V parameter\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EvaluateSurface in module rhinoscript.surface:\r\n\r\nEvaluateSurface(surface_id, u, v) |      Evaluates a surface at a U,V parameter","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExplodePolysurfaces","Arguments":["object_ids","delete_input=False"],"Signature":"ExplodePolysurfaces (object_ids, delete_input=False)","Description":"Explodes, or unjoins, one or more polysurface objects. Polysurfaces\r\n        will be exploded into separate surfaces\r\n        ","ArgumentDesc":"\r\nobject_ids = identifiers of polysurfaces to explode\r\ndelete_input[opt] = delete input objects after exploding\r\n        ","Returns":"\r\nList of identifiers of exploded pieces on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExplodePolysurfaces in module rhinoscript.surface:\r\n\r\nExplodePolysurfaces(object_ids, delete_input=False) |      Explodes, or unjoins, one or more polysurface objects. Polysurfaces\r\n        will be exploded into separate surfaces\r\n        Parameters:\r\n          object_ids = identifiers of polysurfaces to explode\r\n          delete_input[opt] = delete input objects after exploding\r\n        Returns:\r\n          List of identifiers of exploded pieces on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExtendSurface","Arguments":["surface_id","parameter","length","smooth=True"],"Signature":"ExtendSurface (surface_id, parameter, length, smooth=True)","Description":"Lengthens an untrimmed surface object\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface\r\nparameter = tuple of two values definfing the U,V parameter to evaluate.\r\n  The surface edge closest to the U,V parameter will be the edge that is\r\n  extended\r\nlength = amount to extend to surface\r\nsmooth[opt] = If True, the surface is extended smoothly curving from the\r\n  edge. If False, the surface is extended in a straight line from the edge\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtendSurface in module rhinoscript.surface:\r\n\r\nExtendSurface(surface_id, parameter, length, smooth=True) |      Lengthens an untrimmed surface object\r\n        Parameters:\r\n          surface_id = identifier of a surface\r\n          parameter = tuple of two values definfing the U,V parameter to evaluate.\r\n            The surface edge closest to the U,V parameter will be the edge that is\r\n            extended\r\n          length = amount to extend to surface\r\n          smooth[opt] = If True, the surface is extended smoothly curving from the\r\n            edge. If False, the surface is extended in a straight line from the edge\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExtractIsoCurve","Arguments":["surface_id","parameter","direction"],"Signature":"ExtractIsoCurve (surface_id, parameter, direction)","Description":"Extracts isoparametric curves from a surface\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface\r\nparameter = u,v parameter of the surface to evaluate\r\ndirection\r\n  0 = u, 1 = v, 2 = both\r\n        ","Returns":"\r\nlist of curve ids on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtractIsoCurve in module rhinoscript.surface:\r\n\r\nExtractIsoCurve(surface_id, parameter, direction) |      Extracts isoparametric curves from a surface\r\n        Parameters:\r\n          surface_id = identifier of a surface\r\n          parameter = u,v parameter of the surface to evaluate\r\n          direction\r\n            0 = u, 1 = v, 2 = both\r\n        Returns:\r\n          list of curve ids on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExtractSurface","Arguments":["object_id","face_indices","copy=False"],"Signature":"ExtractSurface (object_id, face_indices, copy=False)","Description":"Separates or copies a surface or a copy of a surface from a polysurface\r\n        Paramters:\r\n          object_id: polysurface identifier\r\n          face_indices: one or more numbers representing faces\r\n          copy[opt]: If True the faces are copied. If False, the faces are extracted\r\n        Returns:\r\n          identifiers of extracted surface objects on success\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtractSurface in module rhinoscript.surface:\r\n\r\nExtractSurface(object_id, face_indices, copy=False) |      Separates or copies a surface or a copy of a surface from a polysurface\r\n        Paramters:\r\n          object_id: polysurface identifier\r\n          face_indices: one or more numbers representing faces\r\n          copy[opt]: If True the faces are copied. If False, the faces are extracted\r\n        Returns:\r\n          identifiers of extracted surface objects on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExtrudeCurve","Arguments":["curve_id","path_id"],"Signature":"ExtrudeCurve (curve_id, path_id)","Description":"Creates a surface by extruding a curve along a path\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve to extrude\r\npath_id = identifier of the path curve\r\n        ","Returns":"\r\nidentifier of new surface on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtrudeCurve in module rhinoscript.surface:\r\n\r\nExtrudeCurve(curve_id, path_id) |      Creates a surface by extruding a curve along a path\r\n        Parameters:\r\n          curve_id = identifier of the curve to extrude\r\n          path_id = identifier of the path curve\r\n        Returns:\r\n          identifier of new surface on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExtrudeCurvePoint","Arguments":["curve_id","point"],"Signature":"ExtrudeCurvePoint (curve_id, point)","Description":"Creates a surface by extruding a curve to a point\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve to extrude\r\npoint = 3D point\r\n        ","Returns":"\r\nidentifier of new surface on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtrudeCurvePoint in module rhinoscript.surface:\r\n\r\nExtrudeCurvePoint(curve_id, point) |      Creates a surface by extruding a curve to a point\r\n        Parameters:\r\n          curve_id = identifier of the curve to extrude\r\n          point = 3D point\r\n        Returns:\r\n          identifier of new surface on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExtrudeCurveStraight","Arguments":["curve_id","start_point","end_point"],"Signature":"ExtrudeCurveStraight (curve_id, start_point, end_point)","Description":"Create surface by extruding a curve along two points that define a line\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve to extrude\r\nstart_point, end_point = 3D points\r\n        ","Returns":"\r\nidentifier of new surface on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtrudeCurveStraight in module rhinoscript.surface:\r\n\r\nExtrudeCurveStraight(curve_id, start_point, end_point) |      Create surface by extruding a curve along two points that define a line\r\n        Parameters:\r\n          curve_id = identifier of the curve to extrude\r\n          start_point, end_point = 3D points\r\n        Returns:\r\n          identifier of new surface on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ExtrudeSurface","Arguments":["surface","curve","cap=True"],"Signature":"ExtrudeSurface (surface, curve, cap=True)","Description":"Create surface by extruding along a path curve\r\n        ","ArgumentDesc":"\r\nsurface = identifier of the surface to extrude\r\ncurve = identifier of the path curve\r\ncap[opt] = extrusion is capped at both ends\r\n        ","Returns":"\r\nidentifier of new surface on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ExtrudeSurface in module rhinoscript.surface:\r\n\r\nExtrudeSurface(surface, curve, cap=True) |      Create surface by extruding along a path curve\r\n        Parameters:\r\n          surface = identifier of the surface to extrude\r\n          curve = identifier of the path curve\r\n          cap[opt] = extrusion is capped at both ends\r\n        Returns:\r\n          identifier of new surface on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"FilletSurfaces","Arguments":["surface0","surface1","radius","uvparam0=None","uvparam1=None"],"Signature":"FilletSurfaces (surface0, surface1, radius, uvparam0=None, uvparam1=None)","Description":"Create constant radius rolling ball fillets between two surfaces. Note,\r\n        this function does not trim the original surfaces of the fillets\r\n        ","ArgumentDesc":"\r\nsurface0, surface1 = identifiers of first and second surface\r\nradius = a positive fillet radius\r\nuvparam0[opt] = a u,v surface parameter of surface0 near where the fillet\r\n  is expected to hit the surface\r\nuvparam1[opt] = same as uvparam0, but for surface1\r\n        ","Returns":"\r\nids of surfaces created on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function FilletSurfaces in module rhinoscript.surface:\r\n\r\nFilletSurfaces(surface0, surface1, radius, uvparam0=None, uvparam1=None) |      Create constant radius rolling ball fillets between two surfaces. Note,\r\n        this function does not trim the original surfaces of the fillets\r\n        Parameters:\r\n          surface0, surface1 = identifiers of first and second surface\r\n          radius = a positive fillet radius\r\n          uvparam0[opt] = a u,v surface parameter of surface0 near where the fillet\r\n            is expected to hit the surface\r\n          uvparam1[opt] = same as uvparam0, but for surface1\r\n        Returns:\r\n          ids of surfaces created on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"FlipSurface","Arguments":["surface_id","flip=None"],"Signature":"FlipSurface (surface_id, flip=None)","Description":"Returns or changes the normal direction of a surface. This feature can\r\n        also be found in Rhino's Dir command\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface object\r\nflip[opt] = new normal orientation, either flipped(True) or not flipped (False).\r\n        ","Returns":"\r\nif flipped is not specified, the current normal orientation\r\nif flipped is specified, the previous normal orientation\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function FlipSurface in module rhinoscript.surface:\r\n\r\nFlipSurface(surface_id, flip=None) |      Returns or changes the normal direction of a surface. This feature can\r\n        also be found in Rhino's Dir command\r\n        Parameters:\r\n          surface_id = identifier of a surface object\r\n          flip[opt] = new normal orientation, either flipped(True) or not flipped (False).\r\n        Returns:\r\n          if flipped is not specified, the current normal orientation\r\n          if flipped is specified, the previous normal orientation\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IntersectBreps","Arguments":["brep1","brep2","tolerance=None"],"Signature":"IntersectBreps (brep1, brep2, tolerance=None)","Description":"Intersects a brep object with another brep object. Note, unlike the\r\n        SurfaceSurfaceIntersection function this function works on trimmed surfaces.\r\n        ","ArgumentDesc":"\r\nbrep1 = identifier of first brep object\r\nbrep2 = identifier of second brep object\r\ntolerance = Distance tolerance at segment midpoints. If omitted,\r\n            the current absolute tolerance is used.\r\n        ","Returns":"\r\nList of Guids identifying the newly created intersection curve and\r\npoint objects if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IntersectBreps in module rhinoscript.surface:\r\n\r\nIntersectBreps(brep1, brep2, tolerance=None) |      Intersects a brep object with another brep object. Note, unlike the\r\n        SurfaceSurfaceIntersection function this function works on trimmed surfaces.\r\n        Parameters:\r\n          brep1 = identifier of first brep object\r\n          brep2 = identifier of second brep object\r\n          tolerance = Distance tolerance at segment midpoints. If omitted,\r\n                      the current absolute tolerance is used.\r\n        Returns:\r\n          List of Guids identifying the newly created intersection curve and\r\n          point objects if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IntersectSpheres","Arguments":["sphere_plane0","sphere_radius0","sphere_plane1","sphere_radius1"],"Signature":"IntersectSpheres (sphere_plane0, sphere_radius0, sphere_plane1, sphere_radius1)","Description":"Calculates intersections of two spheres\r\n        ","ArgumentDesc":"\r\nsphere_plane0 = an equatorial plane of the first sphere. The origin of the\r\n  plane will be the center point of the sphere\r\nsphere_radius0 = radius of the first sphere\r\nsphere_plane1 = plane for second sphere\r\nsphere_radius1 = radius for second sphere\r\n        ","Returns":"\r\nList of intersection results\r\n  element 0 = type of intersection (0=point, 1=circle, 2=spheres are identical)\r\n  element 1 = Point of intersection or plane of circle intersection\r\n  element 2 = radius of circle if circle intersection\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IntersectSpheres in module rhinoscript.surface:\r\n\r\nIntersectSpheres(sphere_plane0, sphere_radius0, sphere_plane1, sphere_radius1) |      Calculates intersections of two spheres\r\n        Parameters:\r\n          sphere_plane0 = an equatorial plane of the first sphere. The origin of the\r\n            plane will be the center point of the sphere\r\n          sphere_radius0 = radius of the first sphere\r\n          sphere_plane1 = plane for second sphere\r\n          sphere_radius1 = radius for second sphere\r\n        Returns:\r\n          List of intersection results\r\n            element 0 = type of intersection (0=point, 1=circle, 2=spheres are identical)\r\n            element 1 = Point of intersection or plane of circle intersection\r\n            element 2 = radius of circle if circle intersection\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsBrep","Arguments":["object_id"],"Signature":"IsBrep (object_id)","Description":"Verifies an object is a Brep, or a boundary representation model, object.\r\n        ","ArgumentDesc":"\r\nobject_id = The object's identifier.\r\n        ","Returns":"\r\nTrue if successful, otherwise False.\r\nNone on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsBrep in module rhinoscript.surface:\r\n\r\nIsBrep(object_id) |      Verifies an object is a Brep, or a boundary representation model, object.\r\n        Parameters:\r\n          object_id = The object's identifier.\r\n        Returns:\r\n          True if successful, otherwise False.\r\n          None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsCone","Arguments":["object_id"],"Signature":"IsCone (object_id)","Description":"Determines if a surface is a portion of a cone\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCone in module rhinoscript.surface:\r\n\r\nIsCone(object_id) |      Determines if a surface is a portion of a cone","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsCylinder","Arguments":["object_id"],"Signature":"IsCylinder (object_id)","Description":"Determines if a surface is a portion of a cone\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsCylinder in module rhinoscript.surface:\r\n\r\nIsCylinder(object_id) |      Determines if a surface is a portion of a cone","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsPlaneSurface","Arguments":["object_id"],"Signature":"IsPlaneSurface (object_id)","Description":"Verifies an object is a plane surface. Plane surfaces can be created by\r\n        the Plane command. Note, a plane surface is not a planar NURBS surface\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPlaneSurface in module rhinoscript.surface:\r\n\r\nIsPlaneSurface(object_id) |      Verifies an object is a plane surface. Plane surfaces can be created by\r\n        the Plane command. Note, a plane surface is not a planar NURBS surface","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsPointInSurface","Arguments":["object_id","point","strictly_in=False","tolerance=None"],"Signature":"IsPointInSurface (object_id, point, strictly_in=False, tolerance=None)","Description":"Verifies that a point is inside a closed surface or polysurface\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\npoint: list of three numbers or Point3d. The test, or sampling point\r\nstrictly_in[opt]: If true, the test point must be inside by at least tolerance\r\ntolerance[opt]: distance tolerance used for intersection and determining\r\n  strict inclusion. If omitted, Rhino's internal tolerance is used\r\n        ","Returns":"\r\nTrue if successful, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPointInSurface in module rhinoscript.surface:\r\n\r\nIsPointInSurface(object_id, point, strictly_in=False, tolerance=None) |      Verifies that a point is inside a closed surface or polysurface\r\n        Parameters:\r\n          object_id: the object's identifier\r\n          point: list of three numbers or Point3d. The test, or sampling point\r\n          strictly_in[opt]: If true, the test point must be inside by at least tolerance\r\n          tolerance[opt]: distance tolerance used for intersection and determining\r\n            strict inclusion. If omitted, Rhino's internal tolerance is used\r\n        Returns:\r\n          True if successful, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsPointOnSurface","Arguments":["object_id","point"],"Signature":"IsPointOnSurface (object_id, point)","Description":"Verifies that a point lies on a surface\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\npoint: list of three numbers or Point3d. The test, or sampling point\r\n        ","Returns":"\r\nTrue if successful, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPointOnSurface in module rhinoscript.surface:\r\n\r\nIsPointOnSurface(object_id, point) |      Verifies that a point lies on a surface\r\n        Parameters:\r\n          object_id: the object's identifier\r\n          point: list of three numbers or Point3d. The test, or sampling point\r\n        Returns:\r\n          True if successful, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsPolysurface","Arguments":["object_id"],"Signature":"IsPolysurface (object_id)","Description":"Verifies an object is a polysurface. Polysurfaces consist of two or more\r\n        surfaces joined together. If the polysurface fully encloses a volume, it is\r\n        considered a solid.\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\n        ","Returns":"\r\nTrue is successful, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPolysurface in module rhinoscript.surface:\r\n\r\nIsPolysurface(object_id) |      Verifies an object is a polysurface. Polysurfaces consist of two or more\r\n        surfaces joined together. If the polysurface fully encloses a volume, it is\r\n        considered a solid.\r\n        Parameters:\r\n          object_id: the object's identifier\r\n        Returns:\r\n          True is successful, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsPolysurfaceClosed","Arguments":["object_id"],"Signature":"IsPolysurfaceClosed (object_id)","Description":"Verifies a polysurface object is closed. If the polysurface fully encloses\r\n        a volume, it is considered a solid.\r\n        ","ArgumentDesc":"\r\nobject_id: the object's identifier\r\n        ","Returns":"\r\nTrue is successful, otherwise False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsPolysurfaceClosed in module rhinoscript.surface:\r\n\r\nIsPolysurfaceClosed(object_id) |      Verifies a polysurface object is closed. If the polysurface fully encloses\r\n        a volume, it is considered a solid.\r\n        Parameters:\r\n          object_id: the object's identifier\r\n        Returns:\r\n          True is successful, otherwise False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSphere","Arguments":["object_id"],"Signature":"IsSphere (object_id)","Description":"Determines if a surface is a portion of a sphere\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSphere in module rhinoscript.surface:\r\n\r\nIsSphere(object_id) |      Determines if a surface is a portion of a sphere","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSurface","Arguments":["object_id"],"Signature":"IsSurface (object_id)","Description":"Verifies an object is a surface. Brep objects with only one face are\r\n        also considered surfaces.\r\n        ","ArgumentDesc":"\r\nobject_id = the object's identifier.\r\n        ","Returns":"\r\nTrue if successful, otherwise False.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSurface in module rhinoscript.surface:\r\n\r\nIsSurface(object_id) |      Verifies an object is a surface. Brep objects with only one face are\r\n        also considered surfaces.\r\n        Parameters:\r\n          object_id = the object's identifier.\r\n        Returns:\r\n          True if successful, otherwise False.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSurfaceClosed","Arguments":["surface_id","direction"],"Signature":"IsSurfaceClosed (surface_id, direction)","Description":"Verifies a surface object is closed in the specified direction.  If the\r\n        surface fully encloses a volume, it is considered a solid\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface\r\ndirection = 0=U, 1=V\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSurfaceClosed in module rhinoscript.surface:\r\n\r\nIsSurfaceClosed(surface_id, direction) |      Verifies a surface object is closed in the specified direction.  If the\r\n        surface fully encloses a volume, it is considered a solid\r\n        Parameters:\r\n          surface_id = identifier of a surface\r\n          direction = 0=U, 1=V\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSurfacePeriodic","Arguments":["surface_id","direction"],"Signature":"IsSurfacePeriodic (surface_id, direction)","Description":"Verifies a surface object is periodic in the specified direction.\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface\r\ndirection = 0=U, 1=V\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSurfacePeriodic in module rhinoscript.surface:\r\n\r\nIsSurfacePeriodic(surface_id, direction) |      Verifies a surface object is periodic in the specified direction.\r\n        Parameters:\r\n          surface_id = identifier of a surface\r\n          direction = 0=U, 1=V\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSurfacePlanar","Arguments":["surface_id","tolerance=None"],"Signature":"IsSurfacePlanar (surface_id, tolerance=None)","Description":"Verifies a surface object is planar\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface\r\ntolerance[opt] = tolerance used when checked. If omitted, the current absolute\r\n  tolerance is used\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSurfacePlanar in module rhinoscript.surface:\r\n\r\nIsSurfacePlanar(surface_id, tolerance=None) |      Verifies a surface object is planar\r\n        Parameters:\r\n          surface_id = identifier of a surface\r\n          tolerance[opt] = tolerance used when checked. If omitted, the current absolute\r\n            tolerance is used\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSurfaceRational","Arguments":["surface_id"],"Signature":"IsSurfaceRational (surface_id)","Description":"Verifies a surface object is rational\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSurfaceRational in module rhinoscript.surface:\r\n\r\nIsSurfaceRational(surface_id) |      Verifies a surface object is rational\r\n        Parameters:\r\n          surface_id = the surface's identifier","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSurfaceSingular","Arguments":["surface_id","direction"],"Signature":"IsSurfaceSingular (surface_id, direction)","Description":"Verifies a surface object is singular in the specified direction.\r\n        Surfaces are considered singular if a side collapses to a point.\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\ndirection: 0=south, 1=east, 2=north, 3=west\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSurfaceSingular in module rhinoscript.surface:\r\n\r\nIsSurfaceSingular(surface_id, direction) |      Verifies a surface object is singular in the specified direction.\r\n        Surfaces are considered singular if a side collapses to a point.\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          direction: 0=south, 1=east, 2=north, 3=west\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsSurfaceTrimmed","Arguments":["surface_id"],"Signature":"IsSurfaceTrimmed (surface_id)","Description":"Verifies a surface object has been trimmed\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        ","Returns":"\r\nTrue or False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsSurfaceTrimmed in module rhinoscript.surface:\r\n\r\nIsSurfaceTrimmed(surface_id) |      Verifies a surface object has been trimmed\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          True or False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"IsTorus","Arguments":["surface_id"],"Signature":"IsTorus (surface_id)","Description":"Determines if a surface is a portion of a torus\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsTorus in module rhinoscript.surface:\r\n\r\nIsTorus(surface_id) |      Determines if a surface is a portion of a torus","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"JoinSurfaces","Arguments":["object_ids","delete_input=False"],"Signature":"JoinSurfaces (object_ids, delete_input=False)","Description":"Joins two or more surface or polysurface objects together to form one\r\n        polysurface object\r\n        ","ArgumentDesc":"\r\nobject_ids = list of object identifiers\r\n        ","Returns":"\r\nidentifier of newly created object on success\r\nNone on failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function JoinSurfaces in module rhinoscript.surface:\r\n\r\nJoinSurfaces(object_ids, delete_input=False) |      Joins two or more surface or polysurface objects together to form one\r\n        polysurface object\r\n        Parameters:\r\n          object_ids = list of object identifiers\r\n        Returns:\r\n          identifier of newly created object on success\r\n          None on failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"MakeSurfacePeriodic","Arguments":["surface_id","direction","delete_input=False"],"Signature":"MakeSurfacePeriodic (surface_id, direction, delete_input=False)","Description":"Makes an existing surface a periodic NURBS surface\r\n        Paramters:\r\n          surface_id = the surface's identifier\r\n          direction = The direction to make periodic, either 0=U or 1=V\r\n          delete_input[opt] = delete the input surface\r\n        Returns:\r\n          if delete_input is False, identifier of the new surface\r\n          if delete_input is True, identifer of the modifier surface\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MakeSurfacePeriodic in module rhinoscript.surface:\r\n\r\nMakeSurfacePeriodic(surface_id, direction, delete_input=False) |      Makes an existing surface a periodic NURBS surface\r\n        Paramters:\r\n          surface_id = the surface's identifier\r\n          direction = The direction to make periodic, either 0=U or 1=V\r\n          delete_input[opt] = delete the input surface\r\n        Returns:\r\n          if delete_input is False, identifier of the new surface\r\n          if delete_input is True, identifer of the modifier surface\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"OffsetSurface","Arguments":["surface_id","distance","tolerance=None","both_sides=False","create_solid=False"],"Signature":"OffsetSurface (surface_id, distance, tolerance=None, both_sides=False, create_solid=False)","Description":"Offsets a trimmed or untrimmed surface by a distance. The offset surface\r\n        will be added to Rhino.\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\ndistance = the distance to offset\r\ntolerance [opt] = The offset tolerance. Use 0.0 to make a loose offset. Otherwise, the\r\n  document's absolute tolerance is usually sufficient.\r\nboth_sides [opt] = Offset to both sides of the input surface\r\ncreate_solid [opt] = Make a solid object\r\n        ","Returns":"\r\nidentifier of the new object if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OffsetSurface in module rhinoscript.surface:\r\n\r\nOffsetSurface(surface_id, distance, tolerance=None, both_sides=False, create_solid=False) |      Offsets a trimmed or untrimmed surface by a distance. The offset surface\r\n        will be added to Rhino.\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          distance = the distance to offset\r\n          tolerance [opt] = The offset tolerance. Use 0.0 to make a loose offset. Otherwise, the\r\n            document's absolute tolerance is usually sufficient.\r\n          both_sides [opt] = Offset to both sides of the input surface\r\n          create_solid [opt] = Make a solid object\r\n        Returns:\r\n          identifier of the new object if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"PullCurve","Arguments":["surface","curve","delete_input=False"],"Signature":"PullCurve (surface, curve, delete_input=False)","Description":"Pulls a curve object to a surface object\r\n        ","ArgumentDesc":"\r\nsurface = the surface's identifier\r\ncurve = the curve's identifier\r\ndelete_input[opt] = should the input items be deleted\r\n        ","Returns":"\r\nlist of new curves if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PullCurve in module rhinoscript.surface:\r\n\r\nPullCurve(surface, curve, delete_input=False) |      Pulls a curve object to a surface object\r\n        Parameters:\r\n          surface = the surface's identifier\r\n          curve = the curve's identifier\r\n          delete_input[opt] = should the input items be deleted\r\n        Returns:\r\n          list of new curves if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ReverseSurface","Arguments":["surface_id","direction"],"Signature":"ReverseSurface (surface_id, direction)","Description":"Reverses U or V directions of a surface, or swaps (transposes) U and V\r\n        directions.\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface object\r\ndirection\r\n  1 = reverse U, 2 = reverse V, 4 = transpose U and V (values can be combined)\r\n        ","Returns":"\r\nBoolean indicating success or failure\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ReverseSurface in module rhinoscript.surface:\r\n\r\nReverseSurface(surface_id, direction) |      Reverses U or V directions of a surface, or swaps (transposes) U and V\r\n        directions.\r\n        Parameters:\r\n          surface_id = identifier of a surface object\r\n          direction\r\n            1 = reverse U, 2 = reverse V, 4 = transpose U and V (values can be combined)\r\n        Returns:\r\n          Boolean indicating success or failure\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ShootRay","Arguments":["surface_ids","start_point","direction","reflections=10"],"Signature":"ShootRay (surface_ids, start_point, direction, reflections=10)","Description":"Shoots a ray at a collection of surfaces\r\n        ","ArgumentDesc":"\r\nsurface_ids = one of more surface identifiers\r\nstart_point = starting point of the ray\r\ndirection = vector identifying the direction of the ray\r\nreflections[opt] = the maximum number of times the ray will be reflected\r\n        ","Returns":"\r\nlist of reflection points on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShootRay in module rhinoscript.surface:\r\n\r\nShootRay(surface_ids, start_point, direction, reflections=10) |      Shoots a ray at a collection of surfaces\r\n        Parameters:\r\n          surface_ids = one of more surface identifiers\r\n          start_point = starting point of the ray\r\n          direction = vector identifying the direction of the ray\r\n          reflections[opt] = the maximum number of times the ray will be reflected\r\n        Returns:\r\n          list of reflection points on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ShortPath","Arguments":["surface_id","start_point","end_point"],"Signature":"ShortPath (surface_id, start_point, end_point)","Description":"Creates the shortest possible curve(geodesic) between two points on a\r\n        surface. For more details, see the ShortPath command in Rhino help\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface\r\nstart_point, end_point = start/end points of the short curve\r\n        ","Returns":"\r\nidentifier of the new surface on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShortPath in module rhinoscript.surface:\r\n\r\nShortPath(surface_id, start_point, end_point) |      Creates the shortest possible curve(geodesic) between two points on a\r\n        surface. For more details, see the ShortPath command in Rhino help\r\n        Parameters:\r\n          surface_id = identifier of a surface\r\n          start_point, end_point = start/end points of the short curve\r\n        Returns:\r\n          identifier of the new surface on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"ShrinkTrimmedSurface","Arguments":["object_id","create_copy=False"],"Signature":"ShrinkTrimmedSurface (object_id, create_copy=False)","Description":"Shrinks the underlying untrimmed surfaces near to the trimming\r\n        boundaries. See the ShrinkTrimmedSrf command in the Rhino help.\r\n        ","ArgumentDesc":"\r\nobject_id = the surface's identifier\r\ncreate_copy[opt] = If True, the original surface is not deleted\r\n        ","Returns":"\r\nIf create_copy is False, True or False indifating success or failure\r\nIf create_copy is True, the identifier of the new surface\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShrinkTrimmedSurface in module rhinoscript.surface:\r\n\r\nShrinkTrimmedSurface(object_id, create_copy=False) |      Shrinks the underlying untrimmed surfaces near to the trimming\r\n        boundaries. See the ShrinkTrimmedSrf command in the Rhino help.\r\n        Parameters:\r\n          object_id = the surface's identifier\r\n          create_copy[opt] = If True, the original surface is not deleted\r\n        Returns:\r\n          If create_copy is False, True or False indifating success or failure\r\n          If create_copy is True, the identifier of the new surface\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SplitBrep","Arguments":["brep_id","cutter_id","delete_input=False"],"Signature":"SplitBrep (brep_id, cutter_id, delete_input=False)","Description":"Splits a brep\r\n        ","ArgumentDesc":"\r\nbrep = identifier of the brep to split\r\ncutter = identifier of the brep to split with\r\n        ","Returns":"\r\nidentifiers of split pieces on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SplitBrep in module rhinoscript.surface:\r\n\r\nSplitBrep(brep_id, cutter_id, delete_input=False) |      Splits a brep\r\n        Parameters:\r\n          brep = identifier of the brep to split\r\n          cutter = identifier of the brep to split with\r\n        Returns:\r\n          identifiers of split pieces on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceArea","Arguments":["object_id"],"Signature":"SurfaceArea (object_id)","Description":"Calculate the area of a surface or polysurface object. The results are\r\n        based on the current drawing units\r\n        ","ArgumentDesc":"\r\nobject_id = the surface's identifier\r\n        ","Returns":"\r\nlist of area information on success (area, absolute error bound)\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceArea in module rhinoscript.surface:\r\n\r\nSurfaceArea(object_id) |      Calculate the area of a surface or polysurface object. The results are\r\n        based on the current drawing units\r\n        Parameters:\r\n          object_id = the surface's identifier\r\n        Returns:\r\n          list of area information on success (area, absolute error bound)\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceAreaCentroid","Arguments":["object_id"],"Signature":"SurfaceAreaCentroid (object_id)","Description":"Calculates the area centroid of a surface or polysurface\r\n        ","ArgumentDesc":"\r\nobject_id = the surface's identifier\r\n        ","Returns":"\r\n(Area Centriod, Error bound) on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceAreaCentroid in module rhinoscript.surface:\r\n\r\nSurfaceAreaCentroid(object_id) |      Calculates the area centroid of a surface or polysurface\r\n        Parameters:\r\n          object_id = the surface's identifier\r\n        Returns:\r\n          (Area Centriod, Error bound) on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceAreaMoments","Arguments":["surface_id"],"Signature":"SurfaceAreaMoments (surface_id)","Description":"Calculates area moments of inertia of a surface or polysurface object.\r\n        See the Rhino help for \"Mass Properties calculation details\"\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        ","Returns":"\r\nlist of moments and error bounds - see help topic\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceAreaMoments in module rhinoscript.surface:\r\n\r\nSurfaceAreaMoments(surface_id) |      Calculates area moments of inertia of a surface or polysurface object.\r\n        See the Rhino help for \"Mass Properties calculation details\"\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          list of moments and error bounds - see help topic\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceClosestPoint","Arguments":["surface_id","test_point"],"Signature":"SurfaceClosestPoint (surface_id, test_point)","Description":"Returns U,V parameters of point on a surface that is closest to a test point\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of a surface object\r\ntest_point = sampling point\r\n        ","Returns":"\r\nThe U,V parameters of the closest point on the surface if successful.\r\nNone on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceClosestPoint in module rhinoscript.surface:\r\n\r\nSurfaceClosestPoint(surface_id, test_point) |      Returns U,V parameters of point on a surface that is closest to a test point\r\n        Parameters:\r\n          surface_id = identifier of a surface object\r\n          test_point = sampling point\r\n        Returns:\r\n          The U,V parameters of the closest point on the surface if successful.\r\n          None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceCone","Arguments":["surface_id"],"Signature":"SurfaceCone (surface_id)","Description":"Returns the definition of a surface cone\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        ","Returns":"\r\ntuple containing the definition of the cone if successful\r\n  element 0 = the plane of the cone. The apex of the cone is at the\r\n      plane's origin and the axis of the cone is the plane's z-axis\r\n  element 1 = the height of the cone\r\n  element 2 = the radius of the cone\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceCone in module rhinoscript.surface:\r\n\r\nSurfaceCone(surface_id) |      Returns the definition of a surface cone\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          tuple containing the definition of the cone if successful\r\n            element 0 = the plane of the cone. The apex of the cone is at the\r\n                plane's origin and the axis of the cone is the plane's z-axis\r\n            element 1 = the height of the cone\r\n            element 2 = the radius of the cone\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceCurvature","Arguments":["surface_id","parameter"],"Signature":"SurfaceCurvature (surface_id, parameter)","Description":"Returns the curvature of a surface at a U,V parameter. See Rhino help\r\n        for details of surface curvature\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nparameter = u,v parameter\r\n        ","Returns":"\r\ntuple of curvature information\r\n  element 0 = point at specified U,V parameter\r\n  element 1 = normal direction\r\n  element 2 = maximum principal curvature\r\n  element 3 = maximum principal curvature direction\r\n  element 4 = minimum principal curvature\r\n  element 5 = minimum principal curvature direction\r\n  element 6 = gaussian curvature\r\n  element 7 = mean curvature\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceCurvature in module rhinoscript.surface:\r\n\r\nSurfaceCurvature(surface_id, parameter) |      Returns the curvature of a surface at a U,V parameter. See Rhino help\r\n        for details of surface curvature\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          parameter = u,v parameter\r\n        Returns:\r\n          tuple of curvature information\r\n            element 0 = point at specified U,V parameter\r\n            element 1 = normal direction\r\n            element 2 = maximum principal curvature\r\n            element 3 = maximum principal curvature direction\r\n            element 4 = minimum principal curvature\r\n            element 5 = minimum principal curvature direction\r\n            element 6 = gaussian curvature\r\n            element 7 = mean curvature\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceCylinder","Arguments":["surface_id"],"Signature":"SurfaceCylinder (surface_id)","Description":"Returns the definition of a cylinder surface\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        ","Returns":"\r\ntuple of the cylinder plane, height, radius on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceCylinder in module rhinoscript.surface:\r\n\r\nSurfaceCylinder(surface_id) |      Returns the definition of a cylinder surface\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          tuple of the cylinder plane, height, radius on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceDegree","Arguments":["surface_id","direction=2"],"Signature":"SurfaceDegree (surface_id, direction=2)","Description":"Returns the degree of a surface object in the specified direction\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\ndirection[opt]\r\n  0 = U, 1 = v, 2 = both\r\n        ","Returns":"\r\nTuple of two values if direction = 2\r\nSingle number if direction = 0 or 1\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceDegree in module rhinoscript.surface:\r\n\r\nSurfaceDegree(surface_id, direction=2) |      Returns the degree of a surface object in the specified direction\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          direction[opt]\r\n            0 = U, 1 = v, 2 = both\r\n        Returns:\r\n          Tuple of two values if direction = 2\r\n          Single number if direction = 0 or 1\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceDomain","Arguments":["surface_id","direction"],"Signature":"SurfaceDomain (surface_id, direction)","Description":"Returns the domain of a surface object in the specified direction.\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\ndirection = either 0 = U, or 1 = V\r\n        ","Returns":"\r\nlist containing the domain interval in the specified direction\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceDomain in module rhinoscript.surface:\r\n\r\nSurfaceDomain(surface_id, direction) |      Returns the domain of a surface object in the specified direction.\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          direction = either 0 = U, or 1 = V\r\n        Returns:\r\n          list containing the domain interval in the specified direction\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceEditPoints","Arguments":["surface_id","return_parameters=False","return_all=True"],"Signature":"SurfaceEditPoints (surface_id, return_parameters=False, return_all=True)","Description":"Returns the edit, or Greville points of a surface object. For each\r\n        surface control point, there is a corresponding edit point\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nreturn_parameters[opt] = If False, edit points are returned as a list of\r\n  3D points. If True, edit points are returned as a list of U,V surface\r\n  parameters\r\nreturn_all[opt] = If True, all surface edit points are returned. If False,\r\n  the function will return surface edit points based on whether or not the\r\n  surface is closed or periodic\r\n        ","Returns":"\r\nif return_parameters is False, a list of 3D points\r\nif return_parameters is True, a list of U,V parameters\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceEditPoints in module rhinoscript.surface:\r\n\r\nSurfaceEditPoints(surface_id, return_parameters=False, return_all=True) |      Returns the edit, or Greville points of a surface object. For each\r\n        surface control point, there is a corresponding edit point\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          return_parameters[opt] = If False, edit points are returned as a list of\r\n            3D points. If True, edit points are returned as a list of U,V surface\r\n            parameters\r\n          return_all[opt] = If True, all surface edit points are returned. If False,\r\n            the function will return surface edit points based on whether or not the\r\n            surface is closed or periodic\r\n        Returns:\r\n          if return_parameters is False, a list of 3D points\r\n          if return_parameters is True, a list of U,V parameters\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceEvaluate","Arguments":["surface_id","parameter","derivative"],"Signature":"SurfaceEvaluate (surface_id, parameter, derivative)","Description":"A general purpose surface evaluator\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nparameter = u,v parameter to evaluate\r\nderivative = number of derivatives to evaluate\r\n        ","Returns":"\r\nlist of derivatives on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceEvaluate in module rhinoscript.surface:\r\n\r\nSurfaceEvaluate(surface_id, parameter, derivative) |      A general purpose surface evaluator\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          parameter = u,v parameter to evaluate\r\n          derivative = number of derivatives to evaluate\r\n        Returns:\r\n          list of derivatives on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceFrame","Arguments":["surface_id","uv_parameter"],"Signature":"SurfaceFrame (surface_id, uv_parameter)","Description":"Returns a plane based on the normal, u, and v directions at a surface\r\n        U,V parameter\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nuv_parameter = u,v parameter to evaluate\r\n        ","Returns":"\r\nplane on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceFrame in module rhinoscript.surface:\r\n\r\nSurfaceFrame(surface_id, uv_parameter) |      Returns a plane based on the normal, u, and v directions at a surface\r\n        U,V parameter\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          uv_parameter = u,v parameter to evaluate\r\n        Returns:\r\n          plane on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceIsocurveDensity","Arguments":["surface_id","density=None"],"Signature":"SurfaceIsocurveDensity (surface_id, density=None)","Description":"Returns or sets the isocurve density of a surface or polysurface object.\r\n        An isoparametric curve is a curve of constant U or V value on a surface.\r\n        Rhino uses isocurves and surface edge curves to visualize the shape of a\r\n        NURBS surface\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\ndensity[opt] = the isocurve wireframe density. The possible values are\r\n    -1: Hides the surface isocurves\r\n     0: Display boundary and knot wires\r\n     1: Display boundary and knot wires and one interior wire if there\r\n        are no interior knots\r\n   >=2: Display boundary and knot wires and (N+1) interior wires\r\n        ","Returns":"\r\nIf density is not specified, then the current isocurve density if successful\r\nIf density is specified, the the previous isocurve density if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceIsocurveDensity in module rhinoscript.surface:\r\n\r\nSurfaceIsocurveDensity(surface_id, density=None) |      Returns or sets the isocurve density of a surface or polysurface object.\r\n        An isoparametric curve is a curve of constant U or V value on a surface.\r\n        Rhino uses isocurves and surface edge curves to visualize the shape of a\r\n        NURBS surface\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          density[opt] = the isocurve wireframe density. The possible values are\r\n              -1: Hides the surface isocurves\r\n               0: Display boundary and knot wires\r\n               1: Display boundary and knot wires and one interior wire if there\r\n                  are no interior knots\r\n             >=2: Display boundary and knot wires and (N+1) interior wires\r\n        Returns:\r\n          If density is not specified, then the current isocurve density if successful\r\n          If density is specified, the the previous isocurve density if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceKnotCount","Arguments":["surface_id"],"Signature":"SurfaceKnotCount (surface_id)","Description":"Returns the control point count of a surface\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          (U count, V count) on success\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceKnotCount in module rhinoscript.surface:\r\n\r\nSurfaceKnotCount(surface_id) |      Returns the control point count of a surface\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          (U count, V count) on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceKnots","Arguments":["surface_id"],"Signature":"SurfaceKnots (surface_id)","Description":"Returns the knots, or knot vector, of a surface object.\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        ","Returns":"\r\nThe list of knot values of the surface if successful. The list will\r\ncontain the following information:\r\nElement     Description\r\n  0         Knot vector in U direction\r\n  1         Knot vector in V direction\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceKnots in module rhinoscript.surface:\r\n\r\nSurfaceKnots(surface_id) |      Returns the knots, or knot vector, of a surface object.\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          The list of knot values of the surface if successful. The list will\r\n          contain the following information:\r\n          Element     Description\r\n            0         Knot vector in U direction\r\n            1         Knot vector in V direction\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceNormal","Arguments":["surface_id","uv_parameter"],"Signature":"SurfaceNormal (surface_id, uv_parameter)","Description":"Returns 3D vector that is the normal to a surface at a parameter\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nuv_parameter = the uv parameter to evaluate\r\n        ","Returns":"\r\nNormal vector on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceNormal in module rhinoscript.surface:\r\n\r\nSurfaceNormal(surface_id, uv_parameter) |      Returns 3D vector that is the normal to a surface at a parameter\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          uv_parameter = the uv parameter to evaluate\r\n        Returns:\r\n          Normal vector on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceNormalizedParameter","Arguments":["surface_id","parameter"],"Signature":"SurfaceNormalizedParameter (surface_id, parameter)","Description":"Converts surface parameter to a normalized surface parameter; one that\r\n        ranges between 0.0 and 1.0 in both the U and V directions\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nparameter = the surface parameter to convert\r\n        ","Returns":"\r\nnormalized surface parameter if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceNormalizedParameter in module rhinoscript.surface:\r\n\r\nSurfaceNormalizedParameter(surface_id, parameter) |      Converts surface parameter to a normalized surface parameter; one that\r\n        ranges between 0.0 and 1.0 in both the U and V directions\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          parameter = the surface parameter to convert\r\n        Returns:\r\n          normalized surface parameter if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceParameter","Arguments":["surface_id","parameter"],"Signature":"SurfaceParameter (surface_id, parameter)","Description":"Converts normalized surface parameter to a surface parameter; or\r\n        within the surface's domain\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nparameter = the normalized parameter to convert\r\n        ","Returns":"\r\nsurface parameter as tuple on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceParameter in module rhinoscript.surface:\r\n\r\nSurfaceParameter(surface_id, parameter) |      Converts normalized surface parameter to a surface parameter; or\r\n        within the surface's domain\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          parameter = the normalized parameter to convert\r\n        Returns:\r\n          surface parameter as tuple on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfacePointCount","Arguments":["surface_id"],"Signature":"SurfacePointCount (surface_id)","Description":"Returns the control point count of a surface\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          (U count, V count) on success\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfacePointCount in module rhinoscript.surface:\r\n\r\nSurfacePointCount(surface_id) |      Returns the control point count of a surface\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          (U count, V count) on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfacePoints","Arguments":["surface_id","return_all=True"],"Signature":"SurfacePoints (surface_id, return_all=True)","Description":"Returns the control points, or control vertices, of a surface object\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nreturn_all[opt] = If True all surface edit points are returned. If False,\r\n  the function will return surface edit points based on whether or not\r\n  the surface is closed or periodic\r\n        ","Returns":"\r\nthe control points if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfacePoints in module rhinoscript.surface:\r\n\r\nSurfacePoints(surface_id, return_all=True) |      Returns the control points, or control vertices, of a surface object\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          return_all[opt] = If True all surface edit points are returned. If False,\r\n            the function will return surface edit points based on whether or not\r\n            the surface is closed or periodic\r\n        Returns:\r\n          the control points if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceTorus","Arguments":["surface_id"],"Signature":"SurfaceTorus (surface_id)","Description":"Returns the definition of a surface torus\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        ","Returns":"\r\ntuple containing the definition of the torus if successful\r\n  element 0 = the base plane of the torus\r\n  element 1 = the major radius of the torus\r\n  element 2 = the minor radius of the torus\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceTorus in module rhinoscript.surface:\r\n\r\nSurfaceTorus(surface_id) |      Returns the definition of a surface torus\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          tuple containing the definition of the torus if successful\r\n            element 0 = the base plane of the torus\r\n            element 1 = the major radius of the torus\r\n            element 2 = the minor radius of the torus\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceVolume","Arguments":["object_id"],"Signature":"SurfaceVolume (object_id)","Description":"Calculates volume of a closed surface or polysurface\r\n        ","ArgumentDesc":"\r\nobject_id = the surface's identifier\r\n        ","Returns":"\r\n(Volume, Error bound) on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceVolume in module rhinoscript.surface:\r\n\r\nSurfaceVolume(object_id) |      Calculates volume of a closed surface or polysurface\r\n        Parameters:\r\n          object_id = the surface's identifier\r\n        Returns:\r\n          (Volume, Error bound) on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceVolumeCentroid","Arguments":["object_id"],"Signature":"SurfaceVolumeCentroid (object_id)","Description":"Calculates volume centroid of a closed surface or polysurface\r\n        ","ArgumentDesc":"\r\nobject_id = the surface's identifier\r\n        ","Returns":"\r\n(Volume Centriod, Error bound) on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceVolumeCentroid in module rhinoscript.surface:\r\n\r\nSurfaceVolumeCentroid(object_id) |      Calculates volume centroid of a closed surface or polysurface\r\n        Parameters:\r\n          object_id = the surface's identifier\r\n        Returns:\r\n          (Volume Centriod, Error bound) on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceVolumeMoments","Arguments":["surface_id"],"Signature":"SurfaceVolumeMoments (surface_id)","Description":"Calculates volume moments of inertia of a surface or polysurface object.\r\n        For more information, see Rhino help for \"Mass Properties calculation details\"\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\n        ","Returns":"\r\nlist of moments and error bounds - see help topic\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceVolumeMoments in module rhinoscript.surface:\r\n\r\nSurfaceVolumeMoments(surface_id) |      Calculates volume moments of inertia of a surface or polysurface object.\r\n        For more information, see Rhino help for \"Mass Properties calculation details\"\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n        Returns:\r\n          list of moments and error bounds - see help topic\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"SurfaceWeights","Arguments":["object_id"],"Signature":"SurfaceWeights (object_id)","Description":"Returns list of weight values assigned to the control points of a surface.\r\n        The number of weights returned will be equal to the number of control points\r\n        in the U and V directions.\r\n        ","ArgumentDesc":"\r\nobject_id = the surface's identifier\r\n        ","Returns":"\r\nlist of weights\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SurfaceWeights in module rhinoscript.surface:\r\n\r\nSurfaceWeights(object_id) |      Returns list of weight values assigned to the control points of a surface.\r\n        The number of weights returned will be equal to the number of control points\r\n        in the U and V directions.\r\n        Parameters:\r\n          object_id = the surface's identifier\r\n        Returns:\r\n          list of weights\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"TrimBrep","Arguments":["object_id","cutter","tolerance=None"],"Signature":"TrimBrep (object_id, cutter, tolerance=None)","Description":"Trims a surface using an oriented cutter\r\n        ","ArgumentDesc":"\r\nobject_id = surface or polysurface identifier\r\ncutter = surface, polysurface, or plane performing the trim\r\ntolerance[opt] = trimming tolerance. If omitted, the document's absolute\r\n  tolerance is used\r\n        ","Returns":"\r\nidentifiers of retained components on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TrimBrep in module rhinoscript.surface:\r\n\r\nTrimBrep(object_id, cutter, tolerance=None) |      Trims a surface using an oriented cutter\r\n        Parameters:\r\n          object_id = surface or polysurface identifier\r\n          cutter = surface, polysurface, or plane performing the trim\r\n          tolerance[opt] = trimming tolerance. If omitted, the document's absolute\r\n            tolerance is used\r\n        Returns:\r\n          identifiers of retained components on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"TrimSurface","Arguments":["surface_id","direction","interval","delete_input=False"],"Signature":"TrimSurface (surface_id, direction, interval, delete_input=False)","Description":"Remove portions of the surface outside of the specified interval\r\n        ","ArgumentDesc":"\r\nsurface_id = surface identifier\r\ndirection = 0(U), 1(V), or 2(U and V)\r\ninterval = interval of the surface to keep.\r\n  If both U and V then a list or tuple of 2 intervals\r\ndelete_input [opt] = should the input surface be deleted\r\n        ","Returns":"\r\nnew surface identifier on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TrimSurface in module rhinoscript.surface:\r\n\r\nTrimSurface(surface_id, direction, interval, delete_input=False) |      Remove portions of the surface outside of the specified interval\r\n        Parameters:\r\n          surface_id = surface identifier\r\n          direction = 0(U), 1(V), or 2(U and V)\r\n          interval = interval of the surface to keep.\r\n            If both U and V then a list or tuple of 2 intervals\r\n          delete_input [opt] = should the input surface be deleted\r\n        Returns:\r\n          new surface identifier on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"surface","Name":"UnrollSurface","Arguments":["surface_id","explode=False","following_geometry=None","absolute_tolerance=None","relative_tolerance=None"],"Signature":"UnrollSurface (surface_id, explode=False, following_geometry=None, absolute_tolerance=None, relative_tolerance=None)","Description":"Flattens a developable surface or polysurface\r\n        ","ArgumentDesc":"\r\nsurface_id = the surface's identifier\r\nexplode[opt] = If True, the resulting surfaces ar not joined\r\nfollowing_geometry[opt] = List of curves, dots, and points which\r\n  should be unrolled with the surface\r\n        ","Returns":"\r\nList of unrolled surface ids\r\nif following_geometry is not None, a tuple where item 1\r\n  is the list of unrolled surface ids and item 2 is the\r\n  list of unrolled following geometry\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function UnrollSurface in module rhinoscript.surface:\r\n\r\nUnrollSurface(surface_id, explode=False, following_geometry=None, absolute_tolerance=None, relative_tolerance=None) |      Flattens a developable surface or polysurface\r\n        Parameters:\r\n          surface_id = the surface's identifier\r\n          explode[opt] = If True, the resulting surfaces ar not joined\r\n          following_geometry[opt] = List of curves, dots, and points which\r\n            should be unrolled with the surface\r\n        Returns:\r\n          List of unrolled surface ids\r\n          if following_geometry is not None, a tuple where item 1\r\n            is the list of unrolled surface ids and item 2 is the\r\n            list of unrolled following geometry","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"toolbar","functions":[{"ModuleName":"toolbar","Name":"CloseToolbarCollection","Arguments":["name","prompt=False"],"Signature":"CloseToolbarCollection (name, prompt=False)","Description":"Closes a currently open toolbar collection\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar collection\r\nprompt[opt] = if True, user will be prompted to save the collection file\r\n  if it has been modified prior to closing\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CloseToolbarCollection in module rhinoscript.toolbar:\r\n\r\nCloseToolbarCollection(name, prompt=False) |      Closes a currently open toolbar collection\r\n        Parameters:\r\n          name = name of a currently open toolbar collection\r\n          prompt[opt] = if True, user will be prompted to save the collection file\r\n            if it has been modified prior to closing\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"HideToolbar","Arguments":["name","toolbar_group"],"Signature":"HideToolbar (name, toolbar_group)","Description":"Hides a previously visible toolbar group in an open toolbar collection\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar file\r\ntoolbar_group = name of a toolbar group to hide\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function HideToolbar in module rhinoscript.toolbar:\r\n\r\nHideToolbar(name, toolbar_group) |      Hides a previously visible toolbar group in an open toolbar collection\r\n        Parameters:\r\n          name = name of a currently open toolbar file\r\n          toolbar_group = name of a toolbar group to hide\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"IsToolbar","Arguments":["name","toolbar","group=False"],"Signature":"IsToolbar (name, toolbar, group=False)","Description":"Verifies a toolbar (or toolbar group) exists in an open collection file\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar file\r\ntoolbar = name of a toolbar group\r\ngroup[opt] = if toolbar parameter is refering to a toolbar group\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsToolbar in module rhinoscript.toolbar:\r\n\r\nIsToolbar(name, toolbar, group=False) |      Verifies a toolbar (or toolbar group) exists in an open collection file\r\n        Parameters:\r\n          name = name of a currently open toolbar file\r\n          toolbar = name of a toolbar group\r\n          group[opt] = if toolbar parameter is refering to a toolbar group\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"IsToolbarCollection","Arguments":["file"],"Signature":"IsToolbarCollection (file)","Description":"Verifies that a toolbar collection is open\r\n        ","ArgumentDesc":"\r\nfile = full path to a toolbar collection file\r\n        ","Returns":"\r\nRhino-assigned name of the toolbar collection if successful\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsToolbarCollection in module rhinoscript.toolbar:\r\n\r\nIsToolbarCollection(file) |      Verifies that a toolbar collection is open\r\n        Parameters:\r\n          file = full path to a toolbar collection file\r\n        Returns:\r\n          Rhino-assigned name of the toolbar collection if successful\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"IsToolbarDocked","Arguments":["name","toolbar_group"],"Signature":"IsToolbarDocked (name, toolbar_group)","Description":"Verifies that a toolbar group in an open toolbar collection is visible\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar file\r\ntoolbar_group = name of a toolbar group\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsToolbarDocked in module rhinoscript.toolbar:\r\n\r\nIsToolbarDocked(name, toolbar_group) |      Verifies that a toolbar group in an open toolbar collection is visible\r\n        Parameters:\r\n          name = name of a currently open toolbar file\r\n          toolbar_group = name of a toolbar group\r\n        Returns:\r\n          True or False indicating success or failure\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"IsToolbarVisible","Arguments":["name","toolbar_group"],"Signature":"IsToolbarVisible (name, toolbar_group)","Description":"Verifies that a toolbar group in an open toolbar collection is visible\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar file\r\ntoolbar_group = name of a toolbar group\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsToolbarVisible in module rhinoscript.toolbar:\r\n\r\nIsToolbarVisible(name, toolbar_group) |      Verifies that a toolbar group in an open toolbar collection is visible\r\n        Parameters:\r\n          name = name of a currently open toolbar file\r\n          toolbar_group = name of a toolbar group\r\n        Returns:\r\n          True or False indicating success or failure\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"OpenToolbarCollection","Arguments":["file"],"Signature":"OpenToolbarCollection (file)","Description":"Opens a toolbar collection file\r\n        ","ArgumentDesc":"\r\nfile = full path to the collection file\r\n        ","Returns":"\r\nRhino-assigned name of the toolbar collection if successful\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OpenToolbarCollection in module rhinoscript.toolbar:\r\n\r\nOpenToolbarCollection(file) |      Opens a toolbar collection file\r\n        Parameters:\r\n          file = full path to the collection file\r\n        Returns:\r\n          Rhino-assigned name of the toolbar collection if successful\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"SaveToolbarCollection","Arguments":["name"],"Signature":"SaveToolbarCollection (name)","Description":"Saves an open toolbar collection to disk\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar file\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SaveToolbarCollection in module rhinoscript.toolbar:\r\n\r\nSaveToolbarCollection(name) |      Saves an open toolbar collection to disk\r\n        Parameters:\r\n          name = name of a currently open toolbar file\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"SaveToolbarCollectionAs","Arguments":["name","file"],"Signature":"SaveToolbarCollectionAs (name, file)","Description":"Saves an open toolbar collection to a different disk file\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar file\r\nfile = full path to file name to save to\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SaveToolbarCollectionAs in module rhinoscript.toolbar:\r\n\r\nSaveToolbarCollectionAs(name, file) |      Saves an open toolbar collection to a different disk file\r\n        Parameters:\r\n          name = name of a currently open toolbar file\r\n          file = full path to file name to save to\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"ShowToolbar","Arguments":["name","toolbar_group"],"Signature":"ShowToolbar (name, toolbar_group)","Description":"Shows a previously hidden toolbar group in an open toolbar collection\r\n        ","ArgumentDesc":"\r\nname = name of a currently open toolbar file\r\ntoolbar_group = name of a toolbar group to show\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowToolbar in module rhinoscript.toolbar:\r\n\r\nShowToolbar(name, toolbar_group) |      Shows a previously hidden toolbar group in an open toolbar collection\r\n        Parameters:\r\n          name = name of a currently open toolbar file\r\n          toolbar_group = name of a toolbar group to show\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"ToolbarCollectionPath","Arguments":["name"],"Signature":"ToolbarCollectionPath (name)","Description":"Returns full path to a currently open toolbar collection file\r\n        ","ArgumentDesc":"\r\nname = name of currently open toolbar collection\r\n        ","Returns":"\r\nfull path on success, None on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ToolbarCollectionPath in module rhinoscript.toolbar:\r\n\r\nToolbarCollectionPath(name) |      Returns full path to a currently open toolbar collection file\r\n        Parameters:\r\n          name = name of currently open toolbar collection\r\n        Returns:\r\n          full path on success, None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"ToolbarCount","Arguments":["name","groups=False"],"Signature":"ToolbarCount (name, groups=False)","Description":"Returns the number of toolbars or groups in a currently open toolbar file\r\n        ","ArgumentDesc":"\r\nname = name of currently open toolbar collection\r\ngroups[opt] = If true, return the number of toolbar groups in the file\r\n        ","Returns":"\r\nnumber of toolbars on success, None on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ToolbarCount in module rhinoscript.toolbar:\r\n\r\nToolbarCount(name, groups=False) |      Returns the number of toolbars or groups in a currently open toolbar file\r\n        Parameters:\r\n          name = name of currently open toolbar collection\r\n          groups[opt] = If true, return the number of toolbar groups in the file\r\n        Returns:\r\n          number of toolbars on success, None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"toolbar","Name":"ToolbarNames","Arguments":["name","groups=False"],"Signature":"ToolbarNames (name, groups=False)","Description":"Returns the names of all toolbars (or toolbar groups) found in a\r\n        currently open toolbar file\r\n        ","ArgumentDesc":"\r\nname = name of currently open toolbar collection\r\ngroups[opt] = If true, return the names of toolbar groups in the file\r\n        ","Returns":"\r\nnames of all toolbars (or toolbar groups) on success, None on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ToolbarNames in module rhinoscript.toolbar:\r\n\r\nToolbarNames(name, groups=False) |      Returns the names of all toolbars (or toolbar groups) found in a\r\n        currently open toolbar file\r\n        Parameters:\r\n          name = name of currently open toolbar collection\r\n          groups[opt] = If true, return the names of toolbar groups in the file\r\n        Returns:\r\n          names of all toolbars (or toolbar groups) on success, None on error","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"transformation","functions":[{"ModuleName":"transformation","Name":"IsXformIdentity","Arguments":["xform"],"Signature":"IsXformIdentity (xform)","Description":"Verifies a matrix is the identity matrix\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsXformIdentity in module rhinoscript.transformation:\r\n\r\nIsXformIdentity(xform) |      Verifies a matrix is the identity matrix","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"IsXformSimilarity","Arguments":["xform"],"Signature":"IsXformSimilarity (xform)","Description":"Verifies a matrix is a similarity transformation. A similarity\r\n        transformation can be broken into a sequence of dialations, translations,\r\n        rotations, and reflections\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsXformSimilarity in module rhinoscript.transformation:\r\n\r\nIsXformSimilarity(xform) |      Verifies a matrix is a similarity transformation. A similarity\r\n        transformation can be broken into a sequence of dialations, translations,\r\n        rotations, and reflections","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"IsXformZero","Arguments":["xform"],"Signature":"IsXformZero (xform)","Description":"verifies that a matrix is a zero transformation matrix\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsXformZero in module rhinoscript.transformation:\r\n\r\nIsXformZero(xform) |      verifies that a matrix is a zero transformation matrix","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformCPlaneToWorld","Arguments":["point","plane"],"Signature":"XformCPlaneToWorld (point, plane)","Description":"Transform point from construction plane coordinates to world coordinates\r\n        ","ArgumentDesc":"\r\npoint = A 3D point in construction plane coordinates.\r\nplane = The construction plane\r\n        ","Returns":"\r\nA 3D point in world coordinates\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformCPlaneToWorld in module rhinoscript.transformation:\r\n\r\nXformCPlaneToWorld(point, plane) |      Transform point from construction plane coordinates to world coordinates\r\n        Parameters:\r\n          point = A 3D point in construction plane coordinates.\r\n          plane = The construction plane\r\n        Returns:\r\n          A 3D point in world coordinates","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformChangeBasis","Arguments":["initial_plane","final_plane"],"Signature":"XformChangeBasis (initial_plane, final_plane)","Description":"Returns a change of basis transformation matrix or None on error\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformChangeBasis in module rhinoscript.transformation:\r\n\r\nXformChangeBasis(initial_plane, final_plane) |      Returns a change of basis transformation matrix or None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformChangeBasis2","Arguments":["x0","y0","z0","x1","y1","z1"],"Signature":"XformChangeBasis2 (x0, y0, z0, x1, y1, z1)","Description":"Returns a change of basis transformation matrix of None on error\r\n        ","ArgumentDesc":"\r\nx0,y0,z0 = initial basis\r\nx1,y1,z1 = final basis\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformChangeBasis2 in module rhinoscript.transformation:\r\n\r\nXformChangeBasis2(x0, y0, z0, x1, y1, z1) |      Returns a change of basis transformation matrix of None on error\r\n        Parameters:\r\n          x0,y0,z0 = initial basis\r\n          x1,y1,z1 = final basis","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformCompare","Arguments":["xform1","xform2"],"Signature":"XformCompare (xform1, xform2)","Description":"Compares two transformation matrices\r\n        ","ArgumentDesc":"\r\nxform1, xform2 = matrices to compare\r\n        ","Returns":"\r\n-1 if xform1<xform2\r\n 1 if xform1>xform2\r\n 0 if xform1=xform2\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformCompare in module rhinoscript.transformation:\r\n\r\nXformCompare(xform1, xform2) |      Compares two transformation matrices\r\n        Parameters:\r\n          xform1, xform2 = matrices to compare\r\n        Returns:\r\n          -1 if xform1<xform2\r\n           1 if xform1>xform2\r\n           0 if xform1=xform2","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformDeterminant","Arguments":["xform"],"Signature":"XformDeterminant (xform)","Description":"Returns the determinant of a transformation matrix. If the determinant\r\n        of a transformation matrix is 0, the matrix is said to be singular. Singular\r\n        matrices do not have inverses.\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformDeterminant in module rhinoscript.transformation:\r\n\r\nXformDeterminant(xform) |      Returns the determinant of a transformation matrix. If the determinant\r\n        of a transformation matrix is 0, the matrix is said to be singular. Singular\r\n        matrices do not have inverses.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformDiagonal","Arguments":["diagonal_value"],"Signature":"XformDiagonal (diagonal_value)","Description":"Returns a diagonal transformation matrix. Diagonal matrices are 3x3 with\r\n        the bottom row [0,0,0,1]\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformDiagonal in module rhinoscript.transformation:\r\n\r\nXformDiagonal(diagonal_value) |      Returns a diagonal transformation matrix. Diagonal matrices are 3x3 with\r\n        the bottom row [0,0,0,1]","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformInverse","Arguments":["xform"],"Signature":"XformInverse (xform)","Description":"Returns the inverse of a non-singular transformation matrix\r\n        Returns None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformInverse in module rhinoscript.transformation:\r\n\r\nXformInverse(xform) |      Returns the inverse of a non-singular transformation matrix\r\n        Returns None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformMirror","Arguments":["mirror_plane_point","mirror_plane_normal"],"Signature":"XformMirror (mirror_plane_point, mirror_plane_normal)","Description":"Creates a mirror transformation matrix\r\n        ","ArgumentDesc":"\r\nmirror_plane_point = point on the mirror plane\r\nmirror_plane_normal = a 3D vector that is normal to the mirror plane\r\n        ","Returns":"\r\nmirror Transform\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformMirror in module rhinoscript.transformation:\r\n\r\nXformMirror(mirror_plane_point, mirror_plane_normal) |      Creates a mirror transformation matrix\r\n        Parameters:\r\n          mirror_plane_point = point on the mirror plane\r\n          mirror_plane_normal = a 3D vector that is normal to the mirror plane\r\n        Returns:\r\n          mirror Transform","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformMultiply","Arguments":["xform1","xform2"],"Signature":"XformMultiply (xform1, xform2)","Description":"Multiplies two transformation matrices, where result = xform1 * xform2\r\n        Returns:\r\n          result transformation on success\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformMultiply in module rhinoscript.transformation:\r\n\r\nXformMultiply(xform1, xform2) |      Multiplies two transformation matrices, where result = xform1 * xform2\r\n        Returns:\r\n          result transformation on success","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformPlanarProjection","Arguments":["plane"],"Signature":"XformPlanarProjection (plane)","Description":"Returns a transformation matrix that projects to a plane.\r\n        Parameters\r\n          plane = The plane to project to.\r\n        Returns:\r\n          The 4x4 transformation matrix.\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformPlanarProjection in module rhinoscript.transformation:\r\n\r\nXformPlanarProjection(plane) |      Returns a transformation matrix that projects to a plane.\r\n        Parameters\r\n          plane = The plane to project to.\r\n        Returns:\r\n          The 4x4 transformation matrix.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformRotation1","Arguments":["initial_plane","final_plane"],"Signature":"XformRotation1 (initial_plane, final_plane)","Description":"Returns a rotation transformation that maps initial_plane to final_plane.\r\n        The planes should be right hand orthonormal planes.\r\n        ","ArgumentDesc":"\r\ninitial_plane = plane to rotate from\r\nfinal_plane = plane to rotate to\r\n        ","Returns":"\r\nThe 4x4 transformation matrix.\r\nNone on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformRotation1 in module rhinoscript.transformation:\r\n\r\nXformRotation1(initial_plane, final_plane) |      Returns a rotation transformation that maps initial_plane to final_plane.\r\n        The planes should be right hand orthonormal planes.\r\n        Parameters:\r\n          initial_plane = plane to rotate from\r\n          final_plane = plane to rotate to\r\n        Returns:\r\n          The 4x4 transformation matrix.\r\n          None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformRotation2","Arguments":["angle_degrees","rotation_axis","center_point"],"Signature":"XformRotation2 (angle_degrees, rotation_axis, center_point)","Description":"Returns a rotation transformation around an axis\r\n        ","ArgumentDesc":"\r\nangle_degrees = rotation angle in degrees\r\nrotation_axis = Vector3d: rotation axis\r\ncenter_point = Point3d: rotation center\r\n        ","Returns":"\r\nThe 4x4 transformation matrix.\r\nNone on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformRotation2 in module rhinoscript.transformation:\r\n\r\nXformRotation2(angle_degrees, rotation_axis, center_point) |      Returns a rotation transformation around an axis\r\n        Parameters:\r\n          angle_degrees = rotation angle in degrees\r\n          rotation_axis = Vector3d: rotation axis\r\n          center_point = Point3d: rotation center\r\n        Returns:\r\n          The 4x4 transformation matrix.\r\n          None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformRotation3","Arguments":["start_direction","end_direction","center_point"],"Signature":"XformRotation3 (start_direction, end_direction, center_point)","Description":"Calculate the minimal transformation that rotates start_direction to\r\n        end_direction while fixing center_point\r\n        ","ArgumentDesc":"\r\nstart_direction, end_direction = 3d vectors\r\ncenter_point = the rotation center\r\n        ","Returns":"\r\nThe 4x4 transformation matrix.\r\nNone on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformRotation3 in module rhinoscript.transformation:\r\n\r\nXformRotation3(start_direction, end_direction, center_point) |      Calculate the minimal transformation that rotates start_direction to\r\n        end_direction while fixing center_point\r\n        Parameters:\r\n          start_direction, end_direction = 3d vectors\r\n          center_point = the rotation center\r\n        Returns:\r\n          The 4x4 transformation matrix.\r\n          None on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformRotation4","Arguments":["x0","y0","z0","x1","y1","z1"],"Signature":"XformRotation4 (x0, y0, z0, x1, y1, z1)","Description":"Returns a rotation transformation.\r\n        Paramters:\r\n          x0,y0,z0 = Vectors defining the initial orthonormal frame\r\n          x1,y1,z1 = Vectors defining the final orthonormal frame\r\n        Returns:\r\n          The 4x4 transformation matrix.\r\n          None on error.\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformRotation4 in module rhinoscript.transformation:\r\n\r\nXformRotation4(x0, y0, z0, x1, y1, z1) |      Returns a rotation transformation.\r\n        Paramters:\r\n          x0,y0,z0 = Vectors defining the initial orthonormal frame\r\n          x1,y1,z1 = Vectors defining the final orthonormal frame\r\n        Returns:\r\n          The 4x4 transformation matrix.\r\n          None on error.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformScale","Arguments":["scale","point=None"],"Signature":"XformScale (scale, point=None)","Description":"Creates a scale transformation\r\n        ","ArgumentDesc":"\r\nscale = single number, list of 3 numbers, Point3d, or Vector3d\r\npoint[opt] = center of scale. If omitted, world origin is used\r\n        ","Returns":"\r\nThe 4x4 transformation matrix on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformScale in module rhinoscript.transformation:\r\n\r\nXformScale(scale, point=None) |      Creates a scale transformation\r\n        Parameters:\r\n          scale = single number, list of 3 numbers, Point3d, or Vector3d\r\n          point[opt] = center of scale. If omitted, world origin is used\r\n        Returns:\r\n          The 4x4 transformation matrix on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformScreenToWorld","Arguments":["point","view=None","screen_coordinates=False"],"Signature":"XformScreenToWorld (point, view=None, screen_coordinates=False)","Description":"Transforms a point from either client-area coordinates of the specified view\r\n        or screen coordinates to world coordinates. The resulting coordinates are represented\r\n        as a 3-D point\r\n        ","ArgumentDesc":"\r\npoint = 2D point\r\nview[opt] = title or identifier of a view. If omitted, the active view is used\r\nscreen_coordinates[opt] = if False, point is in client-area coordinates. If True,\r\npoint is in screen-area coordinates\r\n        ","Returns":"\r\n3D point on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformScreenToWorld in module rhinoscript.transformation:\r\n\r\nXformScreenToWorld(point, view=None, screen_coordinates=False) |      Transforms a point from either client-area coordinates of the specified view\r\n        or screen coordinates to world coordinates. The resulting coordinates are represented\r\n        as a 3-D point\r\n        Parameters:\r\n          point = 2D point\r\n          view[opt] = title or identifier of a view. If omitted, the active view is used\r\n          screen_coordinates[opt] = if False, point is in client-area coordinates. If True,\r\n          point is in screen-area coordinates\r\n        Returns:\r\n          3D point on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformShear","Arguments":["plane","x","y","z"],"Signature":"XformShear (plane, x, y, z)","Description":"Returns a shear transformation matrix\r\n        ","ArgumentDesc":"\r\nplane = plane[0] is the fixed point\r\nx,y,z = each axis scale factor\r\n        ","Returns":"\r\nThe 4x4 transformation matrix on success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformShear in module rhinoscript.transformation:\r\n\r\nXformShear(plane, x, y, z) |      Returns a shear transformation matrix\r\n        Parameters:\r\n          plane = plane[0] is the fixed point\r\n          x,y,z = each axis scale factor\r\n        Returns:\r\n          The 4x4 transformation matrix on success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformTranslation","Arguments":["vector"],"Signature":"XformTranslation (vector)","Description":"Creates a translation transformation matrix\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformTranslation in module rhinoscript.transformation:\r\n\r\nXformTranslation(vector) |      Creates a translation transformation matrix","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformWorldToCPlane","Arguments":["point","plane"],"Signature":"XformWorldToCPlane (point, plane)","Description":"Transforms a point from world coordinates to construction plane coordinates.\r\n        ","ArgumentDesc":"\r\npoint = A 3D point in world coordinates.\r\nplane = The construction plane\r\n        ","Returns":"\r\nA 3D point in construction plane coordinates\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformWorldToCPlane in module rhinoscript.transformation:\r\n\r\nXformWorldToCPlane(point, plane) |      Transforms a point from world coordinates to construction plane coordinates.\r\n        Parameters:\r\n          point = A 3D point in world coordinates.\r\n          plane = The construction plane\r\n        Returns:\r\n          A 3D point in construction plane coordinates","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"transformation","Name":"XformWorldToScreen","Arguments":["point","view=None","screen_coordinates=False"],"Signature":"XformWorldToScreen (point, view=None, screen_coordinates=False)","Description":"Transforms a point from world coordinates to either client-area coordinates of\r\n        the specified view or screen coordinates. The resulting coordinates are represented\r\n        as a 2D point\r\n        ","ArgumentDesc":"\r\npoint = 3D point in world coordinates\r\nview[opt] = title or identifier of a view. If omitted, the active view is used\r\nscreen_coordinates[opt] = if False, the function returns the results as\r\n  client-area coordinates. If True, the result is in screen-area coordinates\r\n        ","Returns":"\r\n2D point on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function XformWorldToScreen in module rhinoscript.transformation:\r\n\r\nXformWorldToScreen(point, view=None, screen_coordinates=False) |      Transforms a point from world coordinates to either client-area coordinates of\r\n        the specified view or screen coordinates. The resulting coordinates are represented\r\n        as a 2D point\r\n        Parameters:\r\n          point = 3D point in world coordinates\r\n          view[opt] = title or identifier of a view. If omitted, the active view is used\r\n          screen_coordinates[opt] = if False, the function returns the results as\r\n            client-area coordinates. If True, the result is in screen-area coordinates\r\n        Returns:\r\n          2D point on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"userdata","functions":[{"ModuleName":"userdata","Name":"DeleteDocumentData","Arguments":["section=None","entry=None"],"Signature":"DeleteDocumentData (section=None, entry=None)","Description":"Removes user data strings from the current document\r\n        ","ArgumentDesc":"\r\nsection = section name. If omitted, all sections and their corresponding\r\n  entries are removed\r\nentry = entry name. If omitted, all entries for section are removed\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteDocumentData in module rhinoscript.userdata:\r\n\r\nDeleteDocumentData(section=None, entry=None) |      Removes user data strings from the current document\r\n        Parameters:\r\n          section = section name. If omitted, all sections and their corresponding\r\n            entries are removed\r\n          entry = entry name. If omitted, all entries for section are removed\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userdata","Name":"GetDocumentData","Arguments":["section=None","entry=None"],"Signature":"GetDocumentData (section=None, entry=None)","Description":"Returns a user data item from the current document\r\n        ","ArgumentDesc":"\r\nsection[opt] = section name. If omitted, all section names are returned\r\nentry[opt] = entry name. If omitted, all entry names for section are returned\r\n        ","Returns":"\r\nlist of all section names if section name is omitted\r\nlist of all entry names for a section if entry is omitted\r\nvalue of the entry if both section and entry are specified\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetDocumentData in module rhinoscript.userdata:\r\n\r\nGetDocumentData(section=None, entry=None) |      Returns a user data item from the current document\r\n        Parameters:\r\n          section[opt] = section name. If omitted, all section names are returned\r\n          entry[opt] = entry name. If omitted, all entry names for section are returned\r\n        Returns:\r\n          list of all section names if section name is omitted\r\n          list of all entry names for a section if entry is omitted\r\n          value of the entry if both section and entry are specified","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userdata","Name":"GetDocumentUserText","Arguments":["key=None"],"Signature":"GetDocumentUserText (key=None)","Description":"Returns user text stored in the document\r\n        ","ArgumentDesc":"\r\nkey[opt] = key to use for retrieving user text. If empty, all keys are returned\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetDocumentUserText in module rhinoscript.userdata:\r\n\r\nGetDocumentUserText(key=None) |      Returns user text stored in the document\r\n        Parameters:\r\n          key[opt] = key to use for retrieving user text. If empty, all keys are returned","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"userdata","Name":"GetUserText","Arguments":["object_id","key=None","attached_to_geometry=False"],"Signature":"GetUserText (object_id, key=None, attached_to_geometry=False)","Description":"Returns user text stored on an object.\r\n        ","ArgumentDesc":"\r\nobject_id = the object's identifies\r\nkey[opt] = the key name. If omitted all key names for an object are returned\r\nattached_to_geometry[opt] = location on the object to retrieve the user text\r\n        ","Returns":"\r\nif key is specified, the associated value if successful\r\nif key is not specified, a list of key names if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetUserText in module rhinoscript.userdata:\r\n\r\nGetUserText(object_id, key=None, attached_to_geometry=False) |      Returns user text stored on an object.\r\n        Parameters:\r\n          object_id = the object's identifies\r\n          key[opt] = the key name. If omitted all key names for an object are returned\r\n          attached_to_geometry[opt] = location on the object to retrieve the user text\r\n        Returns:\r\n          if key is specified, the associated value if successful\r\n          if key is not specified, a list of key names if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userdata","Name":"IsUserText","Arguments":["object_id"],"Signature":"IsUserText (object_id)","Description":"Verifies that an object contains user text\r\n        Returns:\r\n          0 = no user text\r\n          1 = attribute user text\r\n          2 = geometry user text\r\n          3 = both attribute and geometry user text\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsUserText in module rhinoscript.userdata:\r\n\r\nIsUserText(object_id) |      Verifies that an object contains user text\r\n        Returns:\r\n          0 = no user text\r\n          1 = attribute user text\r\n          2 = geometry user text\r\n          3 = both attribute and geometry user text","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"userdata","Name":"SetDocumentData","Arguments":["section","entry","value"],"Signature":"SetDocumentData (section, entry, value)","Description":"Adds or sets a user data string to the current document\r\n        ","ArgumentDesc":"\r\nsection = the section name\r\nentry = the entry name\r\nvalue  = the string value\r\n        ","Returns":"\r\nThe previous value\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SetDocumentData in module rhinoscript.userdata:\r\n\r\nSetDocumentData(section, entry, value) |      Adds or sets a user data string to the current document\r\n        Parameters:\r\n          section = the section name\r\n          entry = the entry name\r\n          value  = the string value\r\n        Returns:\r\n          The previous value","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userdata","Name":"SetDocumentUserText","Arguments":["key","value=None"],"Signature":"SetDocumentUserText (key, value=None)","Description":"Sets or removes user text stored in the document\r\n        ","ArgumentDesc":"\r\nkey = key name to set\r\nvalue[opt] = The string value to set. If omitted the key/value pair\r\n  specified by key will be deleted\r\n        ","Returns":"\r\nTrue or False indicating success\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SetDocumentUserText in module rhinoscript.userdata:\r\n\r\nSetDocumentUserText(key, value=None) |      Sets or removes user text stored in the document\r\n        Parameters:\r\n          key = key name to set\r\n          value[opt] = The string value to set. If omitted the key/value pair\r\n            specified by key will be deleted\r\n        Returns:\r\n          True or False indicating success","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userdata","Name":"SetUserText","Arguments":["object_id","key","value=None","attach_to_geometry=False"],"Signature":"SetUserText (object_id, key, value=None, attach_to_geometry=False)","Description":"Sets or removes user text stored on an object.\r\n        ","ArgumentDesc":"\r\nobject_id = the object's identifier\r\nkey = the key name to set\r\nvalue[opt] = the string value to set. If omitted, the key/value pair\r\n    specified by key will be deleted\r\nattach_to_geometry[opt] = location on the object to store the user text\r\n        ","Returns":"\r\nTrue or False indicating success or failure \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SetUserText in module rhinoscript.userdata:\r\n\r\nSetUserText(object_id, key, value=None, attach_to_geometry=False) |      Sets or removes user text stored on an object.\r\n        Parameters:\r\n          object_id = the object's identifier\r\n          key = the key name to set\r\n          value[opt] = the string value to set. If omitted, the key/value pair\r\n              specified by key will be deleted\r\n          attach_to_geometry[opt] = location on the object to store the user text\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false}]},{"ModuleName":"userinterface","functions":[{"ModuleName":"userinterface","Name":"BrowseForFolder","Arguments":["folder=None","message=None","title=None"],"Signature":"BrowseForFolder (folder=None, message=None, title=None)","Description":"Display browse-for-folder dialog allowing the user to select a folder\r\n        ","ArgumentDesc":"\r\nfolder[opt] = a default folder\r\nmessage[opt] = a prompt or message\r\ntitle[opt] = a dialog box title\r\n        ","Returns":"\r\nselected folder\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function BrowseForFolder in module rhinoscript.userinterface:\r\n\r\nBrowseForFolder(folder=None, message=None, title=None) |      Display browse-for-folder dialog allowing the user to select a folder\r\n        Parameters:\r\n          folder[opt] = a default folder\r\n          message[opt] = a prompt or message\r\n          title[opt] = a dialog box title\r\n        Returns:\r\n          selected folder\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"CheckListBox","Arguments":["items","message=None","title=None"],"Signature":"CheckListBox (items, message=None, title=None)","Description":"Displays a list of items in a checkable-style list dialog box\r\n        ","ArgumentDesc":"\r\nitems = a list of tuples containing a string and a boolean check state\r\nmessage[opt] = a prompt or message\r\ntitle[opt] = a dialog box title\r\n        ","Returns":"\r\nA list of tuples containing the input string in items along with their\r\nnew boolean check value\r\nNone on error      \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CheckListBox in module rhinoscript.userinterface:\r\n\r\nCheckListBox(items, message=None, title=None) |      Displays a list of items in a checkable-style list dialog box\r\n        Parameters:\r\n          items = a list of tuples containing a string and a boolean check state\r\n          message[opt] = a prompt or message\r\n          title[opt] = a dialog box title\r\n        Returns:\r\n          A list of tuples containing the input string in items along with their\r\n          new boolean check value\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"ComboListBox","Arguments":["items","message=None","title=None"],"Signature":"ComboListBox (items, message=None, title=None)","Description":"Displays a list of items in a combo-style list box dialog.\r\n        ","ArgumentDesc":"\r\nitems = a list of string\r\nmessage[opt] = a prompt of message\r\ntitle[opt] = a dialog box title\r\n        ","Returns":"\r\nThe selected item if successful\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ComboListBox in module rhinoscript.userinterface:\r\n\r\nComboListBox(items, message=None, title=None) |      Displays a list of items in a combo-style list box dialog.\r\n        Parameters:\r\n          items = a list of string\r\n          message[opt] = a prompt of message\r\n          title[opt] = a dialog box title\r\n        Returns:\r\n          The selected item if successful\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"EditBox","Arguments":["default_string=None","message=None","title=None"],"Signature":"EditBox (default_string=None, message=None, title=None)","Description":"Display dialog prompting the user to enter a string. The\r\n        string value may span multiple lines\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function EditBox in module rhinoscript.userinterface:\r\n\r\nEditBox(default_string=None, message=None, title=None) |      Display dialog prompting the user to enter a string. The\r\n        string value may span multiple lines","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetAngle","Arguments":["point=None","reference_point=None","default_angle_degrees=0","message=None"],"Signature":"GetAngle (point=None, reference_point=None, default_angle_degrees=0, message=None)","Description":"Pause for user input of an angle\r\n        ","ArgumentDesc":"\r\npoint(opt) = starting, or base point\r\nreference_point(opt) = if specified, the reference angle is calculated\r\n  from it and the base point\r\ndefault_angle_degrees(opt) = a default angle value specified\r\nmessage(opt) = a prompt to display\r\n        ","Returns":"\r\nangle in degree if successful, None on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetAngle in module rhinoscript.userinterface:\r\n\r\nGetAngle(point=None, reference_point=None, default_angle_degrees=0, message=None) |      Pause for user input of an angle\r\n        Parameters:\r\n          point(opt) = starting, or base point\r\n          reference_point(opt) = if specified, the reference angle is calculated\r\n            from it and the base point\r\n          default_angle_degrees(opt) = a default angle value specified\r\n          message(opt) = a prompt to display\r\n        Returns:\r\n          angle in degree if successful, None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetBoolean","Arguments":["message","items","defaults"],"Signature":"GetBoolean (message, items, defaults)","Description":"Pauses for user input of one or more boolean values. Boolean values are\r\n        displayed as click-able command line option toggles\r\n        ","ArgumentDesc":"\r\nmessage = a prompt\r\nitems = list or tuple of options. Each option is a tuple of three strings\r\n  element 1 = description of the boolean value. Must only consist of letters\r\n    and numbers. (no characters like space, period, or dash\r\n  element 2 = string identifying the false value\r\n  element 3 = string identifying the true value\r\ndefaults = list of boolean values used as default or starting values\r\n        ","Returns":"\r\na list of values that represent the boolean values if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetBoolean in module rhinoscript.userinterface:\r\n\r\nGetBoolean(message, items, defaults) |      Pauses for user input of one or more boolean values. Boolean values are\r\n        displayed as click-able command line option toggles\r\n        Parameters:\r\n          message = a prompt\r\n          items = list or tuple of options. Each option is a tuple of three strings\r\n            element 1 = description of the boolean value. Must only consist of letters\r\n              and numbers. (no characters like space, period, or dash\r\n            element 2 = string identifying the false value\r\n            element 3 = string identifying the true value\r\n          defaults = list of boolean values used as default or starting values\r\n        Returns:\r\n          a list of values that represent the boolean values if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetBox","Arguments":["mode=0","base_point=None","prompt1=None","prompt2=None","prompt3=None"],"Signature":"GetBox (mode=0, base_point=None, prompt1=None, prompt2=None, prompt3=None)","Description":"Pauses for user input of a box\r\n        ","ArgumentDesc":"\r\nmode[opt] = The box selection mode.\r\n   0 = All modes\r\n   1 = Corner. The base rectangle is created by picking two corner points\r\n   2 = 3-Point. The base rectangle is created by picking three points\r\n   3 = Vertical. The base vertical rectangle is created by picking three points.\r\n   4 = Center. The base rectangle is created by picking a center point and a corner point\r\nbase_point[opt] = optional 3D base point\r\nprompt1, prompt2, prompt3 [opt] = optional prompts to set\r\n        ","Returns":"\r\nlist of eight Point3d that define the corners of the box on success\r\nNone is not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetBox in module rhinoscript.userinterface:\r\n\r\nGetBox(mode=0, base_point=None, prompt1=None, prompt2=None, prompt3=None) |      Pauses for user input of a box\r\n        Parameters:\r\n          mode[opt] = The box selection mode.\r\n             0 = All modes\r\n             1 = Corner. The base rectangle is created by picking two corner points\r\n             2 = 3-Point. The base rectangle is created by picking three points\r\n             3 = Vertical. The base vertical rectangle is created by picking three points.\r\n             4 = Center. The base rectangle is created by picking a center point and a corner point\r\n          base_point[opt] = optional 3D base point\r\n          prompt1, prompt2, prompt3 [opt] = optional prompts to set\r\n        Returns:\r\n          list of eight Point3d that define the corners of the box on success\r\n          None is not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetColor","Arguments":["color=[0","0","0]"],"Signature":"GetColor (color=[0, 0, 0])","Description":"Display the Rhino color picker dialog allowing the user to select an RGB color\r\n        ","ArgumentDesc":"\r\ncolor [opt] = default RGB value. If omitted, the default color is black\r\n        ","Returns":"\r\nRGB tuple of three numbers on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetColor in module rhinoscript.userinterface:\r\n\r\nGetColor(color=[0, 0, 0]) |      Display the Rhino color picker dialog allowing the user to select an RGB color\r\n        Parameters:\r\n          color [opt] = default RGB value. If omitted, the default color is black\r\n        Returns:\r\n          RGB tuple of three numbers on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetDistance","Arguments":["first_pt=None","distance=None","first_pt_msg='First distance point'","second_pt_msg='Second distance point'"],"Signature":"GetDistance (first_pt=None, distance=None, first_pt_msg='First distance point', second_pt_msg='Second distance point')","Description":"Pauses for user input of a distance.\r\n        ","ArgumentDesc":"\r\nfirst_pt [opt] = First distance point\r\ndistance [opt] = Default distance\r\nfirst_pt_msg [opt] = Prompt for the first distance point\r\nsecond_pt_msg [opt] = Prompt for the second distance point\r\n        ","Returns":"\r\nThe distance between the two points if successful.\r\nNone if not successful, or on error.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetDistance in module rhinoscript.userinterface:\r\n\r\nGetDistance(first_pt=None, distance=None, first_pt_msg='First distance point', second_pt_msg='Second distance point') |      Pauses for user input of a distance.\r\n        Parameters:\r\n          first_pt [opt] = First distance point\r\n          distance [opt] = Default distance\r\n          first_pt_msg [opt] = Prompt for the first distance point\r\n          second_pt_msg [opt] = Prompt for the second distance point\r\n        Returns:\r\n          The distance between the two points if successful.\r\n          None if not successful, or on error.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetEdgeCurves","Arguments":["message=None","min_count=1","max_count=0","select=False"],"Signature":"GetEdgeCurves (message=None, min_count=1, max_count=0, select=False)","Description":"Prompt the user to pick one or more surface or polysurface edge curves\r\n        ","ArgumentDesc":"\r\nmessage [optional] = A prompt or message.\r\nmin_count [optional] = minimum number of edges to select.\r\nmax_count [optional] = maximum number of edges to select.\r\nselect [optional] = Select the duplicated edge curves.\r\n        ","Returns":"\r\nList of (curve id, parent id, selection point)\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetEdgeCurves in module rhinoscript.userinterface:\r\n\r\nGetEdgeCurves(message=None, min_count=1, max_count=0, select=False) |      Prompt the user to pick one or more surface or polysurface edge curves\r\n        Parameters:\r\n          message [optional] = A prompt or message.\r\n          min_count [optional] = minimum number of edges to select.\r\n          max_count [optional] = maximum number of edges to select.\r\n          select [optional] = Select the duplicated edge curves.\r\n        Returns:\r\n          List of (curve id, parent id, selection point)\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetInteger","Arguments":["message=None","number=None","minimum=None","maximum=None"],"Signature":"GetInteger (message=None, number=None, minimum=None, maximum=None)","Description":"Pauses for user input of a whole number.\r\n        ","ArgumentDesc":"\r\nmessage [optional] = A prompt or message.\r\nnumber [optional] = A default whole number value.\r\nminimum [optional] = A minimum allowable value.\r\nmaximum [optional] = A maximum allowable value.\r\n        ","Returns":"\r\nThe whole number input by the user if successful.\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetInteger in module rhinoscript.userinterface:\r\n\r\nGetInteger(message=None, number=None, minimum=None, maximum=None) |      Pauses for user input of a whole number.\r\n        Parameters:\r\n          message [optional] = A prompt or message.\r\n          number [optional] = A default whole number value.\r\n          minimum [optional] = A minimum allowable value.\r\n          maximum [optional] = A maximum allowable value.\r\n        Returns:\r\n           The whole number input by the user if successful.\r\n           None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetLayer","Arguments":["title='Select Layer'","layer=None","show_new_button=False","show_set_current=False"],"Signature":"GetLayer (title='Select Layer', layer=None, show_new_button=False, show_set_current=False)","Description":"Displays dialog box prompting the user to select a layer\r\n        ","ArgumentDesc":"\r\ntitle[opt] = dialog box title\r\nlayer[opt] = name of a layer to preselect. If omitted, the current layer will be preselected\r\nshow_new_button, show_set_current[opt] = Optional buttons to show on the dialog\r\n        ","Returns":"\r\nname of selected layer if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetLayer in module rhinoscript.userinterface:\r\n\r\nGetLayer(title='Select Layer', layer=None, show_new_button=False, show_set_current=False) |      Displays dialog box prompting the user to select a layer\r\n        Parameters:\r\n          title[opt] = dialog box title\r\n          layer[opt] = name of a layer to preselect. If omitted, the current layer will be preselected\r\n          show_new_button, show_set_current[opt] = Optional buttons to show on the dialog\r\n        Returns:\r\n          name of selected layer if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetLayers","Arguments":["title='Select Layers'","show_new_button=False"],"Signature":"GetLayers (title='Select Layers', show_new_button=False)","Description":"Displays a dialog box prompting the user to select one or more layers\r\n        ","ArgumentDesc":"\r\ntitle[opt] = dialog box title\r\nshow_new_button[opt] = Optional button to show on the dialog\r\n        ","Returns":"\r\nThe names of selected layers if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetLayers in module rhinoscript.userinterface:\r\n\r\nGetLayers(title='Select Layers', show_new_button=False) |      Displays a dialog box prompting the user to select one or more layers\r\n        Parameters:\r\n          title[opt] = dialog box title\r\n          show_new_button[opt] = Optional button to show on the dialog\r\n        Returns:\r\n          The names of selected layers if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetLine","Arguments":["mode=0","point=None","message1=None","message2=None","message3=None"],"Signature":"GetLine (mode=0, point=None, message1=None, message2=None, message3=None)","Description":"Prompts the user to pick points that define a line\r\n        ","ArgumentDesc":"\r\nmode[opt] = line definition mode. See help file for details\r\npoint[opt] = optional starting point\r\nmessage1, message2, message3 = optional prompts\r\n        ","Returns":"\r\nTuple of two points on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetLine in module rhinoscript.userinterface:\r\n\r\nGetLine(mode=0, point=None, message1=None, message2=None, message3=None) |      Prompts the user to pick points that define a line\r\n        Parameters:\r\n          mode[opt] = line definition mode. See help file for details\r\n          point[opt] = optional starting point\r\n          message1, message2, message3 = optional prompts\r\n        Returns:\r\n          Tuple of two points on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetMeshFaces","Arguments":["object_id","message=''","min_count=1","max_count=0"],"Signature":"GetMeshFaces (object_id, message='', min_count=1, max_count=0)","Description":"Prompts the user to pick one or more mesh faces\r\n        ","ArgumentDesc":"\r\nobject_id = the mesh object's identifier\r\nmessage[opt] = a prompt of message\r\nmin_count[opt] = the minimum number of faces to select\r\nmax_count[opt] = the maximum number of faces to select. If 0, the user must\r\n  press enter to finish selection. If -1, selection stops as soon as there\r\n  are at least min_count faces selected.\r\n        ","Returns":"\r\nlist of mesh face indices on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetMeshFaces in module rhinoscript.userinterface:\r\n\r\nGetMeshFaces(object_id, message='', min_count=1, max_count=0) |      Prompts the user to pick one or more mesh faces\r\n        Parameters:\r\n          object_id = the mesh object's identifier\r\n          message[opt] = a prompt of message\r\n          min_count[opt] = the minimum number of faces to select\r\n          max_count[opt] = the maximum number of faces to select. If 0, the user must\r\n            press enter to finish selection. If -1, selection stops as soon as there\r\n            are at least min_count faces selected.\r\n        Returns:\r\n          list of mesh face indices on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetMeshVertices","Arguments":["object_id","message=''","min_count=1","max_count=0"],"Signature":"GetMeshVertices (object_id, message='', min_count=1, max_count=0)","Description":"Prompts the user to pick one or more mesh vertices\r\n        ","ArgumentDesc":"\r\nobject_id = the mesh object's identifier\r\nmessage[opt] = a prompt of message\r\nmin_count[opt] = the minimum number of vertices to select\r\nmax_count[opt] = the maximum number of vertices to select. If 0, the user must\r\n  press enter to finish selection. If -1, selection stops as soon as there\r\n  are at least min_count vertices selected.\r\n        ","Returns":"\r\nlist of mesh vertex indices on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetMeshVertices in module rhinoscript.userinterface:\r\n\r\nGetMeshVertices(object_id, message='', min_count=1, max_count=0) |      Prompts the user to pick one or more mesh vertices\r\n        Parameters:\r\n          object_id = the mesh object's identifier\r\n          message[opt] = a prompt of message\r\n          min_count[opt] = the minimum number of vertices to select\r\n          max_count[opt] = the maximum number of vertices to select. If 0, the user must\r\n            press enter to finish selection. If -1, selection stops as soon as there\r\n            are at least min_count vertices selected.\r\n        Returns:\r\n          list of mesh vertex indices on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetPoint","Arguments":["message=None","base_point=None","distance=None","in_plane=False"],"Signature":"GetPoint (message=None, base_point=None, distance=None, in_plane=False)","Description":"Pauses for user input of a point.\r\n        ","ArgumentDesc":"\r\nmessage [opt] = A prompt or message.\r\nbase_point [opt] = list of 3 numbers or Point3d identifying a starting, or base point\r\ndistance  [opt] = constraining distance. If distance is specified, basePoint must also\r\n                  be sepcified.\r\nin_plane [opt] = constrains the point selections to the active construction plane.\r\n        ","Returns":"\r\npoint on success\r\nNone if no point picked or user canceled\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetPoint in module rhinoscript.userinterface:\r\n\r\nGetPoint(message=None, base_point=None, distance=None, in_plane=False) |      Pauses for user input of a point.\r\n        Parameters:\r\n          message [opt] = A prompt or message.\r\n          base_point [opt] = list of 3 numbers or Point3d identifying a starting, or base point\r\n          distance  [opt] = constraining distance. If distance is specified, basePoint must also\r\n                            be sepcified.\r\n          in_plane [opt] = constrains the point selections to the active construction plane.\r\n        Returns:\r\n          point on success\r\n          None if no point picked or user canceled","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetPointOnCurve","Arguments":["curve_id","message=None"],"Signature":"GetPointOnCurve (curve_id, message=None)","Description":"Pauses for user input of a point constrainted to a curve object\r\n        ","ArgumentDesc":"\r\ncurve_id = identifier of the curve to get a point on\r\nmessage [opt] = a prompt of message\r\n        ","Returns":"\r\n3d point if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetPointOnCurve in module rhinoscript.userinterface:\r\n\r\nGetPointOnCurve(curve_id, message=None) |      Pauses for user input of a point constrainted to a curve object\r\n        Parameters:\r\n          curve_id = identifier of the curve to get a point on\r\n          message [opt] = a prompt of message\r\n        Returns:\r\n          3d point if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetPointOnMesh","Arguments":["mesh_id","message=None"],"Signature":"GetPointOnMesh (mesh_id, message=None)","Description":"Pauses for user input of a point constrained to a mesh object\r\n        ","ArgumentDesc":"\r\nmesh_id = identifier of the mesh to get a point on\r\nmessage [opt] = a prompt or message\r\n        ","Returns":"\r\n3d point if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetPointOnMesh in module rhinoscript.userinterface:\r\n\r\nGetPointOnMesh(mesh_id, message=None) |      Pauses for user input of a point constrained to a mesh object\r\n        Parameters:\r\n          mesh_id = identifier of the mesh to get a point on\r\n          message [opt] = a prompt or message\r\n        Returns:\r\n          3d point if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetPointOnSurface","Arguments":["surface_id","message=None"],"Signature":"GetPointOnSurface (surface_id, message=None)","Description":"Pauses for user input of a point constrained to a surface or polysurface\r\n        object\r\n        ","ArgumentDesc":"\r\nsurface_id = identifier of the surface to get a point on\r\nmessage [opt] = a prompt or message\r\n        ","Returns":"\r\n3d point if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetPointOnSurface in module rhinoscript.userinterface:\r\n\r\nGetPointOnSurface(surface_id, message=None) |      Pauses for user input of a point constrained to a surface or polysurface\r\n        object\r\n        Parameters:\r\n          surface_id = identifier of the surface to get a point on\r\n          message [opt] = a prompt or message\r\n        Returns:\r\n          3d point if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetPoints","Arguments":["draw_lines=False","in_plane=False","message1=None","message2=None","max_points=None","base_point=None"],"Signature":"GetPoints (draw_lines=False, in_plane=False, message1=None, message2=None, max_points=None, base_point=None)","Description":"Pauses for user input of one or more points\r\n        ","ArgumentDesc":"\r\ndraw_lines [opt] = Draw lines between points\r\nin_plane[opt] = Constrain point selection to the active construction plane\r\nmessage1[opt] = A prompt or message for the first point\r\nmessage2[opt] = A prompt or message for the next points\r\nmax_points[opt] = maximum number of points to pick. If not specified, an\r\n                  unlimited number of points can be picked.\r\nbase_point[opt] = a starting or base point\r\n        ","Returns":"\r\nlist of 3d points if successful\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetPoints in module rhinoscript.userinterface:\r\n\r\nGetPoints(draw_lines=False, in_plane=False, message1=None, message2=None, max_points=None, base_point=None) |      Pauses for user input of one or more points\r\n        Parameters:\r\n          draw_lines [opt] = Draw lines between points\r\n          in_plane[opt] = Constrain point selection to the active construction plane\r\n          message1[opt] = A prompt or message for the first point\r\n          message2[opt] = A prompt or message for the next points\r\n          max_points[opt] = maximum number of points to pick. If not specified, an\r\n                            unlimited number of points can be picked.\r\n          base_point[opt] = a starting or base point\r\n        Returns:\r\n          list of 3d points if successful\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetReal","Arguments":["message='Number'","number=None","minimum=None","maximum=None"],"Signature":"GetReal (message='Number', number=None, minimum=None, maximum=None)","Description":"Pauses for user input of a number.\r\n        ","ArgumentDesc":"\r\nmessage [optional] = A prompt or message.\r\nnumber [optional] = A default number value.\r\nminimum [optional] = A minimum allowable value.\r\nmaximum [optional] = A maximum allowable value.\r\n        ","Returns":"\r\nThe number input by the user if successful.\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetReal in module rhinoscript.userinterface:\r\n\r\nGetReal(message='Number', number=None, minimum=None, maximum=None) |      Pauses for user input of a number.\r\n        Parameters:\r\n          message [optional] = A prompt or message.\r\n          number [optional] = A default number value.\r\n          minimum [optional] = A minimum allowable value.\r\n          maximum [optional] = A maximum allowable value.\r\n        Returns:\r\n           The number input by the user if successful.\r\n           None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetRectangle","Arguments":["mode=0","base_point=None","prompt1=None","prompt2=None","prompt3=None"],"Signature":"GetRectangle (mode=0, base_point=None, prompt1=None, prompt2=None, prompt3=None)","Description":"Pauses for user input of a rectangle\r\n        ","ArgumentDesc":"\r\nmode[opt] = The rectangle selection mode. The modes are as follows\r\n    0 = All modes\r\n    1 = Corner - a rectangle is created by picking two corner points\r\n    2 = 3Point - a rectangle is created by picking three points\r\n    3 = Vertical - a vertical rectangle is created by picking three points\r\n    4 = Center - a rectangle is created by picking a center point and a corner point\r\nbase_point[opt] = a 3d base point\r\nprompt1, prompt2, prompt3 = optional prompts\r\n        ","Returns":"\r\na tuple of four 3d points that define the corners of the rectangle\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetRectangle in module rhinoscript.userinterface:\r\n\r\nGetRectangle(mode=0, base_point=None, prompt1=None, prompt2=None, prompt3=None) |      Pauses for user input of a rectangle\r\n        Parameters:\r\n          mode[opt] = The rectangle selection mode. The modes are as follows\r\n              0 = All modes\r\n              1 = Corner - a rectangle is created by picking two corner points\r\n              2 = 3Point - a rectangle is created by picking three points\r\n              3 = Vertical - a vertical rectangle is created by picking three points\r\n              4 = Center - a rectangle is created by picking a center point and a corner point\r\n          base_point[opt] = a 3d base point\r\n          prompt1, prompt2, prompt3 = optional prompts\r\n        Returns:\r\n          a tuple of four 3d points that define the corners of the rectangle\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"GetString","Arguments":["message=None","defaultString=None","strings=None"],"Signature":"GetString (message=None, defaultString=None, strings=None)","Description":"Pauses for user input of a string value\r\n        ","ArgumentDesc":"\r\nmessage [opt]: a prompt or message\r\ndefaultString [opt]: a default value\r\nstrings [opt]: list of strings to be displayed as a click-able command options.\r\n  Note, strings cannot begin with a numeric character\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetString in module rhinoscript.userinterface:\r\n\r\nGetString(message=None, defaultString=None, strings=None) |      Pauses for user input of a string value\r\n        Parameters:\r\n          message [opt]: a prompt or message\r\n          defaultString [opt]: a default value\r\n          strings [opt]: list of strings to be displayed as a click-able command options.\r\n            Note, strings cannot begin with a numeric character","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"ListBox","Arguments":["items","message=None","title=None","default=None"],"Signature":"ListBox (items, message=None, title=None, default=None)","Description":"Display a list of items in a list box dialog.\r\n        ","ArgumentDesc":"\r\nitems = a list\r\nmessage [opt] = a prompt of message\r\ntitle [opt] = a dialog box title\r\ndefault [opt] = selected item in the list\r\n        ","Returns":"\r\nThe selected item if successful\r\nNone if not successful or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ListBox in module rhinoscript.userinterface:\r\n\r\nListBox(items, message=None, title=None, default=None) |      Display a list of items in a list box dialog.\r\n        Parameters:\r\n          items = a list\r\n          message [opt] = a prompt of message\r\n          title [opt] = a dialog box title\r\n          default [opt] = selected item in the list\r\n        Returns:\r\n          The selected item if successful\r\n          None if not successful or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"MessageBox","Arguments":["message","buttons=0","title=''"],"Signature":"MessageBox (message, buttons=0, title='')","Description":"Displays a message box. A message box contains a message and\r\n        title, plus any combination of predefined icons and push buttons.\r\n        ","ArgumentDesc":"\r\nmessage = A prompt or message.\r\nbuttons[opt] = buttons and icon to display. Can be a combination of the\r\n  following flags. If omitted, an OK button and no icon is displayed\r\n  0      Display OK button only.\r\n  1      Display OK and Cancel buttons.\r\n  2      Display Abort, Retry, and Ignore buttons.\r\n  3      Display Yes, No, and Cancel buttons.\r\n  4      Display Yes and No buttons.\r\n  5      Display Retry and Cancel buttons.\r\n  16     Display Critical Message icon.\r\n  32     Display Warning Query icon.\r\n  48     Display Warning Message icon.\r\n  64     Display Information Message icon.\r\n  0      First button is the default.\r\n  256    Second button is the default.\r\n  512    Third button is the default.\r\n  768    Fourth button is the default.\r\n  0      Application modal. The user must respond to the message box\r\n         before continuing work in the current application.\r\n  4096   System modal. The user must respond to the message box\r\n         before continuing work in any application.\r\ntitle[opt] = the dialog box title\r\n        ","Returns":"\r\nA number indicating which button was clicked:\r\n  1      OK button was clicked.\r\n  2      Cancel button was clicked.\r\n  3      Abort button was clicked.\r\n  4      Retry button was clicked.\r\n  5      Ignore button was clicked.\r\n  6      Yes button was clicked.\r\n  7      No button was clicked.\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MessageBox in module rhinoscript.userinterface:\r\n\r\nMessageBox(message, buttons=0, title='') |      Displays a message box. A message box contains a message and\r\n        title, plus any combination of predefined icons and push buttons.\r\n        Parameters:\r\n          message = A prompt or message.\r\n          buttons[opt] = buttons and icon to display. Can be a combination of the\r\n            following flags. If omitted, an OK button and no icon is displayed\r\n            0      Display OK button only.\r\n            1      Display OK and Cancel buttons.\r\n            2      Display Abort, Retry, and Ignore buttons.\r\n            3      Display Yes, No, and Cancel buttons.\r\n            4      Display Yes and No buttons.\r\n            5      Display Retry and Cancel buttons.\r\n            16     Display Critical Message icon.\r\n            32     Display Warning Query icon.\r\n            48     Display Warning Message icon.\r\n            64     Display Information Message icon.\r\n            0      First button is the default.\r\n            256    Second button is the default.\r\n            512    Third button is the default.\r\n            768    Fourth button is the default.\r\n            0      Application modal. The user must respond to the message box\r\n                   before continuing work in the current application.\r\n            4096   System modal. The user must respond to the message box\r\n                   before continuing work in any application.\r\n          title[opt] = the dialog box title\r\n        Returns:\r\n          A number indicating which button was clicked:\r\n            1      OK button was clicked.\r\n            2      Cancel button was clicked.\r\n            3      Abort button was clicked.\r\n            4      Retry button was clicked.\r\n            5      Ignore button was clicked.\r\n            6      Yes button was clicked.\r\n            7      No button was clicked.","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"MultiListBox","Arguments":["items","message=None","title=None","defaults=None"],"Signature":"MultiListBox (items, message=None, title=None, defaults=None)","Description":"Displays a list of items in a multiple-selection list box dialog\r\n        ","ArgumentDesc":"\r\nitems = a zero-based, one-dimensional array of string items\r\nmessage [opt] = a prompt or message\r\ntitle [opt] = a dialog box title\r\ndefaults [opt] = either a string representing the pre-selected item in the list or a list if multiple items are pre-selected\r\n        ","Returns":"\r\na list containing the selected items if succesful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MultiListBox in module rhinoscript.userinterface:\r\n\r\nMultiListBox(items, message=None, title=None, defaults=None) |      Displays a list of items in a multiple-selection list box dialog\r\n        Parameters:\r\n          items = a zero-based, one-dimensional array of string items\r\n          message [opt] = a prompt or message\r\n          title [opt] = a dialog box title\r\n          defaults [opt] = either a string representing the pre-selected item in the list or a list if multiple items are pre-selected\r\n        Returns:\r\n          a list containing the selected items if succesful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"OpenFileName","Arguments":["title=None","filter=None","folder=None","filename=None","extension=None"],"Signature":"OpenFileName (title=None, filter=None, folder=None, filename=None, extension=None)","Description":"Displays file open dialog box allowing the user to enter a file name.\r\n        Note, this function does not open the file.\r\n        ","ArgumentDesc":"\r\ntitle[opt] = A dialog box title.\r\nfilter[opt] = A filter string. The filter must be in the following form:\r\n  \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n  If omitted, the filter (*.*) is used.\r\nfolder[opt] = A default folder.\r\nfilename[opt] = a default file name\r\nextension[opt] = a default file extension\r\n        ","Returns":"\r\nthe file name is successful\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OpenFileName in module rhinoscript.userinterface:\r\n\r\nOpenFileName(title=None, filter=None, folder=None, filename=None, extension=None) |      Displays file open dialog box allowing the user to enter a file name.\r\n        Note, this function does not open the file.\r\n        Parameters:\r\n          title[opt] = A dialog box title.\r\n          filter[opt] = A filter string. The filter must be in the following form:\r\n            \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n            If omitted, the filter (*.*) is used.\r\n          folder[opt] = A default folder.\r\n          filename[opt] = a default file name\r\n          extension[opt] = a default file extension\r\n        Returns:\r\n          the file name is successful\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"OpenFileNames","Arguments":["title=None","filter=None","folder=None","filename=None","extension=None"],"Signature":"OpenFileNames (title=None, filter=None, folder=None, filename=None, extension=None)","Description":"Displays file open dialog box allowing the user to select one or more file names.\r\n        Note, this function does not open the file.\r\n        ","ArgumentDesc":"\r\ntitle[opt] = A dialog box title.\r\nfilter[opt] = A filter string. The filter must be in the following form:\r\n  \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n  If omitted, the filter (*.*) is used.\r\nfolder[opt] = A default folder.\r\nfilename[opt] = a default file name\r\nextension[opt] = a default file extension\r\n        ","Returns":"\r\nlist of selected file names\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function OpenFileNames in module rhinoscript.userinterface:\r\n\r\nOpenFileNames(title=None, filter=None, folder=None, filename=None, extension=None) |      Displays file open dialog box allowing the user to select one or more file names.\r\n        Note, this function does not open the file.\r\n        Parameters:\r\n          title[opt] = A dialog box title.\r\n          filter[opt] = A filter string. The filter must be in the following form:\r\n            \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n            If omitted, the filter (*.*) is used.\r\n          folder[opt] = A default folder.\r\n          filename[opt] = a default file name\r\n          extension[opt] = a default file extension\r\n        Returns:\r\n          list of selected file names","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"PopupMenu","Arguments":["items","modes=None","point=None","view=None"],"Signature":"PopupMenu (items, modes=None, point=None, view=None)","Description":"Display a context-style popup menu. The popup menu can appear almost\r\n        anywhere, and can be dismissed by clicking the left or right mouse buttons\r\n        ","ArgumentDesc":"\r\nitems = list of strings representing the menu items. An empty string or None\r\n  will create a separator\r\nmodes[opt] = List of numbers identifying the display modes. If omitted, all\r\n  modes are enabled.\r\n    0 = menu item is enabled\r\n    1 = menu item is disabled\r\n    2 = menu item is checked\r\n    3 = menu item is disabled and checked\r\npoint[opt] = a 3D point where the menu item will appear. If omitted, the menu\r\n  will appear at the current cursor position\r\nview[opt] = if point is specified, the view in which the point is computed.\r\n  If omitted, the active view is used\r\n        ","Returns":"\r\nindex of the menu item picked or -1 if no menu item was picked\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PopupMenu in module rhinoscript.userinterface:\r\n\r\nPopupMenu(items, modes=None, point=None, view=None) |      Display a context-style popup menu. The popup menu can appear almost\r\n        anywhere, and can be dismissed by clicking the left or right mouse buttons\r\n        Parameters:\r\n          items = list of strings representing the menu items. An empty string or None\r\n            will create a separator\r\n          modes[opt] = List of numbers identifying the display modes. If omitted, all\r\n            modes are enabled.\r\n              0 = menu item is enabled\r\n              1 = menu item is disabled\r\n              2 = menu item is checked\r\n              3 = menu item is disabled and checked\r\n          point[opt] = a 3D point where the menu item will appear. If omitted, the menu\r\n            will appear at the current cursor position\r\n          view[opt] = if point is specified, the view in which the point is computed.\r\n            If omitted, the active view is used\r\n        Returns:\r\n          index of the menu item picked or -1 if no menu item was picked","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"PropertyListBox","Arguments":["items","values","message=None","title=None"],"Signature":"PropertyListBox (items, values, message=None, title=None)","Description":"Displays list of items and their values in a property-style list box dialog\r\n        ","ArgumentDesc":"\r\nitems, values = list of string items and their corresponding values\r\nmessage [opt] = a prompt or message\r\ntitle [opt] = a dialog box title\r\n        ","Returns":"\r\na list of new values on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function PropertyListBox in module rhinoscript.userinterface:\r\n\r\nPropertyListBox(items, values, message=None, title=None) |      Displays list of items and their values in a property-style list box dialog\r\n        Parameters:\r\n          items, values = list of string items and their corresponding values\r\n          message [opt] = a prompt or message\r\n          title [opt] = a dialog box title\r\n        Returns:\r\n          a list of new values on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"RealBox","Arguments":["message=''","default_number=None","title=''","minimum=None","maximum=None"],"Signature":"RealBox (message='', default_number=None, title='', minimum=None, maximum=None)","Description":"Display a dialog box prompting the user to enter a number\r\n        Returns:\r\n          number on success\r\n          None on error\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RealBox in module rhinoscript.userinterface:\r\n\r\nRealBox(message='', default_number=None, title='', minimum=None, maximum=None) |      Display a dialog box prompting the user to enter a number\r\n        Returns:\r\n          number on success\r\n          None on error","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"SaveFileName","Arguments":["title=None","filter=None","folder=None","filename=None","extension=None"],"Signature":"SaveFileName (title=None, filter=None, folder=None, filename=None, extension=None)","Description":"Display a save dialog box allowing the user to enter a file name.\r\n        Note, this function does not save the file.\r\n        ","ArgumentDesc":"\r\ntitle[opt] = A dialog box title.\r\nfilter[opt] = A filter string. The filter must be in the following form:\r\n  \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n  If omitted, the filter (*.*) is used.\r\nfolder[opt] = A default folder.\r\nfilename[opt] = a default file name\r\nextension[opt] = a default file extension\r\n        ","Returns":"\r\nthe file name is successful\r\nNone if not successful, or on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SaveFileName in module rhinoscript.userinterface:\r\n\r\nSaveFileName(title=None, filter=None, folder=None, filename=None, extension=None) |      Display a save dialog box allowing the user to enter a file name.\r\n        Note, this function does not save the file.\r\n        Parameters:\r\n          title[opt] = A dialog box title.\r\n          filter[opt] = A filter string. The filter must be in the following form:\r\n            \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n            If omitted, the filter (*.*) is used.\r\n          folder[opt] = A default folder.\r\n          filename[opt] = a default file name\r\n          extension[opt] = a default file extension\r\n        Returns:\r\n          the file name is successful\r\n          None if not successful, or on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"userinterface","Name":"StringBox","Arguments":["message=None","default_value=None","title=None"],"Signature":"StringBox (message=None, default_value=None, title=None)","Description":"Display a dialog box prompting the user to enter a string value.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function StringBox in module rhinoscript.userinterface:\r\n\r\nStringBox(message=None, default_value=None, title=None) |      Display a dialog box prompting the user to enter a string value.","SuccessLevel":1,"IsDocStringWellFormed":false}]},{"ModuleName":"utility","functions":[{"ModuleName":"utility","Name":"Angle","Arguments":["point1","point2","plane=True"],"Signature":"Angle (point1, point2, plane=True)","Description":"Measures the angle between two points\r\n        ","ArgumentDesc":"\r\npoint1, point2: the input points\r\nplane[opt] = Boolean or Plane\r\n  If True, angle calculation is based on the world coordinate system.\r\n  If False, angle calculation is based on the active construction plane\r\n  If a plane is provided, angle calculation is with respect to this plane\r\n        ","Returns":"\r\ntuple containing the following elements if successful\r\n  element 0 = the X,Y angle in degrees\r\n  element 1 = the elevation\r\n  element 2 = delta in the X direction\r\n  element 3 = delta in the Y direction\r\n  element 4 = delta in the Z direction\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Angle in module rhinoscript.utility:\r\n\r\nAngle(point1, point2, plane=True) |      Measures the angle between two points\r\n        Parameters:\r\n          point1, point2: the input points\r\n          plane[opt] = Boolean or Plane\r\n            If True, angle calculation is based on the world coordinate system.\r\n            If False, angle calculation is based on the active construction plane\r\n            If a plane is provided, angle calculation is with respect to this plane\r\n        Returns:\r\n          tuple containing the following elements if successful\r\n            element 0 = the X,Y angle in degrees\r\n            element 1 = the elevation\r\n            element 2 = delta in the X direction\r\n            element 3 = delta in the Y direction\r\n            element 4 = delta in the Z direction\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"Angle2","Arguments":["line1","line2"],"Signature":"Angle2 (line1, line2)","Description":"Measures the angle between two lines\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Angle2 in module rhinoscript.utility:\r\n\r\nAngle2(line1, line2) |      Measures the angle between two lines","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"ClipboardText","Arguments":["text=None"],"Signature":"ClipboardText (text=None)","Description":"Returns or sets a text string to the Windows clipboard\r\n        ","ArgumentDesc":"\r\ntext: [opt] text to set\r\n        ","Returns":"\r\nif text is not specified, the current text in the clipboard\r\nif text is specified, the previous text in the clipboard\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ClipboardText in module rhinoscript.utility:\r\n\r\nClipboardText(text=None) |      Returns or sets a text string to the Windows clipboard\r\n        Parameters:\r\n          text: [opt] text to set\r\n        Returns:\r\n          if text is not specified, the current text in the clipboard\r\n          if text is specified, the previous text in the clipboard\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"ColorAdjustLuma","Arguments":["rgb","luma","scale=False"],"Signature":"ColorAdjustLuma (rgb, luma, scale=False)","Description":"Change the luminance of a red-green-blue value. Hue and saturation are\r\n        not affected\r\n        ","ArgumentDesc":"\r\nrgb = initial rgb value\r\nluma = The luminance in units of 0.1 percent of the total range. A\r\n    value of luma = 50 corresponds to 5 percent of the maximum luminance\r\nscale[opt] = if True, luma specifies how much to increment or decrement the\r\n    current luminance. If False, luma specified the absolute luminance.\r\n        ","Returns":"\r\nmodified rgb value if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ColorAdjustLuma in module rhinoscript.utility:\r\n\r\nColorAdjustLuma(rgb, luma, scale=False) |      Change the luminance of a red-green-blue value. Hue and saturation are\r\n        not affected\r\n        Parameters:\r\n          rgb = initial rgb value\r\n          luma = The luminance in units of 0.1 percent of the total range. A\r\n              value of luma = 50 corresponds to 5 percent of the maximum luminance\r\n          scale[opt] = if True, luma specifies how much to increment or decrement the\r\n              current luminance. If False, luma specified the absolute luminance.\r\n        Returns:\r\n          modified rgb value if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"ColorBlueValue","Arguments":["rgb"],"Signature":"ColorBlueValue (rgb)","Description":"Retrieves intensity value for the blue component of an RGB color\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ColorBlueValue in module rhinoscript.utility:\r\n\r\nColorBlueValue(rgb) |      Retrieves intensity value for the blue component of an RGB color","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"ColorGreenValue","Arguments":["rgb"],"Signature":"ColorGreenValue (rgb)","Description":"Retrieves intensity value for the green component of an RGB color\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ColorGreenValue in module rhinoscript.utility:\r\n\r\nColorGreenValue(rgb) |      Retrieves intensity value for the green component of an RGB color","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"ColorHLSToRGB","Arguments":["hls"],"Signature":"ColorHLSToRGB (hls)","Description":"Converts colors from hue-lumanence-saturation to RGB\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ColorHLSToRGB in module rhinoscript.utility:\r\n\r\nColorHLSToRGB(hls) |      Converts colors from hue-lumanence-saturation to RGB","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"ColorRGBToHLS","Arguments":["rgb"],"Signature":"ColorRGBToHLS (rgb)","Description":"Convert colors from RGB to HLS\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ColorRGBToHLS in module rhinoscript.utility:\r\n\r\nColorRGBToHLS(rgb) |      Convert colors from RGB to HLS","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"ColorRedValue","Arguments":["rgb"],"Signature":"ColorRedValue (rgb)","Description":"Retrieves intensity value for the red component of an RGB color\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ColorRedValue in module rhinoscript.utility:\r\n\r\nColorRedValue(rgb) |      Retrieves intensity value for the red component of an RGB color","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"CullDuplicatePoints","Arguments":["points","tolerance=-1"],"Signature":"CullDuplicatePoints (points, tolerance=-1)","Description":"Removes duplicates from a list of 3D points.\r\n        ","ArgumentDesc":"\r\npoints = A list of 3D points.\r\ntolerance [opt] = Minimum distance between points. Points within this\r\n  tolerance will be discarded. If omitted, Rhino's internal zero tolerance\r\n  is used.\r\n        ","Returns":"\r\nlist of 3D points with duplicates removed if successful.\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CullDuplicatePoints in module rhinoscript.utility:\r\n\r\nCullDuplicatePoints(points, tolerance=-1) |      Removes duplicates from a list of 3D points.\r\n        Parameters:\r\n          points = A list of 3D points.\r\n          tolerance [opt] = Minimum distance between points. Points within this\r\n            tolerance will be discarded. If omitted, Rhino's internal zero tolerance\r\n            is used.\r\n        Returns:\r\n          list of 3D points with duplicates removed if successful.\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"Distance","Arguments":["point1","point2"],"Signature":"Distance (point1, point2)","Description":"Measures distance between two 3D points, or between a 3D point and\r\n        an array of 3D points.\r\n        ","ArgumentDesc":"\r\npoint1 = The first 3D point.\r\npoint2 = The second 3D point or list of 3-D points.\r\n        ","Returns":"\r\nIf point2 is a 3D point then the distance if successful.\r\nIf point2 is a list of points, then an list of distances if successful.\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Distance in module rhinoscript.utility:\r\n\r\nDistance(point1, point2) |      Measures distance between two 3D points, or between a 3D point and\r\n        an array of 3D points.\r\n        Parameters:\r\n          point1 = The first 3D point.\r\n          point2 = The second 3D point or list of 3-D points.\r\n        Returns:\r\n          If point2 is a 3D point then the distance if successful.\r\n          If point2 is a list of points, then an list of distances if successful.\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"GetSettings","Arguments":["filename","section=None","entry=None"],"Signature":"GetSettings (filename, section=None, entry=None)","Description":"Returns string from a specified section in a initialization file.\r\n        ","ArgumentDesc":"\r\nfilename = name of the initialization file\r\nsection[opt] = section containing the entry\r\nentry[opt] = entry whose associated string is to be returned\r\n        ","Returns":"\r\nIf section is not specified, a list containing all section names\r\nIf entry is not specified, a list containing all entry names for a given section\r\nIf section and entry are specied, a value for entry\r\nNone if not successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function GetSettings in module rhinoscript.utility:\r\n\r\nGetSettings(filename, section=None, entry=None) |      Returns string from a specified section in a initialization file.\r\n        Parameters:\r\n          filename = name of the initialization file\r\n          section[opt] = section containing the entry\r\n          entry[opt] = entry whose associated string is to be returned\r\n        Returns:\r\n          If section is not specified, a list containing all section names\r\n          If entry is not specified, a list containing all entry names for a given section\r\n          If section and entry are specied, a value for entry\r\n          None if not successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"Polar","Arguments":["point","angle_degrees","distance","plane=None"],"Signature":"Polar (point, angle_degrees, distance, plane=None)","Description":"Returns 3D point that is a specified angle and distance from a 3D point\r\n        ","ArgumentDesc":"\r\npoint = the point to transform\r\nplane[opt] = plane to base the transformation. If omitted, the world\r\n  x-y plane is used\r\n        ","Returns":"\r\nresulting point is successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Polar in module rhinoscript.utility:\r\n\r\nPolar(point, angle_degrees, distance, plane=None) |      Returns 3D point that is a specified angle and distance from a 3D point\r\n        Parameters:\r\n          point = the point to transform\r\n          plane[opt] = plane to base the transformation. If omitted, the world\r\n            x-y plane is used\r\n        Returns:\r\n          resulting point is successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"Sleep","Arguments":["milliseconds"],"Signature":"Sleep (milliseconds)","Description":"Suspends execution of a running script for the specified interval\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Sleep in module rhinoscript.utility:\r\n\r\nSleep(milliseconds) |      Suspends execution of a running script for the specified interval","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"SortPointList","Arguments":["points","tolerance=None"],"Signature":"SortPointList (points, tolerance=None)","Description":"Sorts list of points so they will be connected in a \"reasonable\" polyline order\r\n        ","ArgumentDesc":"\r\npoints = the points to sort\r\ntolerance[opt] = minimum distance between points. Points that fall within this tolerance\r\n  will be discarded. If omitted, Rhino's internal zero tolerance is used.\r\n        ","Returns":"\r\na list of sorted 3D points if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SortPointList in module rhinoscript.utility:\r\n\r\nSortPointList(points, tolerance=None) |      Sorts list of points so they will be connected in a \"reasonable\" polyline order\r\n        Parameters:\r\n          points = the points to sort\r\n          tolerance[opt] = minimum distance between points. Points that fall within this tolerance\r\n            will be discarded. If omitted, Rhino's internal zero tolerance is used.\r\n        Returns:\r\n          a list of sorted 3D points if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"SortPoints","Arguments":["points","ascending=True","order=0"],"Signature":"SortPoints (points, ascending=True, order=0)","Description":"Sorts an array of 3D points\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function SortPoints in module rhinoscript.utility:\r\n\r\nSortPoints(points, ascending=True, order=0) |      Sorts an array of 3D points","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"Str2Pt","Arguments":["point"],"Signature":"Str2Pt (point)","Description":"convert a formatted string value into a 3D point value\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Str2Pt in module rhinoscript.utility:\r\n\r\nStr2Pt(point) |      convert a formatted string value into a 3D point value","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coerce2dpoint","Arguments":["point","raise_on_error=False"],"Signature":"coerce2dpoint (point, raise_on_error=False)","Description":"Convert input into a Rhino.Geometry.Point2d if possible.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coerce2dpoint in module rhinoscript.utility:\r\n\r\ncoerce2dpoint(point, raise_on_error=False) |      Convert input into a Rhino.Geometry.Point2d if possible.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coerce3dpoint","Arguments":["point","raise_on_error=False"],"Signature":"coerce3dpoint (point, raise_on_error=False)","Description":"Convert input into a Rhino.Geometry.Point3d if possible.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coerce3dpoint in module rhinoscript.utility:\r\n\r\ncoerce3dpoint(point, raise_on_error=False) |      Convert input into a Rhino.Geometry.Point3d if possible.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coerce3dvector","Arguments":["vector","raise_on_error=False"],"Signature":"coerce3dvector (vector, raise_on_error=False)","Description":"Convert input into a Rhino.Geometry.Vector3d if possible.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coerce3dvector in module rhinoscript.utility:\r\n\r\ncoerce3dvector(vector, raise_on_error=False) |      Convert input into a Rhino.Geometry.Vector3d if possible.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coercebrep","Arguments":["id","raise_if_missing=False"],"Signature":"coercebrep (id, raise_if_missing=False)","Description":"attempt to get polysurface geometry from the document with a given id\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coercebrep in module rhinoscript.utility:\r\n\r\ncoercebrep(id, raise_if_missing=False) |      attempt to get polysurface geometry from the document with a given id","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coercecurve","Arguments":["id","segment_index=-1","raise_if_missing=False"],"Signature":"coercecurve (id, segment_index=-1, raise_if_missing=False)","Description":"attempt to get curve geometry from the document with a given id\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coercecurve in module rhinoscript.utility:\r\n\r\ncoercecurve(id, segment_index=-1, raise_if_missing=False) |      attempt to get curve geometry from the document with a given id","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coercegeometry","Arguments":["id","raise_if_missing=False"],"Signature":"coercegeometry (id, raise_if_missing=False)","Description":"attempt to get GeometryBase class from given input\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coercegeometry in module rhinoscript.utility:\r\n\r\ncoercegeometry(id, raise_if_missing=False) |      attempt to get GeometryBase class from given input","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coercemesh","Arguments":["object_id","raise_if_missing=False"],"Signature":"coercemesh (object_id, raise_if_missing=False)","Description":"attempt to get mesh geometry from the document with a given id\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coercemesh in module rhinoscript.utility:\r\n\r\ncoercemesh(object_id, raise_if_missing=False) |      attempt to get mesh geometry from the document with a given id","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coerceplane","Arguments":["plane","raise_on_bad_input=False"],"Signature":"coerceplane (plane, raise_on_bad_input=False)","Description":"Convert input into a Rhino.Geometry.Plane if possible.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coerceplane in module rhinoscript.utility:\r\n\r\ncoerceplane(plane, raise_on_bad_input=False) |      Convert input into a Rhino.Geometry.Plane if possible.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coercerhinoobject","Arguments":["object_id","raise_if_bad_input=False","raise_if_missing=False"],"Signature":"coercerhinoobject (object_id, raise_if_bad_input=False, raise_if_missing=False)","Description":"attempt to get RhinoObject from the document with a given id\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coercerhinoobject in module rhinoscript.utility:\r\n\r\ncoercerhinoobject(object_id, raise_if_bad_input=False, raise_if_missing=False) |      attempt to get RhinoObject from the document with a given id","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coercesurface","Arguments":["object_id","raise_if_missing=False"],"Signature":"coercesurface (object_id, raise_if_missing=False)","Description":"attempt to get surface geometry from the document with a given id\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coercesurface in module rhinoscript.utility:\r\n\r\ncoercesurface(object_id, raise_if_missing=False) |      attempt to get surface geometry from the document with a given id","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"coercexform","Arguments":["xform","raise_on_bad_input=False"],"Signature":"coercexform (xform, raise_on_bad_input=False)","Description":"Convert input into a Rhino.Transform if possible.\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function coercexform in module rhinoscript.utility:\r\n\r\ncoercexform(xform, raise_on_bad_input=False) |      Convert input into a Rhino.Transform if possible.","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"frange","Arguments":["start","stop","step"],"Signature":"frange (start, stop, step)","Description":"float version of the range function\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function frange in module rhinoscript.utility:\r\n\r\nfrange(start, stop, step) |      float version of the range function","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"utility","Name":"fxrange","Arguments":["start","stop","step"],"Signature":"fxrange (start, stop, step)","Description":"float version of the xrange function\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function fxrange in module rhinoscript.utility:\r\n\r\nfxrange(start, stop, step) |      float version of the xrange function","SuccessLevel":1,"IsDocStringWellFormed":false}]},{"ModuleName":"view","functions":[{"ModuleName":"view","Name":"AddDetail","Arguments":["layout_id","corner1","corner2","title=None","projection=1"],"Signature":"AddDetail (layout_id, corner1, corner2, title=None, projection=1)","Description":"Add new detail view to an existing layout view\r\n        ","ArgumentDesc":"\r\nlayout_id = identifier of an existing layout\r\ncorner1, corner2 = 2d corners of the detail in the layout's unit system\r\ntitle[opt] = title of the new detail\r\nprojection[opt] = type of initial view projection for the detail\r\n    1 = parallel top view\r\n    2 = parallel bottom view\r\n    3 = parallel left view\r\n    4 = parallel right view\r\n    5 = parallel front view\r\n    6 = parallel back view\r\n    7 = perspective view\r\n        ","Returns":"\r\nidentifier of the newly created detial on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddDetail in module rhinoscript.view:\r\n\r\nAddDetail(layout_id, corner1, corner2, title=None, projection=1) |      Add new detail view to an existing layout view\r\n        Parameters:\r\n          layout_id = identifier of an existing layout\r\n          corner1, corner2 = 2d corners of the detail in the layout's unit system\r\n          title[opt] = title of the new detail\r\n          projection[opt] = type of initial view projection for the detail\r\n              1 = parallel top view\r\n              2 = parallel bottom view\r\n              3 = parallel left view\r\n              4 = parallel right view\r\n              5 = parallel front view\r\n              6 = parallel back view\r\n              7 = perspective view\r\n        Returns:\r\n          identifier of the newly created detial on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"AddLayout","Arguments":["title=None","size=None"],"Signature":"AddLayout (title=None, size=None)","Description":"Adds a new page layout view\r\n        ","ArgumentDesc":"\r\ntitle[opt] = title of new layout\r\nsize[opt] = width and height of paper for the new layout\r\n        ","Returns":"\r\nid of new layout\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddLayout in module rhinoscript.view:\r\n\r\nAddLayout(title=None, size=None) |      Adds a new page layout view\r\n        Parameters:\r\n          title[opt] = title of new layout\r\n          size[opt] = width and height of paper for the new layout\r\n        Returns:\r\n          id of new layout","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"AddNamedCPlane","Arguments":["cplane_name","view=None"],"Signature":"AddNamedCPlane (cplane_name, view=None)","Description":"Adds new named construction plane to the document\r\n        ","ArgumentDesc":"\r\ncplane_name: the name of the new named construction plane\r\nview:[opt] string or Guid. Title or identifier of the view from which to save\r\n         the construction plane. If omitted, the current active view is used.\r\n        ","Returns":"\r\nname of the newly created construction plane if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddNamedCPlane in module rhinoscript.view:\r\n\r\nAddNamedCPlane(cplane_name, view=None) |      Adds new named construction plane to the document\r\n        Parameters:\r\n          cplane_name: the name of the new named construction plane\r\n          view:[opt] string or Guid. Title or identifier of the view from which to save\r\n                   the construction plane. If omitted, the current active view is used.\r\n        Returns:\r\n          name of the newly created construction plane if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"AddNamedView","Arguments":["name","view=None"],"Signature":"AddNamedView (name, view=None)","Description":"Adds a new named view to the document\r\n        ","ArgumentDesc":"\r\nname: the name of the new named view\r\nview: [opt] the title or identifier of the view to save. If omitted, the current\r\n      active view is saved\r\n        ","Returns":"\r\nname fo the newly created named view if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function AddNamedView in module rhinoscript.view:\r\n\r\nAddNamedView(name, view=None) |      Adds a new named view to the document\r\n        Parameters:\r\n          name: the name of the new named view\r\n          view: [opt] the title or identifier of the view to save. If omitted, the current\r\n                active view is saved\r\n        Returns:\r\n          name fo the newly created named view if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"CurrentDetail","Arguments":["layout","detail=None","return_name=True"],"Signature":"CurrentDetail (layout, detail=None, return_name=True)","Description":"Returns or changes the current detail view in a page layout view\r\n        ","ArgumentDesc":"\r\nlayout = title or identifier of an existing page layout view\r\ndetail[opt] = title or identifier the the detail view to set\r\nreturn_name[opt] = return title if True, else return identifier\r\n        ","Returns":"\r\nif detail is not specified, the title or id of the current detail view\r\nif detail is specified, the title or id of the previous detail view\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurrentDetail in module rhinoscript.view:\r\n\r\nCurrentDetail(layout, detail=None, return_name=True) |      Returns or changes the current detail view in a page layout view\r\n        Parameters:\r\n          layout = title or identifier of an existing page layout view\r\n          detail[opt] = title or identifier the the detail view to set\r\n          return_name[opt] = return title if True, else return identifier\r\n        Returns:\r\n          if detail is not specified, the title or id of the current detail view\r\n          if detail is specified, the title or id of the previous detail view\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"CurrentView","Arguments":["view=None","return_name=True"],"Signature":"CurrentView (view=None, return_name=True)","Description":"Returns or sets the currently active view\r\n        ","ArgumentDesc":"\r\nview:[opt] String or Guid. Title or id of the view to set current.\r\n  If omitted, only the title or identifier of the current view is returned\r\nreturn_name:[opt] If True, then the name, or title, of the view is returned.\r\n  If False, then the identifier of the view is returned\r\n        ","Returns":"\r\nif the title is not specified, the title or id of the current view\r\nif the title is specified, the title or id of the previous current view\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function CurrentView in module rhinoscript.view:\r\n\r\nCurrentView(view=None, return_name=True) |      Returns or sets the currently active view\r\n        Parameters:\r\n          view:[opt] String or Guid. Title or id of the view to set current.\r\n            If omitted, only the title or identifier of the current view is returned\r\n          return_name:[opt] If True, then the name, or title, of the view is returned.\r\n            If False, then the identifier of the view is returned\r\n        Returns:\r\n          if the title is not specified, the title or id of the current view\r\n          if the title is specified, the title or id of the previous current view\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"DeleteNamedCPlane","Arguments":["name"],"Signature":"DeleteNamedCPlane (name)","Description":"Removes a named construction plane from the document\r\n        ","ArgumentDesc":"\r\nname: name of the construction plane to remove\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteNamedCPlane in module rhinoscript.view:\r\n\r\nDeleteNamedCPlane(name) |      Removes a named construction plane from the document\r\n        Parameters:\r\n          name: name of the construction plane to remove\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"DeleteNamedView","Arguments":["name"],"Signature":"DeleteNamedView (name)","Description":"Removes a named view from the document\r\n        ","ArgumentDesc":"\r\nname: name of the named view to remove\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DeleteNamedView in module rhinoscript.view:\r\n\r\nDeleteNamedView(name) |      Removes a named view from the document\r\n        Parameters:\r\n          name: name of the named view to remove\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"DetailLock","Arguments":["detail_id","lock=None"],"Signature":"DetailLock (detail_id, lock=None)","Description":"Returns or modifies the projection locked state of a detail\r\n        ","ArgumentDesc":"\r\ndetail_id = identifier of a detail object\r\nlock[opt] = the new lock state\r\n        ","Returns":"\r\nif lock==None, the current detail projection locked state\r\nif lock is True or False, the previous detail projection locked state\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DetailLock in module rhinoscript.view:\r\n\r\nDetailLock(detail_id, lock=None) |      Returns or modifies the projection locked state of a detail\r\n        Parameters:\r\n          detail_id = identifier of a detail object\r\n          lock[opt] = the new lock state\r\n        Returns:\r\n          if lock==None, the current detail projection locked state\r\n          if lock is True or False, the previous detail projection locked state\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"DetailScale","Arguments":["detail_id","model_length=None","page_length=None"],"Signature":"DetailScale (detail_id, model_length=None, page_length=None)","Description":"Returns or modifies the scale of a detail object\r\n        ","ArgumentDesc":"\r\ndetail_id = identifier of a detail object\r\nmodel_length[opt] = a length in the current model units\r\npage_length[opt] = a length in the current page units\r\n        ","Returns":"\r\ncurrent page to model scale ratio if model_length and page_length are both None\r\nprevious page to model scale ratio if model_length and page_length are values\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function DetailScale in module rhinoscript.view:\r\n\r\nDetailScale(detail_id, model_length=None, page_length=None) |      Returns or modifies the scale of a detail object\r\n        Parameters:\r\n          detail_id = identifier of a detail object\r\n          model_length[opt] = a length in the current model units\r\n          page_length[opt] = a length in the current page units\r\n        Returns:\r\n          current page to model scale ratio if model_length and page_length are both None\r\n          previous page to model scale ratio if model_length and page_length are values\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsDetail","Arguments":["layout","detail"],"Signature":"IsDetail (layout, detail)","Description":"Verifies that a detail view exists on a page layout view\r\n        ","ArgumentDesc":"\r\nlayout: title or identifier of an existing page layout\r\ndetail: title or identifier of an existing detail view\r\n        ","Returns":"\r\nTrue if detail is a detail view\r\nFalse if detail is not a detail view\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsDetail in module rhinoscript.view:\r\n\r\nIsDetail(layout, detail) |      Verifies that a detail view exists on a page layout view\r\n        Parameters:\r\n          layout: title or identifier of an existing page layout\r\n          detail: title or identifier of an existing detail view\r\n        Returns:\r\n          True if detail is a detail view\r\n          False if detail is not a detail view\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsLayout","Arguments":["layout"],"Signature":"IsLayout (layout)","Description":"Verifies that a view is a page layout view\r\n        ","ArgumentDesc":"\r\nlayout: title or identifier of an existing page layout view\r\n        ","Returns":"\r\nTrue if layout is a page layout view\r\nFalse is layout is a standard, model view\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsLayout in module rhinoscript.view:\r\n\r\nIsLayout(layout) |      Verifies that a view is a page layout view\r\n        Parameters:\r\n          layout: title or identifier of an existing page layout view\r\n        Returns:\r\n          True if layout is a page layout view\r\n          False is layout is a standard, model view\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsView","Arguments":["view"],"Signature":"IsView (view)","Description":"Verifies that the specified view exists\r\n        ","ArgumentDesc":"\r\nview: title or identifier of the view\r\n        ","Returns":"\r\nTrue of False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsView in module rhinoscript.view:\r\n\r\nIsView(view) |      Verifies that the specified view exists\r\n        Parameters:\r\n          view: title or identifier of the view\r\n        Returns:\r\n          True of False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsViewCurrent","Arguments":["view"],"Signature":"IsViewCurrent (view)","Description":"Verifies that the specified view is the current, or active view\r\n        ","ArgumentDesc":"\r\nview: title or identifier of the view\r\n        ","Returns":"\r\nTrue of False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsViewCurrent in module rhinoscript.view:\r\n\r\nIsViewCurrent(view) |      Verifies that the specified view is the current, or active view\r\n        Parameters:\r\n          view: title or identifier of the view\r\n        Returns:\r\n          True of False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsViewMaximized","Arguments":["view=None"],"Signature":"IsViewMaximized (view=None)","Description":"Verifies that the specified view is maximized (enlarged so as to fill\r\n        the entire Rhino window)\r\n        Paramters:\r\n          view: [opt] title or identifier of the view. If omitted, the current\r\n                view is used\r\n        Returns:\r\n          True of False\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsViewMaximized in module rhinoscript.view:\r\n\r\nIsViewMaximized(view=None) |      Verifies that the specified view is maximized (enlarged so as to fill\r\n        the entire Rhino window)\r\n        Paramters:\r\n          view: [opt] title or identifier of the view. If omitted, the current\r\n                view is used\r\n        Returns:\r\n          True of False","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsViewPerspective","Arguments":["view"],"Signature":"IsViewPerspective (view)","Description":"Verifies that the specified view's projection is set to perspective\r\n        ","ArgumentDesc":"\r\nview: title or identifier of the view\r\n        ","Returns":"\r\nTrue of False\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsViewPerspective in module rhinoscript.view:\r\n\r\nIsViewPerspective(view) |      Verifies that the specified view's projection is set to perspective\r\n        Parameters:\r\n          view: title or identifier of the view\r\n        Returns:\r\n          True of False","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsViewTitleVisible","Arguments":["view=None"],"Signature":"IsViewTitleVisible (view=None)","Description":"Verifies that the specified view's title window is visible\r\n        Paramters:\r\n          view: [opt] The title or identifier of the view. If omitted, the current\r\n                active view is used\r\n        Returns:\r\n          True of False\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsViewTitleVisible in module rhinoscript.view:\r\n\r\nIsViewTitleVisible(view=None) |      Verifies that the specified view's title window is visible\r\n        Paramters:\r\n          view: [opt] The title or identifier of the view. If omitted, the current\r\n                active view is used\r\n        Returns:\r\n          True of False","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"IsWallpaper","Arguments":["view"],"Signature":"IsWallpaper (view)","Description":"Verifies that the specified view contains a wallpaper image\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function IsWallpaper in module rhinoscript.view:\r\n\r\nIsWallpaper(view) |      Verifies that the specified view contains a wallpaper image","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"MaximizeRestoreView","Arguments":["view=None"],"Signature":"MaximizeRestoreView (view=None)","Description":"Toggles a view's maximized/restore window state of the specified view\r\n        ","ArgumentDesc":"\r\nview: [opt] the title or identifier of the view. If omitted, the current\r\n      active view is used\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function MaximizeRestoreView in module rhinoscript.view:\r\n\r\nMaximizeRestoreView(view=None) |      Toggles a view's maximized/restore window state of the specified view\r\n        Parameters:\r\n          view: [opt] the title or identifier of the view. If omitted, the current\r\n                active view is used","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"NamedCPlane","Arguments":["name"],"Signature":"NamedCPlane (name)","Description":"Returns the plane geometry of the specified named construction plane\r\n        ","ArgumentDesc":"\r\nname: the name of the construction plane\r\n        ","Returns":"\r\na plane on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function NamedCPlane in module rhinoscript.view:\r\n\r\nNamedCPlane(name) |      Returns the plane geometry of the specified named construction plane\r\n        Parameters:\r\n          name: the name of the construction plane\r\n        Returns:\r\n          a plane on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"RenameView","Arguments":["old_title","new_title"],"Signature":"RenameView (old_title, new_title)","Description":"Changes the title of the specified view\r\n        ","ArgumentDesc":"\r\nold_title: the title or identifier of the view to rename\r\nnew_title: the new title of the view\r\n        ","Returns":"\r\nthe view's previous title if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RenameView in module rhinoscript.view:\r\n\r\nRenameView(old_title, new_title) |      Changes the title of the specified view\r\n        Parameters:\r\n          old_title: the title or identifier of the view to rename\r\n          new_title: the new title of the view\r\n        Returns:\r\n          the view's previous title if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"RestoreNamedCPlane","Arguments":["cplane_name","view=None"],"Signature":"RestoreNamedCPlane (cplane_name, view=None)","Description":"Restores a named construction plane to the specified view.\r\n        ","ArgumentDesc":"\r\ncplane_name: name of the construction plane to restore\r\nview: [opt] the title or identifier of the view. If omitted, the current\r\n      active view is used\r\n        ","Returns":"\r\nname of the restored named construction plane if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RestoreNamedCPlane in module rhinoscript.view:\r\n\r\nRestoreNamedCPlane(cplane_name, view=None) |      Restores a named construction plane to the specified view.\r\n        Parameters:\r\n          cplane_name: name of the construction plane to restore\r\n          view: [opt] the title or identifier of the view. If omitted, the current\r\n                active view is used\r\n        Returns:\r\n          name of the restored named construction plane if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"RestoreNamedView","Arguments":["named_view","view=None","restore_bitmap=False"],"Signature":"RestoreNamedView (named_view, view=None, restore_bitmap=False)","Description":"Restores a named view to the specified view\r\n        ","ArgumentDesc":"\r\nnamed_view: name of the named view to restore\r\nview:[opt] title or id of the view to restore the named view.\r\n     If omitted, the current active view is used\r\nrestore_bitmap: [opt] restore the named view's background bitmap\r\n        ","Returns":"\r\nname of the restored view if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RestoreNamedView in module rhinoscript.view:\r\n\r\nRestoreNamedView(named_view, view=None, restore_bitmap=False) |      Restores a named view to the specified view\r\n        Parameters:\r\n          named_view: name of the named view to restore\r\n          view:[opt] title or id of the view to restore the named view.\r\n               If omitted, the current active view is used\r\n          restore_bitmap: [opt] restore the named view's background bitmap\r\n        Returns:\r\n          name of the restored view if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"RotateCamera","Arguments":["view=None","direction=0","angle=None"],"Signature":"RotateCamera (view=None, direction=0, angle=None)","Description":"Rotates a perspective-projection view's camera. See the RotateCamera\r\n        command in the Rhino help file for more details\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\ndirection: [opt] the direction to rotate the camera where 0=right, 1=left,\r\n      2=down, 3=up\r\nangle: [opt] the angle to rotate. If omitted, the angle of rotation\r\n      is specified by the \"Increment in divisions of a circle\" parameter\r\n      specified in Options command's View tab\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RotateCamera in module rhinoscript.view:\r\n\r\nRotateCamera(view=None, direction=0, angle=None) |      Rotates a perspective-projection view's camera. See the RotateCamera\r\n        command in the Rhino help file for more details\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n          direction: [opt] the direction to rotate the camera where 0=right, 1=left,\r\n                2=down, 3=up\r\n          angle: [opt] the angle to rotate. If omitted, the angle of rotation\r\n                is specified by the \"Increment in divisions of a circle\" parameter\r\n                specified in Options command's View tab\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"RotateView","Arguments":["view=None","direction=0","angle=None"],"Signature":"RotateView (view=None, direction=0, angle=None)","Description":"Rotates a view. See RotateView command in Rhino help for more information\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, the current active view is used\r\ndirection:[opt] the direction to rotate the view where\r\n      0=right, 1=left, 2=down, 3=up\r\nangle:[opt] angle to rotate. If omitted, the angle of rotation is specified\r\n      by the \"Increment in divisions of a circle\" parameter specified in\r\n      Options command's View tab\r\n        ","Returns":"\r\nTrue or False indicating success or failure\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function RotateView in module rhinoscript.view:\r\n\r\nRotateView(view=None, direction=0, angle=None) |      Rotates a view. See RotateView command in Rhino help for more information\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n          direction:[opt] the direction to rotate the view where\r\n                0=right, 1=left, 2=down, 3=up\r\n          angle:[opt] angle to rotate. If omitted, the angle of rotation is specified\r\n                by the \"Increment in divisions of a circle\" parameter specified in\r\n                Options command's View tab\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ShowGrid","Arguments":["view=None","show=None"],"Signature":"ShowGrid (view=None, show=None)","Description":"Shows or hides a view's construction plane grid\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, the current active view is used\r\nshow:[opt] The grid state to set. If omitted, the current grid display state is returned\r\n        ","Returns":"\r\nIf show is not specified, then the grid display state if successful\r\nIf show is specified, then the previous grid display state if successful\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowGrid in module rhinoscript.view:\r\n\r\nShowGrid(view=None, show=None) |      Shows or hides a view's construction plane grid\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n          show:[opt] The grid state to set. If omitted, the current grid display state is returned\r\n        Returns:\r\n          If show is not specified, then the grid display state if successful\r\n          If show is specified, then the previous grid display state if successful","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ShowGridAxes","Arguments":["view=None","show=None"],"Signature":"ShowGridAxes (view=None, show=None)","Description":"Shows or hides a view's construction plane grid axes.\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, the current active view\r\n  is used\r\nshow:[opt] The state to set. If omitted, the current grid axes display\r\n  state is returned\r\n        ","Returns":"\r\nIf show is not specified, then the grid axes display state\r\nIf show is specified, then the previous grid axes display state\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowGridAxes in module rhinoscript.view:\r\n\r\nShowGridAxes(view=None, show=None) |      Shows or hides a view's construction plane grid axes.\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, the current active view\r\n            is used\r\n          show:[opt] The state to set. If omitted, the current grid axes display\r\n            state is returned\r\n        Returns:\r\n          If show is not specified, then the grid axes display state\r\n          If show is specified, then the previous grid axes display state","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ShowViewTitle","Arguments":["view=None","show=True"],"Signature":"ShowViewTitle (view=None, show=True)","Description":"Shows or hides the title window of a view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, the current active view is used\r\nshow:[opt] The state to set.\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowViewTitle in module rhinoscript.view:\r\n\r\nShowViewTitle(view=None, show=True) |      Shows or hides the title window of a view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n          show:[opt] The state to set.","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ShowWorldAxes","Arguments":["view=None","show=None"],"Signature":"ShowWorldAxes (view=None, show=None)","Description":"Shows or hides a view's world axis icon\r\n        ","ArgumentDesc":"\r\nview: [opt] title or id of the view. If omitted, the current active view is used\r\nshow: [opt] The state to set.\r\n        ","Returns":"\r\nIf show is not specified, then the world axes display state\r\nIf show is specified, then the previous world axes display state\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ShowWorldAxes in module rhinoscript.view:\r\n\r\nShowWorldAxes(view=None, show=None) |      Shows or hides a view's world axis icon\r\n        Parameters:\r\n          view: [opt] title or id of the view. If omitted, the current active view is used\r\n          show: [opt] The state to set.\r\n        Returns:\r\n          If show is not specified, then the world axes display state\r\n          If show is specified, then the previous world axes display state","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"TiltView","Arguments":["view=None","direction=0","angle=None"],"Signature":"TiltView (view=None, direction=0, angle=None)","Description":"Tilts a view by rotating the camera up vector. See the TiltView command in\r\n        the Rhino help file for more details.\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n          direction:[opt] the direction to rotate the view where 0=right, 1=left\r\n          angle:[opt] the angle to rotate. If omitted, the angle of rotation is\r\n            specified by the \"Increment in divisions of a circle\" parameter specified\r\n            in Options command's View tab\r\n        Returns:\r\n          True or False indicating success or failure\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function TiltView in module rhinoscript.view:\r\n\r\nTiltView(view=None, direction=0, angle=None) |      Tilts a view by rotating the camera up vector. See the TiltView command in\r\n        the Rhino help file for more details.\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n          direction:[opt] the direction to rotate the view where 0=right, 1=left\r\n          angle:[opt] the angle to rotate. If omitted, the angle of rotation is\r\n            specified by the \"Increment in divisions of a circle\" parameter specified\r\n            in Options command's View tab\r\n        Returns:\r\n          True or False indicating success or failure","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewCPlane","Arguments":["view=None","plane=None"],"Signature":"ViewCPlane (view=None, plane=None)","Description":"Return or set a view's construction plane\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used.\r\nplane:[opt] the new construction plane if setting\r\n        ","Returns":"\r\nIf a construction plane is not specified, the current construction plane\r\nIf a construction plane is specified, the previous construction plane\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewCPlane in module rhinoscript.view:\r\n\r\nViewCPlane(view=None, plane=None) |      Return or set a view's construction plane\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used.\r\n          plane:[opt] the new construction plane if setting\r\n        Returns:\r\n          If a construction plane is not specified, the current construction plane\r\n          If a construction plane is specified, the previous construction plane","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewCamera","Arguments":["view=None","camera_location=None"],"Signature":"ViewCamera (view=None, camera_location=None)","Description":"Returns or sets the camera location of the specified view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, the current active view is used\r\ncamera_location: [opt] a 3D point identifying the new camera location.\r\n  If omitted, the current camera location is returned\r\n        ","Returns":"\r\nIf camera_location is not specified, the current camera location\r\nIf camera_location is specified, the previous camera location\r\nNone on error    \r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewCamera in module rhinoscript.view:\r\n\r\nViewCamera(view=None, camera_location=None) |      Returns or sets the camera location of the specified view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n          camera_location: [opt] a 3D point identifying the new camera location.\r\n            If omitted, the current camera location is returned\r\n        Returns:\r\n          If camera_location is not specified, the current camera location\r\n          If camera_location is specified, the previous camera location\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewCameraLens","Arguments":["view=None","length=None"],"Signature":"ViewCameraLens (view=None, length=None)","Description":"Returns or sets the 35mm camera lens length of the specified perspective\r\n        projection view.\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, the current active view is used\r\nlength:[opt] the new 35mm camera lens length. If omitted, the previous\r\n  35mm camera lens length is returned\r\n        ","Returns":"\r\nIf lens length is not specified, the current lens length\r\nIf lens length is specified, the previous lens length\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewCameraLens in module rhinoscript.view:\r\n\r\nViewCameraLens(view=None, length=None) |      Returns or sets the 35mm camera lens length of the specified perspective\r\n        projection view.\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n          length:[opt] the new 35mm camera lens length. If omitted, the previous\r\n            35mm camera lens length is returned\r\n        Returns:\r\n          If lens length is not specified, the current lens length\r\n          If lens length is specified, the previous lens length","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewCameraPlane","Arguments":["view=None"],"Signature":"ViewCameraPlane (view=None)","Description":"Returns the orientation of a view's camera.\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, the current active view is used\r\n        ","Returns":"\r\nthe view's camera plane if successful\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewCameraPlane in module rhinoscript.view:\r\n\r\nViewCameraPlane(view=None) |      Returns the orientation of a view's camera.\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, the current active view is used\r\n        Returns:\r\n          the view's camera plane if successful\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewCameraTarget","Arguments":["view=None","camera=None","target=None"],"Signature":"ViewCameraTarget (view=None, camera=None, target=None)","Description":"Returns or sets the camera and target positions of the specified view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\ncamera:[opt] 3d point identifying the new camera location. If camera and\r\n   target are not specified, current camera and target locations are returned\r\ntarget:[opt] 3d point identifying the new target location. If camera and\r\n   target are not specified, current camera and target locations are returned\r\n        ","Returns":"\r\nif both camera and target are not specified, then the 3d points containing\r\n  the current camera and target locations is returned\r\nif either camera or target are specified, then the 3d points containing the\r\n  previous camera and target locations is returned\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewCameraTarget in module rhinoscript.view:\r\n\r\nViewCameraTarget(view=None, camera=None, target=None) |      Returns or sets the camera and target positions of the specified view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n          camera:[opt] 3d point identifying the new camera location. If camera and\r\n             target are not specified, current camera and target locations are returned\r\n          target:[opt] 3d point identifying the new target location. If camera and\r\n             target are not specified, current camera and target locations are returned\r\n        Returns:\r\n          if both camera and target are not specified, then the 3d points containing\r\n            the current camera and target locations is returned\r\n          if either camera or target are specified, then the 3d points containing the\r\n            previous camera and target locations is returned","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewCameraUp","Arguments":["view=None","up_vector=None"],"Signature":"ViewCameraUp (view=None, up_vector=None)","Description":"Returns or sets the camera up direction of a specified\r\n        ","ArgumentDesc":"\r\nview[opt]: title or id of the view. If omitted, the current active view is used\r\nup_vector[opt]: 3D vector identifying the new camera up direction\r\n        ","Returns":"\r\nif up_vector is not specified, then the current camera up direction\r\nif up_vector is specified, then the previous camera up direction\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewCameraUp in module rhinoscript.view:\r\n\r\nViewCameraUp(view=None, up_vector=None) |      Returns or sets the camera up direction of a specified\r\n        Parameters:\r\n          view[opt]: title or id of the view. If omitted, the current active view is used\r\n          up_vector[opt]: 3D vector identifying the new camera up direction\r\n        Returns:\r\n          if up_vector is not specified, then the current camera up direction\r\n          if up_vector is specified, then the previous camera up direction","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewDisplayMode","Arguments":["view=None","mode=None","return_name=True"],"Signature":"ViewDisplayMode (view=None, mode=None, return_name=True)","Description":"Return or set a view display mode\r\n        Paramters:\r\n          view: [opt] Title or id of a view. If omitted, active view is used\r\n          mode: [opt] Name or id of a display mode\r\n          return_name: [opt] If true, return display mode name. If False, display mode id\r\n        Returns:\r\n          If mode is specified, the previous mode\r\n          If mode is not specified, the current mode\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewDisplayMode in module rhinoscript.view:\r\n\r\nViewDisplayMode(view=None, mode=None, return_name=True) |      Return or set a view display mode\r\n        Paramters:\r\n          view: [opt] Title or id of a view. If omitted, active view is used\r\n          mode: [opt] Name or id of a display mode\r\n          return_name: [opt] If true, return display mode name. If False, display mode id\r\n        Returns:\r\n          If mode is specified, the previous mode\r\n          If mode is not specified, the current mode","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewDisplayModeId","Arguments":["name"],"Signature":"ViewDisplayModeId (name)","Description":"Return id of a display mode given it's name\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewDisplayModeId in module rhinoscript.view:\r\n\r\nViewDisplayModeId(name) |      Return id of a display mode given it's name","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewDisplayModeName","Arguments":["mode_id"],"Signature":"ViewDisplayModeName (mode_id)","Description":"Return name of a display mode given it's id\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewDisplayModeName in module rhinoscript.view:\r\n\r\nViewDisplayModeName(mode_id) |      Return name of a display mode given it's id","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewDisplayModes","Arguments":["return_names=True"],"Signature":"ViewDisplayModes (return_names=True)","Description":"Return list of display modes\r\n        Paramters:\r\n          return_name: [opt] If True, return mode names. If False, return ids\r\n        \r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewDisplayModes in module rhinoscript.view:\r\n\r\nViewDisplayModes(return_names=True) |      Return list of display modes\r\n        Paramters:\r\n          return_name: [opt] If True, return mode names. If False, return ids","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewNames","Arguments":["return_names=True","view_type=0"],"Signature":"ViewNames (return_names=True, view_type=0)","Description":"Return the names, titles, or identifiers of all views in the document\r\n        ","ArgumentDesc":"\r\nreturn_names: [opt] if True then the names of the views are returned.\r\n  If False, then the identifiers of the views are returned\r\nview_type: [opt] the type of view to return\r\n                 0 = standard model views\r\n                 1 = page layout views\r\n                 2 = both standard and page layout views\r\n        ","Returns":"\r\nlist of the view names or identifiers on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewNames in module rhinoscript.view:\r\n\r\nViewNames(return_names=True, view_type=0) |      Return the names, titles, or identifiers of all views in the document\r\n        Parameters:\r\n          return_names: [opt] if True then the names of the views are returned.\r\n            If False, then the identifiers of the views are returned\r\n          view_type: [opt] the type of view to return\r\n                           0 = standard model views\r\n                           1 = page layout views\r\n                           2 = both standard and page layout views\r\n        Returns:\r\n          list of the view names or identifiers on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewNearCorners","Arguments":["view=None"],"Signature":"ViewNearCorners (view=None)","Description":"Return 3d corners of a view's near clipping plane rectangle. Useful\r\n        in determining the \"real world\" size of a parallel-projected view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\n        ","Returns":"\r\nFour Point3d that define the corners of the rectangle (counter-clockwise order)\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewNearCorners in module rhinoscript.view:\r\n\r\nViewNearCorners(view=None) |      Return 3d corners of a view's near clipping plane rectangle. Useful\r\n        in determining the \"real world\" size of a parallel-projected view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n        Returns:\r\n          Four Point3d that define the corners of the rectangle (counter-clockwise order)","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewProjection","Arguments":["view=None","mode=None"],"Signature":"ViewProjection (view=None, mode=None)","Description":"Return or set a view's projection mode.\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\nmode:[opt] the projection mode (1=parallel, 2=perspective)\r\n        ","Returns":"\r\nif mode is not specified, the current projection mode for the specified view\r\nif mode is specified, the previous projection mode for the specified view\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewProjection in module rhinoscript.view:\r\n\r\nViewProjection(view=None, mode=None) |      Return or set a view's projection mode.\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n          mode:[opt] the projection mode (1=parallel, 2=perspective)\r\n        Returns:\r\n          if mode is not specified, the current projection mode for the specified view\r\n          if mode is specified, the previous projection mode for the specified view","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewRadius","Arguments":["view=None","radius=None","mode=False"],"Signature":"ViewRadius (view=None, radius=None, mode=False)","Description":"Returns or sets the radius of a parallel-projected view. Useful\r\n        when you need an absolute zoom factor for a parallel-projected view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\nradius:[opt] the view radius\r\nmode: [opt] perform a \"dolly\" magnification by moving the camera \r\n  towards/away from the target so that the amount of the screen \r\n  subtended by an object changes.  true = perform a \"zoom\" \r\n  magnification by adjusting the \"lens\" angle\r\n        ","Returns":"\r\nif radius is not specified, the current view radius for the specified view\r\nif radius is specified, the previous view radius for the specified view\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewRadius in module rhinoscript.view:\r\n\r\nViewRadius(view=None, radius=None, mode=False) |      Returns or sets the radius of a parallel-projected view. Useful\r\n        when you need an absolute zoom factor for a parallel-projected view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n          radius:[opt] the view radius\r\n          mode: [opt] perform a \"dolly\" magnification by moving the camera \r\n            towards/away from the target so that the amount of the screen \r\n            subtended by an object changes.  true = perform a \"zoom\" \r\n            magnification by adjusting the \"lens\" angle\r\n        Returns:\r\n          if radius is not specified, the current view radius for the specified view\r\n          if radius is specified, the previous view radius for the specified view","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewSize","Arguments":["view=None"],"Signature":"ViewSize (view=None)","Description":"Returns the width and height in pixels of the specified view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\n        ","Returns":"\r\ntuple of two numbers idenfitying width and height\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewSize in module rhinoscript.view:\r\n\r\nViewSize(view=None) |      Returns the width and height in pixels of the specified view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n        Returns:\r\n          tuple of two numbers idenfitying width and height","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewSpeedTest","Arguments":["view=None","frames=100","freeze=True","direction=0","angle_degrees=5"],"Signature":"ViewSpeedTest (view=None, frames=100, freeze=True, direction=0, angle_degrees=5)","Description":"Test's Rhino's display performance\r\n","ArgumentDesc":"","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewSpeedTest in module rhinoscript.view:\r\n\r\nViewSpeedTest(view=None, frames=100, freeze=True, direction=0, angle_degrees=5) |      Test's Rhino's display performance","SuccessLevel":1,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewTarget","Arguments":["view=None","target=None"],"Signature":"ViewTarget (view=None, target=None)","Description":"Returns or sets the target location of the specified view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\ntarget:[opt] 3d point identifying the new target location. If omitted,\r\n  the current target location is returned\r\n        ","Returns":"\r\nis target is not specified, then the current target location\r\nis target is specified, then the previous target location\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewTarget in module rhinoscript.view:\r\n\r\nViewTarget(view=None, target=None) |      Returns or sets the target location of the specified view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n          target:[opt] 3d point identifying the new target location. If omitted,\r\n            the current target location is returned\r\n        Returns:\r\n          is target is not specified, then the current target location\r\n          is target is specified, then the previous target location\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ViewTitle","Arguments":["view_id"],"Signature":"ViewTitle (view_id)","Description":"Returns the name, or title, of a given view's identifier\r\n        ","ArgumentDesc":"\r\nview_id: String or Guid. The identifier of the view\r\n        ","Returns":"\r\nname or title of the view on success\r\nNone on error\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ViewTitle in module rhinoscript.view:\r\n\r\nViewTitle(view_id) |      Returns the name, or title, of a given view's identifier\r\n        Parameters:\r\n          view_id: String or Guid. The identifier of the view\r\n        Returns:\r\n          name or title of the view on success\r\n          None on error","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"Wallpaper","Arguments":["view=None","filename=None"],"Signature":"Wallpaper (view=None, filename=None)","Description":"Returns or sets the wallpaper bitmap of the specified view. To remove a\r\n        wallpaper bitmap, pass an empty string \"\"\r\n        ","ArgumentDesc":"\r\nview[opt] = String or Guid. The identifier of the view. If omitted, the\r\n  active view is used\r\nfilename[opt] = Name of the bitmap file to set as wallpaper\r\n        ","Returns":"\r\nIf filename is not specified, the current wallpaper bitmap filename\r\nIf filename is specified, the previous wallpaper bitmap filename\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function Wallpaper in module rhinoscript.view:\r\n\r\nWallpaper(view=None, filename=None) |      Returns or sets the wallpaper bitmap of the specified view. To remove a\r\n        wallpaper bitmap, pass an empty string \"\"\r\n        Parameters:\r\n          view[opt] = String or Guid. The identifier of the view. If omitted, the\r\n            active view is used\r\n          filename[opt] = Name of the bitmap file to set as wallpaper\r\n        Returns:\r\n          If filename is not specified, the current wallpaper bitmap filename\r\n          If filename is specified, the previous wallpaper bitmap filename","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"WallpaperGrayScale","Arguments":["view=None","grayscale=None"],"Signature":"WallpaperGrayScale (view=None, grayscale=None)","Description":"Returns or sets the grayscale display option of the wallpaper bitmap in a\r\n        specified view\r\n        ","ArgumentDesc":"\r\nview[opt] = String or Guid. The identifier of the view. If omitted, the\r\n  active view is used\r\ngrayscale[opt] = Display the wallpaper in gray(True) or color (False)\r\n        ","Returns":"\r\nIf grayscale is not specified, the current grayscale display option\r\nIf grayscale is specified, the previous grayscale display option\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function WallpaperGrayScale in module rhinoscript.view:\r\n\r\nWallpaperGrayScale(view=None, grayscale=None) |      Returns or sets the grayscale display option of the wallpaper bitmap in a\r\n        specified view\r\n        Parameters:\r\n          view[opt] = String or Guid. The identifier of the view. If omitted, the\r\n            active view is used\r\n          grayscale[opt] = Display the wallpaper in gray(True) or color (False)\r\n        Returns:\r\n          If grayscale is not specified, the current grayscale display option\r\n          If grayscale is specified, the previous grayscale display option","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"WallpaperHidden","Arguments":["view=None","hidden=None"],"Signature":"WallpaperHidden (view=None, hidden=None)","Description":"Returns or sets the visibility of the wallpaper bitmap in a specified view\r\n        ","ArgumentDesc":"\r\nview[opt] = String or Guid. The identifier of the view. If omitted, the\r\n  active view is used\r\nhidden[opt] = Show or hide the wallpaper\r\n        ","Returns":"\r\nIf hidden is not specified, the current hidden state\r\nIf hidden is specified, the previous hidden state\r\n        \r\n","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function WallpaperHidden in module rhinoscript.view:\r\n\r\nWallpaperHidden(view=None, hidden=None) |      Returns or sets the visibility of the wallpaper bitmap in a specified view\r\n        Parameters:\r\n          view[opt] = String or Guid. The identifier of the view. If omitted, the\r\n            active view is used\r\n          hidden[opt] = Show or hide the wallpaper\r\n        Returns:\r\n          If hidden is not specified, the current hidden state\r\n          If hidden is specified, the previous hidden state","SuccessLevel":3,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ZoomBoundingBox","Arguments":["bounding_box","view=None","all=False"],"Signature":"ZoomBoundingBox (bounding_box, view=None, all=False)","Description":"Zooms to the extents of a specified bounding box in the specified view\r\n        ","ArgumentDesc":"\r\nbounding_box: eight points that define the corners of a bounding box\r\n  or a BoundingBox class instance\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\nall:[opt] zoom extents in all views\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ZoomBoundingBox in module rhinoscript.view:\r\n\r\nZoomBoundingBox(bounding_box, view=None, all=False) |      Zooms to the extents of a specified bounding box in the specified view\r\n        Parameters:\r\n          bounding_box: eight points that define the corners of a bounding box\r\n            or a BoundingBox class instance\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n          all:[opt] zoom extents in all views","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ZoomExtents","Arguments":["view=None","all=False"],"Signature":"ZoomExtents (view=None, all=False)","Description":"Zooms to extents of visible objects in the specified view\r\n        ","ArgumentDesc":"\r\nview:[opt] title or id of the view. If omitted, current active view is used\r\nall:[opt] zoom extents in all views\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ZoomExtents in module rhinoscript.view:\r\n\r\nZoomExtents(view=None, all=False) |      Zooms to extents of visible objects in the specified view\r\n        Parameters:\r\n          view:[opt] title or id of the view. If omitted, current active view is used\r\n          all:[opt] zoom extents in all views","SuccessLevel":2,"IsDocStringWellFormed":false},{"ModuleName":"view","Name":"ZoomSelected","Arguments":["view=None","all=False"],"Signature":"ZoomSelected (view=None, all=False)","Description":"Zoom to extents of selected objects in a view\r\n        ","ArgumentDesc":"\r\nview: [opt] title or id of the view. If omitted, active view is used\r\nall: [opt] zoom extents in all views\r\n        \r\n","Returns":"","Example":[],"ExampleString":"","SeeAlso":[],"DocString":"Help on function ZoomSelected in module rhinoscript.view:\r\n\r\nZoomSelected(view=None, all=False) |      Zoom to extents of selected objects in a view\r\n        Parameters:\r\n          view: [opt] title or id of the view. If omitted, active view is used\r\n          all: [opt] zoom extents in all views","SuccessLevel":2,"IsDocStringWellFormed":false}]}]